{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FlowBinding \u00b6 Kotlin Flow binding APIs for Android\u2019s platform and unbundled UI widgets, inspired by RxBinding . Flow is (conceptually) a reactive streams implementation provided by the kotlinx-coroutines-core artifact. FlowBinding offers an extensive set of extension functions that turn traditional callbacks / listeners on Android UI widgets into the Flow type. Article \u00b6 Binding Android UI with Kotlin Flow - featured in Kotlin Weekly #170 FlowBinding 1.0 Download \u00b6 Dependencies are hosted on Maven Central . Latest version: def flowbinding_version = \"1.2.0\" Platform Bindings \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-android:${flowbinding_version}\" AndroidX Bindings \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-activity:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-appcompat:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-core:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-drawerlayout:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-lifecycle:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-navigation:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-preference:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-recyclerview:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-swiperefreshlayout:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager2:${flowbinding_version}\" Material Components Bindings \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-material:${flowbinding_version}\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository . Usage \u00b6 Binding UI Events \u00b6 To observe click events on an Android View : findViewById < Button > ( R . id . button ) . clicks () // binding API available in flowbinding-android . onEach { // handle button clicked } . launchIn ( uiScope ) Binding Scope \u00b6 launchIn(scope) is a shorthand for scope.launch { flow.collect() } provided by the kotlinx-coroutines-core library. This uiScope in the example above is a CoroutineScope that defines the lifecycle of this Flow . The binding implementation will respect this scope by unregistering the callback / listener automatically when the scope is cancelled. In the context of Android lifecycle this means the uiScope passed in here should be a scope that\u2019s bound to the Lifecycle of the view the widget lives in. androidx.lifecycle:lifecycle-runtime-ktx:2.2.0 introduced an extension property LifecycleOwner.lifecycleScope: LifecycleCoroutineScope which will be cancelled when the Lifecycle is destroyed. In an Activity it might look something like this: class ExampleActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_example ) findViewById < ViewPager2 > ( R . id . viewPager ) . pageSelections () // binding API available in flowbinding-viewpager2 . onEach { pagePosition -> // handle pagePosition } . launchIn ( lifecycleScope ) // provided by lifecycle-runtime-ktx } } In a Fragment : class ExampleFragment : Fragment ( R . layout . example_fragment_layout ) { override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { val binding = ExampleFragmentLayoutBinding . bind ( view ) binding . viewPager . pageSelections () // binding API available in flowbinding-viewpager2 . onEach { pagePosition -> // handle pagePosition } . launchIn ( viewLifecycleOwner . lifecycleScope ) // provided by lifecycle-runtime-ktx } } Note that with FlowBinding you no longer need to unregister / remove listeners or callbacks in onDestroy() as this is done automatically for you. Binding UI Events with Additional Information \u00b6 Some UI widgets might hold a state internally which you might want to observe with a Flow . For example with a TabLayout you might want to observe and react to the Tab selection events. In this case the binding API returns a Flow of custom TabLayoutSelectionEvent type which contains the currently selected Tab : tabLayout . tabSelectionEvents () . filterIsInstance < TabLayoutSelectionEvent . TabSelected > () // only care about TabSelected events . onEach { event -> // sync selected tab title to some other UI element selectedTabTitle . text = event . tab . text } . launchIn ( uiScope ) Skipping Initial Value \u00b6 Bindings which emit a stream of state changes return the InitialValueFlow . An InitialValueFlow emits the current value (state) of the widget immediately upon collection of the Flow . In some cases you might want to skip the initial emission of the current value. This can be done by calling the skipInitialValue() on the InitialValueFlow : slider . valueChanges () . skipInitialValue () . onEach { value -> // handle value } . launchIn ( uiScope ) // current value won't be emitted immediately Additional Samples \u00b6 All binding APIs are documented with Example of usage . All bindings are covered by instrumented tests which you may want to refer to. Roadmap \u00b6 Our goal is to provide most of the bindings provided by RxBinding , while shifting our focus to supporting more modern AndroidX APIs such as ViewPager2 and the new components in Material Components as they become available. List of all bindings available: Platform bindings AndroidX Activity bindings AndroidX AppCompat bindings AndroidX Core bindings AndroidX DrawerLayout bindings AndroidX Lifecycle bindings AndroidX Navigation Component bindings AndroidX Preference bindings AndroidX RecyclerView bindings AndroidX SwipeRefreshLayout bindings AndroidX ViewPager bindings AndroidX ViewPager2 bindings Material Components bindings Please feel free to create an issue if you think a useful binding is missing or you want a new binding added to the library. Credits \u00b6 This library is inspired by RxBinding which provides RxJava binding APIs for Android\u2019s UI widgets. Many thanks to RxBinding\u2019s author Jake Wharton and its contributors. License \u00b6 Copyright 2019 Yang Chen Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#flowbinding","text":"Kotlin Flow binding APIs for Android\u2019s platform and unbundled UI widgets, inspired by RxBinding . Flow is (conceptually) a reactive streams implementation provided by the kotlinx-coroutines-core artifact. FlowBinding offers an extensive set of extension functions that turn traditional callbacks / listeners on Android UI widgets into the Flow type.","title":"FlowBinding"},{"location":"#article","text":"Binding Android UI with Kotlin Flow - featured in Kotlin Weekly #170 FlowBinding 1.0","title":"Article"},{"location":"#download","text":"Dependencies are hosted on Maven Central . Latest version: def flowbinding_version = \"1.2.0\"","title":"Download"},{"location":"#platform-bindings","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-android:${flowbinding_version}\"","title":"Platform Bindings"},{"location":"#androidx-bindings","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-activity:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-appcompat:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-core:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-drawerlayout:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-lifecycle:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-navigation:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-preference:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-recyclerview:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-swiperefreshlayout:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager2:${flowbinding_version}\"","title":"AndroidX Bindings"},{"location":"#material-components-bindings","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-material:${flowbinding_version}\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository .","title":"Material Components Bindings"},{"location":"#usage","text":"","title":"Usage"},{"location":"#binding-ui-events","text":"To observe click events on an Android View : findViewById < Button > ( R . id . button ) . clicks () // binding API available in flowbinding-android . onEach { // handle button clicked } . launchIn ( uiScope )","title":"Binding UI Events"},{"location":"#binding-scope","text":"launchIn(scope) is a shorthand for scope.launch { flow.collect() } provided by the kotlinx-coroutines-core library. This uiScope in the example above is a CoroutineScope that defines the lifecycle of this Flow . The binding implementation will respect this scope by unregistering the callback / listener automatically when the scope is cancelled. In the context of Android lifecycle this means the uiScope passed in here should be a scope that\u2019s bound to the Lifecycle of the view the widget lives in. androidx.lifecycle:lifecycle-runtime-ktx:2.2.0 introduced an extension property LifecycleOwner.lifecycleScope: LifecycleCoroutineScope which will be cancelled when the Lifecycle is destroyed. In an Activity it might look something like this: class ExampleActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_example ) findViewById < ViewPager2 > ( R . id . viewPager ) . pageSelections () // binding API available in flowbinding-viewpager2 . onEach { pagePosition -> // handle pagePosition } . launchIn ( lifecycleScope ) // provided by lifecycle-runtime-ktx } } In a Fragment : class ExampleFragment : Fragment ( R . layout . example_fragment_layout ) { override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { val binding = ExampleFragmentLayoutBinding . bind ( view ) binding . viewPager . pageSelections () // binding API available in flowbinding-viewpager2 . onEach { pagePosition -> // handle pagePosition } . launchIn ( viewLifecycleOwner . lifecycleScope ) // provided by lifecycle-runtime-ktx } } Note that with FlowBinding you no longer need to unregister / remove listeners or callbacks in onDestroy() as this is done automatically for you.","title":"Binding Scope"},{"location":"#binding-ui-events-with-additional-information","text":"Some UI widgets might hold a state internally which you might want to observe with a Flow . For example with a TabLayout you might want to observe and react to the Tab selection events. In this case the binding API returns a Flow of custom TabLayoutSelectionEvent type which contains the currently selected Tab : tabLayout . tabSelectionEvents () . filterIsInstance < TabLayoutSelectionEvent . TabSelected > () // only care about TabSelected events . onEach { event -> // sync selected tab title to some other UI element selectedTabTitle . text = event . tab . text } . launchIn ( uiScope )","title":"Binding UI Events with Additional Information"},{"location":"#skipping-initial-value","text":"Bindings which emit a stream of state changes return the InitialValueFlow . An InitialValueFlow emits the current value (state) of the widget immediately upon collection of the Flow . In some cases you might want to skip the initial emission of the current value. This can be done by calling the skipInitialValue() on the InitialValueFlow : slider . valueChanges () . skipInitialValue () . onEach { value -> // handle value } . launchIn ( uiScope ) // current value won't be emitted immediately","title":"Skipping Initial Value"},{"location":"#additional-samples","text":"All binding APIs are documented with Example of usage . All bindings are covered by instrumented tests which you may want to refer to.","title":"Additional Samples"},{"location":"#roadmap","text":"Our goal is to provide most of the bindings provided by RxBinding , while shifting our focus to supporting more modern AndroidX APIs such as ViewPager2 and the new components in Material Components as they become available. List of all bindings available: Platform bindings AndroidX Activity bindings AndroidX AppCompat bindings AndroidX Core bindings AndroidX DrawerLayout bindings AndroidX Lifecycle bindings AndroidX Navigation Component bindings AndroidX Preference bindings AndroidX RecyclerView bindings AndroidX SwipeRefreshLayout bindings AndroidX ViewPager bindings AndroidX ViewPager2 bindings Material Components bindings Please feel free to create an issue if you think a useful binding is missing or you want a new binding added to the library.","title":"Roadmap"},{"location":"#credits","text":"This library is inspired by RxBinding which provides RxJava binding APIs for Android\u2019s UI widgets. Many thanks to RxBinding\u2019s author Jake Wharton and its contributors.","title":"Credits"},{"location":"#license","text":"Copyright 2019 Yang Chen Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 1.2.0 \u00b6 Added \u00b6 New bindings for NavigationBarView which works with both BottomNavigationView and the new NavigationRailView , deprecate bindings on BottomNavigationView . Changed \u00b6 Kotlin 1.5.20 Material Components 1.4.0 AndroidX Core 1.6.0 AndroidX Fragment 1.3.5 1.1.0 \u00b6 Added \u00b6 New bindings for MaterialTimePicker : fun <S> MaterialDatePicker<S>.cancels(): Flow<Unit> fun <S> MaterialDatePicker<S>.dismisses(): Flow<Unit> fun <S> MaterialDatePicker<S>.negativeButtonClicks(): Flow<Unit> fun <S> MaterialDatePicker<S>.positiveButtonClicks(): Flow<S> Changed \u00b6 Kotlin 1.5.10. Coroutines 1.5.0. Material Components 1.3.0 AndroidX Activity 1.2.3. AndroidX Annotation 1.2.0. AndroidX AppCompat 1.3.0. AndroidX Core 1.5.0. AndroidX Fragment 1.3.4. AndroidX Lifecycle 2.3.1. AndroidX Navigation 2.3.5. AndroidX RecyclerView 1.2.1. 1.0.0 \u00b6 This is our first stable release! Thanks everyone for using FlowBinding, reporting bugs, providing feedback and sending PRs. Changed \u00b6 Update to Kotlin 1.4.10. Update to Coroutines 1.4.2. Update to AndroidX Navigation 2.3.2. Update to AndroidX Lifecycle 2.3.0-rc01. 1.0.0-beta02 \u00b6 Changed \u00b6 Convert all custom event types to data class. Update to AndroidX Navigation 2.3.2. Update to Coroutines 1.4.0. 1.0.0-beta01 \u00b6 Added \u00b6 New API docs powered by Dokka 1.4. Changed \u00b6 Update AndroidX dependencies. Update to Kotlin 1.4.10. Version 1.0.0-alpha04 \u00b6 2020-08-18 Fixed incorrect packagingOptions exclusion. Version 1.0.0-alpha03 \u00b6 2020-08-16 Update to Kotlin 1.4.0 and Coroutines 1.3.9. Enable explicit API mode. Update AndroidX and Material Components. Version 1.0.0-alpha02 \u00b6 2020-06-27 Fix: Explicitly adding the flowbinding-common dependency is no longer required. Version 1.0.0-alpha01 \u00b6 2020-06-26 Breaking change: Introduced a new InitialValueFlow type for the bindings which emit state. All bindings with the emitImmediately: Boolean = false param have been migrated to to return InitialValueFlow . This is also a behavior change as the current value of a widget will now be emitted immediately upon collection. The new InitialValueFlow provides a skipInitialValue() function for skipping the initial emission. Dependency updates: drawerlayout:1.1.0 fragment:1.2.5 navigation:2.3.0 swiperefreshlayout:1.1.0 Version 0.12.0 \u00b6 2020-05-29 New: Added new bindings for Material Components: fun Slider.touchEvents(): Flow<SliderTouchEvent> fun RangeSlider.valuesChanges(emitImmediately: Boolean = false): Flow<List<Float>> fun RangeSlider.changeEvents(emitImmediately: Boolean = false): Flow<RangeSliderChangeEvent> fun RangeSlider.touchEvents(): Flow<RangeSliderTouchEvent> fun TextInputLayout.errorIconClicks(): Flow<Unit> fun TextInputLayout.errorIconLongClicks(): Flow<Unit> Enhancement: Updated to Material Components 1.2.0-beta01. Enhancement: Updated to Coroutines 1.3.7. Enhancement: Started downgrading alpha versions of AndroidX dependencies to latest stable for upcoming FlowBinding 1.0 release. Version 0.11.1 \u00b6 2020-04-20 Fix: revert to AGP 4.1.0-alpha05 which broke publishing. Version 0.11.0 \u00b6 2020-04-20 New: Added new binding fun Slider.changeEvents(emitImmediately: Boolean = false): Flow<SliderChangeEvent> ( PR ). Thanks @FlowMo7 for contribution! New: Added flowbinding-viewpager artifact with bindings for the legacy androidx.viewpager.widget.ViewPager . Enhancement: Updated to Kotlin 1.3.72, Coroutines 1.3.5. Enhancement: Updated AndroidX: core:1.3.0-rc01 appcompat:1.2.0-beta01 activity:1.2.0-alpha03 fragment:1.3.0-alpha03 drawerlayout:1.1.0-beta01 navigation:2.3.0-alpha05 preference:1.1.1 recyclerview:1.2.0-alpha02 swiperefreshlayout:1.1.0-rc01 viewpager2:1.1.0-alpha01 Enhancement: Updated Material Components to 1.2.0-alpha06. Version 0.10.2 \u00b6 2020-03-14 Enhancement: Started tracking API binary compatibility. Enhancement: Updated to Kotlin 1.3.70, Coroutines 1.3.4. Enhancement: Updated AndroidX: core:1.3.0-alpha02 appcompat:1.2.0-alpha03 activity:1.2.0-alpha01 fragment:1.3.0-alpha01 drawerlayout:1.1.0-alpha04 lifecycle:2.3.0-alpha01 navigation:2.3.0-alpha03 swiperefreshlayout:1.1.0-beta01 Fix: Do not conflate Flow<Lifecycle.Event> from LifecycleEventFlow to respect the behavior of LifecycleObserver . Version 0.10.1 \u00b6 2020-02-28 Fix: Removed incorrect packagingOptions exclusion. Version 0.10.0 \u00b6 2020-02-28 New: We have a new website with automatically generated & updated API docs. New: minSdkVersion has been dropped to API 14 to match AndroidX\u2019s default and RxBinding. Enhancement: Updated AndroidX, Material Components, build tools, Gradle, AGP, detekt. Version 0.9.0 \u00b6 2020-01-24 New: Added flowbinding-lifecycle artifact with a binding for lifecycle events. New: Added flowbinding-activity artifact with a binding for back pressed events. Enhancement: Updated AndroidX - activity 1.1.0 , fragment 1.2.0 and navigation 2.2.0 . Enhancement: Updated Material Components to 1.2.0-alpha04 . Version 0.8.0 \u00b6 2020-01-04 Fix: Removed incorrect packagingOptions exclusion. Version 0.7.0 \u00b6 2019-12-30 New: Added flowbinding-preference artifact with bindings for the AndroidX Preference library. Enhancement: Migrated from custom GitHub Action to Cirrus CI for running instrumented tests. Tests now take ~15 mins compared to ~21 mins with GitHub Actions. Enhancement: Updated Gradle, AGP, AndroidX, Material Components, Kotlin, Coroutines, detekt, kluent, blueprint. Enhancement: Stopped generating BuildConfig for libraries. Version 0.6.0 \u00b6 2019-11-14 New: Added new binding fun MaterialCardView.checkedChanges(emitImmediately: Boolean = false): Flow<Boolean> Enhancement: Migrated from bitrise.io to a custom GitHub Action for running instrumented tests on macOS VMs. Tests now take ~21 mins compared to 30+ mins with bitrise. Fix: Added @SdkSuppress to ViewScrollChangeEventFlowTest which requires API 23. Enhancement: Updated Gradle, AGP and AndroidX. Fix: Added a bunch of missing event listener removals ( PR ). Thanks @hoc081098 for contribution! Enhancement: Added a custom lint check MissingListenerRemoval for detecting missing listener removals in awaitClose within a callbackFlow implementation. Version 0.5.0 \u00b6 2019-10-28 This is the initial release of FlowBinding - Kotlin Flow binding APIs for Android\u2019s platform and unbundled UI widgets. Please note that while the library is heavily tested with instrumented tests, the APIs are not yet stable. Our plan is to polish the library by adding missing bindings and fixing bugs as we work towards 1.0. New: flowbinding-android artifact - provides Flow bindings for the Android platform APIs. New: flowbinding-appcompat artifact - provides Flow bindings for the AndroidX AppCompat library. New: flowbinding-core artifact - provides Flow bindings for the AndroidX Core library. New: flowbinding-drawerlayout artifact - provides Flow bindings for the AndroidX DrawerLayout library. New: flowbinding-navigation artifact - provides Flow bindings for the AndroidX Navigation library. New: flowbinding-recyclerview artifact - provides Flow bindings for the AndroidX RecyclerView library. New: flowbinding-swiperefreshlayout artifact - provides Flow bindings for the AndroidX SwipeRefreshLayout library. New: flowbinding-viewpager2 artifact - provides Flow bindings for the AndroidX ViewPager2 library.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#120","text":"","title":"1.2.0"},{"location":"changelog/#added","text":"New bindings for NavigationBarView which works with both BottomNavigationView and the new NavigationRailView , deprecate bindings on BottomNavigationView .","title":"Added"},{"location":"changelog/#changed","text":"Kotlin 1.5.20 Material Components 1.4.0 AndroidX Core 1.6.0 AndroidX Fragment 1.3.5","title":"Changed"},{"location":"changelog/#110","text":"","title":"1.1.0"},{"location":"changelog/#added_1","text":"New bindings for MaterialTimePicker : fun <S> MaterialDatePicker<S>.cancels(): Flow<Unit> fun <S> MaterialDatePicker<S>.dismisses(): Flow<Unit> fun <S> MaterialDatePicker<S>.negativeButtonClicks(): Flow<Unit> fun <S> MaterialDatePicker<S>.positiveButtonClicks(): Flow<S>","title":"Added"},{"location":"changelog/#changed_1","text":"Kotlin 1.5.10. Coroutines 1.5.0. Material Components 1.3.0 AndroidX Activity 1.2.3. AndroidX Annotation 1.2.0. AndroidX AppCompat 1.3.0. AndroidX Core 1.5.0. AndroidX Fragment 1.3.4. AndroidX Lifecycle 2.3.1. AndroidX Navigation 2.3.5. AndroidX RecyclerView 1.2.1.","title":"Changed"},{"location":"changelog/#100","text":"This is our first stable release! Thanks everyone for using FlowBinding, reporting bugs, providing feedback and sending PRs.","title":"1.0.0"},{"location":"changelog/#changed_2","text":"Update to Kotlin 1.4.10. Update to Coroutines 1.4.2. Update to AndroidX Navigation 2.3.2. Update to AndroidX Lifecycle 2.3.0-rc01.","title":"Changed"},{"location":"changelog/#100-beta02","text":"","title":"1.0.0-beta02"},{"location":"changelog/#changed_3","text":"Convert all custom event types to data class. Update to AndroidX Navigation 2.3.2. Update to Coroutines 1.4.0.","title":"Changed"},{"location":"changelog/#100-beta01","text":"","title":"1.0.0-beta01"},{"location":"changelog/#added_2","text":"New API docs powered by Dokka 1.4.","title":"Added"},{"location":"changelog/#changed_4","text":"Update AndroidX dependencies. Update to Kotlin 1.4.10.","title":"Changed"},{"location":"changelog/#version-100-alpha04","text":"2020-08-18 Fixed incorrect packagingOptions exclusion.","title":"Version 1.0.0-alpha04"},{"location":"changelog/#version-100-alpha03","text":"2020-08-16 Update to Kotlin 1.4.0 and Coroutines 1.3.9. Enable explicit API mode. Update AndroidX and Material Components.","title":"Version 1.0.0-alpha03"},{"location":"changelog/#version-100-alpha02","text":"2020-06-27 Fix: Explicitly adding the flowbinding-common dependency is no longer required.","title":"Version 1.0.0-alpha02"},{"location":"changelog/#version-100-alpha01","text":"2020-06-26 Breaking change: Introduced a new InitialValueFlow type for the bindings which emit state. All bindings with the emitImmediately: Boolean = false param have been migrated to to return InitialValueFlow . This is also a behavior change as the current value of a widget will now be emitted immediately upon collection. The new InitialValueFlow provides a skipInitialValue() function for skipping the initial emission. Dependency updates: drawerlayout:1.1.0 fragment:1.2.5 navigation:2.3.0 swiperefreshlayout:1.1.0","title":"Version 1.0.0-alpha01"},{"location":"changelog/#version-0120","text":"2020-05-29 New: Added new bindings for Material Components: fun Slider.touchEvents(): Flow<SliderTouchEvent> fun RangeSlider.valuesChanges(emitImmediately: Boolean = false): Flow<List<Float>> fun RangeSlider.changeEvents(emitImmediately: Boolean = false): Flow<RangeSliderChangeEvent> fun RangeSlider.touchEvents(): Flow<RangeSliderTouchEvent> fun TextInputLayout.errorIconClicks(): Flow<Unit> fun TextInputLayout.errorIconLongClicks(): Flow<Unit> Enhancement: Updated to Material Components 1.2.0-beta01. Enhancement: Updated to Coroutines 1.3.7. Enhancement: Started downgrading alpha versions of AndroidX dependencies to latest stable for upcoming FlowBinding 1.0 release.","title":"Version 0.12.0"},{"location":"changelog/#version-0111","text":"2020-04-20 Fix: revert to AGP 4.1.0-alpha05 which broke publishing.","title":"Version 0.11.1"},{"location":"changelog/#version-0110","text":"2020-04-20 New: Added new binding fun Slider.changeEvents(emitImmediately: Boolean = false): Flow<SliderChangeEvent> ( PR ). Thanks @FlowMo7 for contribution! New: Added flowbinding-viewpager artifact with bindings for the legacy androidx.viewpager.widget.ViewPager . Enhancement: Updated to Kotlin 1.3.72, Coroutines 1.3.5. Enhancement: Updated AndroidX: core:1.3.0-rc01 appcompat:1.2.0-beta01 activity:1.2.0-alpha03 fragment:1.3.0-alpha03 drawerlayout:1.1.0-beta01 navigation:2.3.0-alpha05 preference:1.1.1 recyclerview:1.2.0-alpha02 swiperefreshlayout:1.1.0-rc01 viewpager2:1.1.0-alpha01 Enhancement: Updated Material Components to 1.2.0-alpha06.","title":"Version 0.11.0"},{"location":"changelog/#version-0102","text":"2020-03-14 Enhancement: Started tracking API binary compatibility. Enhancement: Updated to Kotlin 1.3.70, Coroutines 1.3.4. Enhancement: Updated AndroidX: core:1.3.0-alpha02 appcompat:1.2.0-alpha03 activity:1.2.0-alpha01 fragment:1.3.0-alpha01 drawerlayout:1.1.0-alpha04 lifecycle:2.3.0-alpha01 navigation:2.3.0-alpha03 swiperefreshlayout:1.1.0-beta01 Fix: Do not conflate Flow<Lifecycle.Event> from LifecycleEventFlow to respect the behavior of LifecycleObserver .","title":"Version 0.10.2"},{"location":"changelog/#version-0101","text":"2020-02-28 Fix: Removed incorrect packagingOptions exclusion.","title":"Version 0.10.1"},{"location":"changelog/#version-0100","text":"2020-02-28 New: We have a new website with automatically generated & updated API docs. New: minSdkVersion has been dropped to API 14 to match AndroidX\u2019s default and RxBinding. Enhancement: Updated AndroidX, Material Components, build tools, Gradle, AGP, detekt.","title":"Version 0.10.0"},{"location":"changelog/#version-090","text":"2020-01-24 New: Added flowbinding-lifecycle artifact with a binding for lifecycle events. New: Added flowbinding-activity artifact with a binding for back pressed events. Enhancement: Updated AndroidX - activity 1.1.0 , fragment 1.2.0 and navigation 2.2.0 . Enhancement: Updated Material Components to 1.2.0-alpha04 .","title":"Version 0.9.0"},{"location":"changelog/#version-080","text":"2020-01-04 Fix: Removed incorrect packagingOptions exclusion.","title":"Version 0.8.0"},{"location":"changelog/#version-070","text":"2019-12-30 New: Added flowbinding-preference artifact with bindings for the AndroidX Preference library. Enhancement: Migrated from custom GitHub Action to Cirrus CI for running instrumented tests. Tests now take ~15 mins compared to ~21 mins with GitHub Actions. Enhancement: Updated Gradle, AGP, AndroidX, Material Components, Kotlin, Coroutines, detekt, kluent, blueprint. Enhancement: Stopped generating BuildConfig for libraries.","title":"Version 0.7.0"},{"location":"changelog/#version-060","text":"2019-11-14 New: Added new binding fun MaterialCardView.checkedChanges(emitImmediately: Boolean = false): Flow<Boolean> Enhancement: Migrated from bitrise.io to a custom GitHub Action for running instrumented tests on macOS VMs. Tests now take ~21 mins compared to 30+ mins with bitrise. Fix: Added @SdkSuppress to ViewScrollChangeEventFlowTest which requires API 23. Enhancement: Updated Gradle, AGP and AndroidX. Fix: Added a bunch of missing event listener removals ( PR ). Thanks @hoc081098 for contribution! Enhancement: Added a custom lint check MissingListenerRemoval for detecting missing listener removals in awaitClose within a callbackFlow implementation.","title":"Version 0.6.0"},{"location":"changelog/#version-050","text":"2019-10-28 This is the initial release of FlowBinding - Kotlin Flow binding APIs for Android\u2019s platform and unbundled UI widgets. Please note that while the library is heavily tested with instrumented tests, the APIs are not yet stable. Our plan is to polish the library by adding missing bindings and fixing bugs as we work towards 1.0. New: flowbinding-android artifact - provides Flow bindings for the Android platform APIs. New: flowbinding-appcompat artifact - provides Flow bindings for the AndroidX AppCompat library. New: flowbinding-core artifact - provides Flow bindings for the AndroidX Core library. New: flowbinding-drawerlayout artifact - provides Flow bindings for the AndroidX DrawerLayout library. New: flowbinding-navigation artifact - provides Flow bindings for the AndroidX Navigation library. New: flowbinding-recyclerview artifact - provides Flow bindings for the AndroidX RecyclerView library. New: flowbinding-swiperefreshlayout artifact - provides Flow bindings for the AndroidX SwipeRefreshLayout library. New: flowbinding-viewpager2 artifact - provides Flow bindings for the AndroidX ViewPager2 library.","title":"Version 0.5.0"},{"location":"flowbinding-activity/","text":"FlowBinding Activity \u00b6 This module provides bindings for the AndroidX Activity library. Transitive Dependency \u00b6 androidx.activity:activity-ktx Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-activity:${flowbinding_version}\" Available Bindings \u00b6 fun OnBackPressedDispatcher . backPresses ( enabled : Boolean ): Flow < Unit >","title":"AndroidX Activity Bindings"},{"location":"flowbinding-activity/#flowbinding-activity","text":"This module provides bindings for the AndroidX Activity library.","title":"FlowBinding Activity"},{"location":"flowbinding-activity/#transitive-dependency","text":"androidx.activity:activity-ktx","title":"Transitive Dependency"},{"location":"flowbinding-activity/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-activity:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-activity/#available-bindings","text":"fun OnBackPressedDispatcher . backPresses ( enabled : Boolean ): Flow < Unit >","title":"Available Bindings"},{"location":"flowbinding-android/","text":"FlowBinding Android \u00b6 This module provides bindings for the Android platform APIs. Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-android:${flowbinding_version}\" Available Bindings \u00b6 // MenuItem fun MenuItem . actionViewEvents ( handled : ( MenuItemActionViewEvent ) -> Boolean ): Flow < MenuItemActionViewEvent > fun MenuItem . clicks ( handled : ( MenuItem ) -> Boolean ): Flow < Unit > // View fun View . attachEvents (): Flow < ViewAttachEvent > fun View . clicks (): Flow < Unit > fun View . drags ( handled : ( DragEvent ) -> Boolean = { true }): Flow < DragEvent > fun View . draws (): Flow < Unit > fun View . focusChanges (): InitialValueFlow < Boolean > fun View . globalLayouts (): Flow < Unit > fun ViewGroup . hierarchyChangeEvents (): Flow < HierarchyChangeEvent > fun View . hovers ( handled : ( MotionEvent ) -> Boolean = { true }): Flow < MotionEvent > fun View . keys ( handled : ( KeyEvent ) -> Boolean = { true }): Flow < KeyEvent > fun View . layoutChangeEvents (): Flow < LayoutChangeEvent > fun View . layoutChanges (): Flow < Unit > fun View . longClicks (): Flow < Unit > fun View . preDraws ( proceedDrawingPass : () -> Boolean ): Flow < Unit > fun View . scrollChangeEvents (): Flow < ScrollChangeEvent > fun View . systemUiVisibilityChanges (): Flow < Int > fun View . touches ( handled : ( MotionEvent ) -> Boolean = { true }): Flow < MotionEvent > // AbsListView fun AbsListView . scrollEvents (): Flow < ScrollEvent > // Adapter fun Adapter . dataChanges (): InitialValueFlow < Adapter > // AdapterView fun < T : Adapter > AdapterView < T > . itemClickEvents (): Flow < AdapterViewItemClickEvent > fun < T : Adapter > AdapterView < T > . itemClicks (): Flow < Int > fun < T : Adapter > AdapterView < T > . itemLongClickEvents ( handled : ( AdapterViewItemLongClickEvent ) -> Boolean = { true }): Flow < AdapterViewItemLongClickEvent > fun < T : Adapter > AdapterView < T > . itemLongClicks ( handled : () -> Boolean = { true }): Flow < Int > fun < T : Adapter > AdapterView < T > . itemSelections (): InitialValueFlow < Int > fun < T : Adapter > AdapterView < T > . selectionEvents (): InitialValueFlow < AdapterViewSelectionEvent > // AutoCompleteTextView fun AutoCompleteTextView . dismisses (): Flow < Unit > fun AutoCompleteTextView . itemClickEvents (): Flow < AdapterViewItemClickEvent > // CompoundButton fun CompoundButton . checkedChanges (): InitialValueFlow < Boolean > // PopupMenu fun PopupMenu . dismisses (): Flow < Unit > fun PopupMenu . itemClicks (): Flow < MenuItem > // RadioGroup fun RadioGroup . checkedChanges (): InitialValueFlow < Int > // RatingBar fun RatingBar . ratingChangeEvents (): InitialValueFlow < RatingChangeEvent > fun RatingBar . ratingChanges (): InitialValueFlow < Float > // SearchView fun SearchView . queryTextChanges (): InitialValueFlow < CharSequence > fun SearchView . queryTextEvents (): InitialValueFlow < QueryTextEvent > // SeekBar fun SeekBar . changeEvents (): InitialValueFlow < SeekBarChangeEvent > fun SeekBar . progressChanges (): InitialValueFlow < Int > // TextView fun TextView . afterTextChanges (): InitialValueFlow < AfterTextChangeEvent > fun TextView . beforeTextChanges (): InitialValueFlow < BeforeTextChangeEvent > fun TextView . editorActionEvents ( handled : ( EditorActionEvent ) -> Boolean = { true }): Flow < EditorActionEvent > fun TextView . textChangeEvents (): InitialValueFlow < TextChangeEvent > fun TextView . textChanges (): InitialValueFlow < CharSequence >","title":"Platform Bindings"},{"location":"flowbinding-android/#flowbinding-android","text":"This module provides bindings for the Android platform APIs.","title":"FlowBinding Android"},{"location":"flowbinding-android/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-android:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-android/#available-bindings","text":"// MenuItem fun MenuItem . actionViewEvents ( handled : ( MenuItemActionViewEvent ) -> Boolean ): Flow < MenuItemActionViewEvent > fun MenuItem . clicks ( handled : ( MenuItem ) -> Boolean ): Flow < Unit > // View fun View . attachEvents (): Flow < ViewAttachEvent > fun View . clicks (): Flow < Unit > fun View . drags ( handled : ( DragEvent ) -> Boolean = { true }): Flow < DragEvent > fun View . draws (): Flow < Unit > fun View . focusChanges (): InitialValueFlow < Boolean > fun View . globalLayouts (): Flow < Unit > fun ViewGroup . hierarchyChangeEvents (): Flow < HierarchyChangeEvent > fun View . hovers ( handled : ( MotionEvent ) -> Boolean = { true }): Flow < MotionEvent > fun View . keys ( handled : ( KeyEvent ) -> Boolean = { true }): Flow < KeyEvent > fun View . layoutChangeEvents (): Flow < LayoutChangeEvent > fun View . layoutChanges (): Flow < Unit > fun View . longClicks (): Flow < Unit > fun View . preDraws ( proceedDrawingPass : () -> Boolean ): Flow < Unit > fun View . scrollChangeEvents (): Flow < ScrollChangeEvent > fun View . systemUiVisibilityChanges (): Flow < Int > fun View . touches ( handled : ( MotionEvent ) -> Boolean = { true }): Flow < MotionEvent > // AbsListView fun AbsListView . scrollEvents (): Flow < ScrollEvent > // Adapter fun Adapter . dataChanges (): InitialValueFlow < Adapter > // AdapterView fun < T : Adapter > AdapterView < T > . itemClickEvents (): Flow < AdapterViewItemClickEvent > fun < T : Adapter > AdapterView < T > . itemClicks (): Flow < Int > fun < T : Adapter > AdapterView < T > . itemLongClickEvents ( handled : ( AdapterViewItemLongClickEvent ) -> Boolean = { true }): Flow < AdapterViewItemLongClickEvent > fun < T : Adapter > AdapterView < T > . itemLongClicks ( handled : () -> Boolean = { true }): Flow < Int > fun < T : Adapter > AdapterView < T > . itemSelections (): InitialValueFlow < Int > fun < T : Adapter > AdapterView < T > . selectionEvents (): InitialValueFlow < AdapterViewSelectionEvent > // AutoCompleteTextView fun AutoCompleteTextView . dismisses (): Flow < Unit > fun AutoCompleteTextView . itemClickEvents (): Flow < AdapterViewItemClickEvent > // CompoundButton fun CompoundButton . checkedChanges (): InitialValueFlow < Boolean > // PopupMenu fun PopupMenu . dismisses (): Flow < Unit > fun PopupMenu . itemClicks (): Flow < MenuItem > // RadioGroup fun RadioGroup . checkedChanges (): InitialValueFlow < Int > // RatingBar fun RatingBar . ratingChangeEvents (): InitialValueFlow < RatingChangeEvent > fun RatingBar . ratingChanges (): InitialValueFlow < Float > // SearchView fun SearchView . queryTextChanges (): InitialValueFlow < CharSequence > fun SearchView . queryTextEvents (): InitialValueFlow < QueryTextEvent > // SeekBar fun SeekBar . changeEvents (): InitialValueFlow < SeekBarChangeEvent > fun SeekBar . progressChanges (): InitialValueFlow < Int > // TextView fun TextView . afterTextChanges (): InitialValueFlow < AfterTextChangeEvent > fun TextView . beforeTextChanges (): InitialValueFlow < BeforeTextChangeEvent > fun TextView . editorActionEvents ( handled : ( EditorActionEvent ) -> Boolean = { true }): Flow < EditorActionEvent > fun TextView . textChangeEvents (): InitialValueFlow < TextChangeEvent > fun TextView . textChanges (): InitialValueFlow < CharSequence >","title":"Available Bindings"},{"location":"flowbinding-appcompat/","text":"FlowBinding AppCompat \u00b6 This module provides bindings for the AndroidX AppCompat library. Transitive Dependency \u00b6 androidx.appcompat:appcompat Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-appcompat:${flowbinding_version}\" Available Bindings \u00b6 // ActionMenuView fun ActionMenuView . itemClicks (): Flow < MenuItem > // PopupMenu fun PopupMenu . dismisses (): Flow < Unit > fun PopupMenu . itemClicks (): Flow < MenuItem > // SearchView fun SearchView . queryTextChanges (): InitialValueFlow < CharSequence > fun SearchView . queryTextEvents (): InitialValueFlow < QueryTextEvent > // Toolbar fun Toolbar . itemClicks (): Flow < MenuItem > fun Toolbar . navigationClicks (): Flow < Unit >","title":"AndroidX AppCompat Bindings"},{"location":"flowbinding-appcompat/#flowbinding-appcompat","text":"This module provides bindings for the AndroidX AppCompat library.","title":"FlowBinding AppCompat"},{"location":"flowbinding-appcompat/#transitive-dependency","text":"androidx.appcompat:appcompat","title":"Transitive Dependency"},{"location":"flowbinding-appcompat/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-appcompat:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-appcompat/#available-bindings","text":"// ActionMenuView fun ActionMenuView . itemClicks (): Flow < MenuItem > // PopupMenu fun PopupMenu . dismisses (): Flow < Unit > fun PopupMenu . itemClicks (): Flow < MenuItem > // SearchView fun SearchView . queryTextChanges (): InitialValueFlow < CharSequence > fun SearchView . queryTextEvents (): InitialValueFlow < QueryTextEvent > // Toolbar fun Toolbar . itemClicks (): Flow < MenuItem > fun Toolbar . navigationClicks (): Flow < Unit >","title":"Available Bindings"},{"location":"flowbinding-core/","text":"FlowBinding Core \u00b6 This module provides bindings for the AndroidX Core library. Transitive Dependency \u00b6 androidx.core:core Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-core:${flowbinding_version}\" Available Bindings \u00b6 fun NestedScrollView . scrollChangeEvents (): Flow < ScrollChangeEvent >","title":"AndroidX Core Bindings"},{"location":"flowbinding-core/#flowbinding-core","text":"This module provides bindings for the AndroidX Core library.","title":"FlowBinding Core"},{"location":"flowbinding-core/#transitive-dependency","text":"androidx.core:core","title":"Transitive Dependency"},{"location":"flowbinding-core/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-core:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-core/#available-bindings","text":"fun NestedScrollView . scrollChangeEvents (): Flow < ScrollChangeEvent >","title":"Available Bindings"},{"location":"flowbinding-drawerlayout/","text":"FlowBinding DrawerLayout \u00b6 This module provides bindings for the AndroidX DrawerLayout library. Transitive Dependency \u00b6 androidx.drawerlayout:drawerlayout Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-drawerlayout:${flowbinding_version}\" Available Bindings \u00b6 fun DrawerLayout . drawerStateChanges ( gravity : Int ): InitialValueFlow < Boolean >","title":"AndroidX DrawerLayout Bindings"},{"location":"flowbinding-drawerlayout/#flowbinding-drawerlayout","text":"This module provides bindings for the AndroidX DrawerLayout library.","title":"FlowBinding DrawerLayout"},{"location":"flowbinding-drawerlayout/#transitive-dependency","text":"androidx.drawerlayout:drawerlayout","title":"Transitive Dependency"},{"location":"flowbinding-drawerlayout/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-drawerlayout:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-drawerlayout/#available-bindings","text":"fun DrawerLayout . drawerStateChanges ( gravity : Int ): InitialValueFlow < Boolean >","title":"Available Bindings"},{"location":"flowbinding-lifecycle/","text":"FlowBinding Lifecycle \u00b6 This module provides bindings for the AndroidX Lifecycle library. Transitive Dependency \u00b6 androidx.lifecycle:lifecycle-common-java8 Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-lifecycle:${flowbinding_version}\" Available Bindings \u00b6 fun Lifecycle . events (): Flow < Lifecycle . Event >","title":"AndroidX Lifecycle Bindings"},{"location":"flowbinding-lifecycle/#flowbinding-lifecycle","text":"This module provides bindings for the AndroidX Lifecycle library.","title":"FlowBinding Lifecycle"},{"location":"flowbinding-lifecycle/#transitive-dependency","text":"androidx.lifecycle:lifecycle-common-java8","title":"Transitive Dependency"},{"location":"flowbinding-lifecycle/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-lifecycle:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-lifecycle/#available-bindings","text":"fun Lifecycle . events (): Flow < Lifecycle . Event >","title":"Available Bindings"},{"location":"flowbinding-material/","text":"FlowBinding Material Components \u00b6 This module provides bindings for the Material Components library. Transitive Dependency \u00b6 com.google.android.material:material Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-material:${flowbinding_version}\" Available Bindings \u00b6 // AppBarLayout fun AppBarLayout . offsetChanges (): Flow < Int > // NavigationBarView fun NavigationBarView . itemReselections (): Flow < MenuItem > fun NavigationBarView . itemSelections (): InitialValueFlow < MenuItem > // BottomSheetBehavior fun View . bottomSheetSlides (): Flow < Float > fun View . bottomSheetStateChanges (): Flow < Int > // Chip fun Chip . closeIconClicks (): Flow < Unit > // ChipGroup fun ChipGroup . chipCheckedChanges (): InitialValueFlow < Int > // MaterialButton fun MaterialButton . checkedChanges (): Flow < Boolean > // MaterialButtonToggleGroup fun MaterialButtonToggleGroup . buttonCheckedChanges (): Flow < MaterialButtonCheckedChangedEvent > // MaterialCardView fun MaterialCardView . checkedChanges (): InitialValueFlow < Boolean > // MaterialDatePicker fun < S > MaterialDatePicker < S > . cancels (): Flow < Unit > fun < S > MaterialDatePicker < S > . dismisses (): Flow < Unit > fun < S > MaterialDatePicker < S > . negativeButtonClicks (): Flow < Unit > fun < S > MaterialDatePicker < S > . positiveButtonClicks (): Flow < S > // MaterialTimePicker fun MaterialTimePicker . cancels (): Flow < Unit > fun MaterialTimePicker . dismisses (): Flow < Unit > fun MaterialTimePicker . negativeButtonClicks (): Flow < Unit > fun MaterialTimePicker . positiveButtonClicks (): Flow < Unit > // NavigationView fun NavigationView . itemSelections (): InitialValueFlow < MenuItem > // Slider fun Slider . valueChanges (): InitialValueFlow < Float > fun Slider . changeEvents (): InitialValueFlow < SliderChangeEvent > fun Slider . touchEvents (): Flow < SliderTouchEvent > // RangeSlider fun RangeSlider . valuesChanges (): InitialValueFlow < List < Float >> fun RangeSlider . changeEvents (): InitialValueFlow < RangeSliderChangeEvent > fun RangeSlider . touchEvents (): Flow < RangeSliderTouchEvent > // Snackbar fun Snackbar . dismissEvents (): Flow < Int > fun Snackbar . shownEvents (): Flow < Unit > // SwipeDismissBehavior fun View . dismisses (): Flow < View > fun View . swipeDismissDragStateChanges (): Flow < Int > // TabLayout fun TabLayout . tabSelectionEvents (): InitialValueFlow < TabLayoutSelectionEvent > // TextInputLayout fun TextInputLayout . startIconClicks (): Flow < Unit > fun TextInputLayout . endIconClicks (): Flow < Unit > fun TextInputLayout . errorIconClicks (): Flow < Unit > fun TextInputLayout . startIconLongClicks (): Flow < Unit > fun TextInputLayout . endIconLongClicks (): Flow < Unit > fun TextInputLayout . errorIconLongClicks (): Flow < Unit >","title":"Material Components Bindings"},{"location":"flowbinding-material/#flowbinding-material-components","text":"This module provides bindings for the Material Components library.","title":"FlowBinding Material Components"},{"location":"flowbinding-material/#transitive-dependency","text":"com.google.android.material:material","title":"Transitive Dependency"},{"location":"flowbinding-material/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-material:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-material/#available-bindings","text":"// AppBarLayout fun AppBarLayout . offsetChanges (): Flow < Int > // NavigationBarView fun NavigationBarView . itemReselections (): Flow < MenuItem > fun NavigationBarView . itemSelections (): InitialValueFlow < MenuItem > // BottomSheetBehavior fun View . bottomSheetSlides (): Flow < Float > fun View . bottomSheetStateChanges (): Flow < Int > // Chip fun Chip . closeIconClicks (): Flow < Unit > // ChipGroup fun ChipGroup . chipCheckedChanges (): InitialValueFlow < Int > // MaterialButton fun MaterialButton . checkedChanges (): Flow < Boolean > // MaterialButtonToggleGroup fun MaterialButtonToggleGroup . buttonCheckedChanges (): Flow < MaterialButtonCheckedChangedEvent > // MaterialCardView fun MaterialCardView . checkedChanges (): InitialValueFlow < Boolean > // MaterialDatePicker fun < S > MaterialDatePicker < S > . cancels (): Flow < Unit > fun < S > MaterialDatePicker < S > . dismisses (): Flow < Unit > fun < S > MaterialDatePicker < S > . negativeButtonClicks (): Flow < Unit > fun < S > MaterialDatePicker < S > . positiveButtonClicks (): Flow < S > // MaterialTimePicker fun MaterialTimePicker . cancels (): Flow < Unit > fun MaterialTimePicker . dismisses (): Flow < Unit > fun MaterialTimePicker . negativeButtonClicks (): Flow < Unit > fun MaterialTimePicker . positiveButtonClicks (): Flow < Unit > // NavigationView fun NavigationView . itemSelections (): InitialValueFlow < MenuItem > // Slider fun Slider . valueChanges (): InitialValueFlow < Float > fun Slider . changeEvents (): InitialValueFlow < SliderChangeEvent > fun Slider . touchEvents (): Flow < SliderTouchEvent > // RangeSlider fun RangeSlider . valuesChanges (): InitialValueFlow < List < Float >> fun RangeSlider . changeEvents (): InitialValueFlow < RangeSliderChangeEvent > fun RangeSlider . touchEvents (): Flow < RangeSliderTouchEvent > // Snackbar fun Snackbar . dismissEvents (): Flow < Int > fun Snackbar . shownEvents (): Flow < Unit > // SwipeDismissBehavior fun View . dismisses (): Flow < View > fun View . swipeDismissDragStateChanges (): Flow < Int > // TabLayout fun TabLayout . tabSelectionEvents (): InitialValueFlow < TabLayoutSelectionEvent > // TextInputLayout fun TextInputLayout . startIconClicks (): Flow < Unit > fun TextInputLayout . endIconClicks (): Flow < Unit > fun TextInputLayout . errorIconClicks (): Flow < Unit > fun TextInputLayout . startIconLongClicks (): Flow < Unit > fun TextInputLayout . endIconLongClicks (): Flow < Unit > fun TextInputLayout . errorIconLongClicks (): Flow < Unit >","title":"Available Bindings"},{"location":"flowbinding-navigation/","text":"FlowBinding Navigation \u00b6 This module provides bindings for the AndroidX Navigation library. Transitive Dependency \u00b6 androidx.navigation:navigation-runtime Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-navigation:${flowbinding_version}\" Available Bindings \u00b6 fun NavController . destinationChangeEvents (): Flow < DestinationChangeEvent >","title":"AndroidX Navigation Component Bindings"},{"location":"flowbinding-navigation/#flowbinding-navigation","text":"This module provides bindings for the AndroidX Navigation library.","title":"FlowBinding Navigation"},{"location":"flowbinding-navigation/#transitive-dependency","text":"androidx.navigation:navigation-runtime","title":"Transitive Dependency"},{"location":"flowbinding-navigation/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-navigation:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-navigation/#available-bindings","text":"fun NavController . destinationChangeEvents (): Flow < DestinationChangeEvent >","title":"Available Bindings"},{"location":"flowbinding-preference/","text":"FlowBinding Preference \u00b6 This module provides bindings for the AndroidX Preference library. Transitive Dependency \u00b6 androidx.preference:preference Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-preference:${flowbinding_version}\" Available Bindings \u00b6 // Preference fun Preference . preferenceChanges (): Flow < Any > fun Preference . preferenceClicks (): Flow < Unit > // EditTextPreference fun EditTextPreference . editTextBindEvents (): Flow < EditTextBindEvent >","title":"AndroidX Preference Bindings"},{"location":"flowbinding-preference/#flowbinding-preference","text":"This module provides bindings for the AndroidX Preference library.","title":"FlowBinding Preference"},{"location":"flowbinding-preference/#transitive-dependency","text":"androidx.preference:preference","title":"Transitive Dependency"},{"location":"flowbinding-preference/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-preference:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-preference/#available-bindings","text":"// Preference fun Preference . preferenceChanges (): Flow < Any > fun Preference . preferenceClicks (): Flow < Unit > // EditTextPreference fun EditTextPreference . editTextBindEvents (): Flow < EditTextBindEvent >","title":"Available Bindings"},{"location":"flowbinding-recyclerview/","text":"FlowBinding RecyclerView \u00b6 This module provides bindings for the AndroidX RecyclerView library. Transitive Dependency \u00b6 androidx.recyclerview:recyclerview Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-recyclerview:${flowbinding_version}\" Available Bindings \u00b6 fun < T : RecyclerView . Adapter < out RecyclerView . ViewHolder > > T . dataChanges (): InitialValueFlow < T > fun RecyclerView . childAttachStateChangeEvents (): Flow < RecyclerViewChildAttachStateChangeEvent > fun RecyclerView . flingEvents ( handled : ( FlingEvent ) -> Boolean = { true }): Flow < FlingEvent > fun RecyclerView . scrollEvents (): Flow < RecyclerViewScrollEvent > fun RecyclerView . scrollStateChanges (): Flow < Int >","title":"AndroidX RecyclerView Bindings"},{"location":"flowbinding-recyclerview/#flowbinding-recyclerview","text":"This module provides bindings for the AndroidX RecyclerView library.","title":"FlowBinding RecyclerView"},{"location":"flowbinding-recyclerview/#transitive-dependency","text":"androidx.recyclerview:recyclerview","title":"Transitive Dependency"},{"location":"flowbinding-recyclerview/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-recyclerview:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-recyclerview/#available-bindings","text":"fun < T : RecyclerView . Adapter < out RecyclerView . ViewHolder > > T . dataChanges (): InitialValueFlow < T > fun RecyclerView . childAttachStateChangeEvents (): Flow < RecyclerViewChildAttachStateChangeEvent > fun RecyclerView . flingEvents ( handled : ( FlingEvent ) -> Boolean = { true }): Flow < FlingEvent > fun RecyclerView . scrollEvents (): Flow < RecyclerViewScrollEvent > fun RecyclerView . scrollStateChanges (): Flow < Int >","title":"Available Bindings"},{"location":"flowbinding-swiperefreshlayout/","text":"FlowBinding SwipeRefreshLayout \u00b6 This module provides bindings for the AndroidX SwipeRefreshLayout library. Transitive Dependency \u00b6 androidx.swiperefreshlayout:swiperefreshlayout Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-swiperefreshlayout:${flowbinding_version}\" Available Bindings \u00b6 fun SwipeRefreshLayout . refreshes (): Flow < Unit >","title":"AndroidX SwipeRefreshLayout Bindings"},{"location":"flowbinding-swiperefreshlayout/#flowbinding-swiperefreshlayout","text":"This module provides bindings for the AndroidX SwipeRefreshLayout library.","title":"FlowBinding SwipeRefreshLayout"},{"location":"flowbinding-swiperefreshlayout/#transitive-dependency","text":"androidx.swiperefreshlayout:swiperefreshlayout","title":"Transitive Dependency"},{"location":"flowbinding-swiperefreshlayout/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-swiperefreshlayout:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-swiperefreshlayout/#available-bindings","text":"fun SwipeRefreshLayout . refreshes (): Flow < Unit >","title":"Available Bindings"},{"location":"flowbinding-viewpager/","text":"FlowBinding ViewPager \u00b6 This module provides bindings for the AndroidX ViewPager library. Transitive Dependency \u00b6 androidx.viewpager:viewpager Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager:${flowbinding_version}\" Available Bindings \u00b6 fun ViewPager . pageScrollEvents (): Flow < ViewPagerPageScrollEvent > fun ViewPager . pageScrollStateChanges (): Flow < Int > fun ViewPager . pageSelections (): InitialValueFlow < Int >","title":"AndroidX ViewPager Bindings"},{"location":"flowbinding-viewpager/#flowbinding-viewpager","text":"This module provides bindings for the AndroidX ViewPager library.","title":"FlowBinding ViewPager"},{"location":"flowbinding-viewpager/#transitive-dependency","text":"androidx.viewpager:viewpager","title":"Transitive Dependency"},{"location":"flowbinding-viewpager/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-viewpager/#available-bindings","text":"fun ViewPager . pageScrollEvents (): Flow < ViewPagerPageScrollEvent > fun ViewPager . pageScrollStateChanges (): Flow < Int > fun ViewPager . pageSelections (): InitialValueFlow < Int >","title":"Available Bindings"},{"location":"flowbinding-viewpager2/","text":"FlowBinding ViewPager2 \u00b6 This module provides bindings for the AndroidX ViewPager2 library. Transitive Dependency \u00b6 androidx.viewpager2:viewpager2 Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager2:${flowbinding_version}\" Available Bindings \u00b6 fun ViewPager2 . pageScrollEvents (): Flow < ViewPager2PageScrollEvent > fun ViewPager2 . pageScrollStateChanges (): Flow < Int > fun ViewPager2 . pageSelections (): InitialValueFlow < Int >","title":"AndroidX ViewPager2 Bindings"},{"location":"flowbinding-viewpager2/#flowbinding-viewpager2","text":"This module provides bindings for the AndroidX ViewPager2 library.","title":"FlowBinding ViewPager2"},{"location":"flowbinding-viewpager2/#transitive-dependency","text":"androidx.viewpager2:viewpager2","title":"Transitive Dependency"},{"location":"flowbinding-viewpager2/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager2:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-viewpager2/#available-bindings","text":"fun ViewPager2 . pageScrollEvents (): Flow < ViewPager2PageScrollEvent > fun ViewPager2 . pageScrollStateChanges (): Flow < Int > fun ViewPager2 . pageSelections (): InitialValueFlow < Int >","title":"Available Bindings"}]}