{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FlowBinding \u00b6 Kotlin Flow binding APIs for Android\u2019s platform and unbundled UI widgets, inspired by RxBinding . Flow is (conceptually) a reactive streams implementation provided by the kotlinx-coroutines-core artifact. FlowBinding offers an extensive set of extension functions that turn traditional callbacks / listeners on Android UI widgets into the Flow type. Article \u00b6 Blog post published in Kotlin Weekly #170 - Binding Android UI with Kotlin Flow Download \u00b6 Dependencies are hosted on Maven Central . Latest version: def flowbinding_version = \"1.0.0-alpha04\" Platform Bindings \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-android:${flowbinding_version}\" AndroidX Bindings \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-activity:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-appcompat:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-core:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-drawerlayout:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-lifecycle:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-navigation:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-preference:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-recyclerview:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-swiperefreshlayout:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager2:${flowbinding_version}\" Material Components Bindings \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-material:${flowbinding_version}\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository . Usage \u00b6 Binding UI Events \u00b6 To observe click events on an Android View : findViewById < Button >( R . id . button ) . clicks () // binding API available in flowbinding-android . onEach { // handle button clicked } . launchIn ( uiScope ) Binding Scope \u00b6 launchIn(scope) is a shorthand for scope.launch { flow.collect() } provided by the kotlinx-coroutines-core library. This uiScope in the example above is a CoroutineScope that defines the lifecycle of this Flow . The binding implementation will respect this scope by unregistering the callback / listener automatically when the scope is cancelled. In the context of Android lifecycle this means the uiScope passed in here should be a scope that\u2019s bound to the Lifecycle of the view the widget lives in. androidx.lifecycle:lifecycle-runtime-ktx:2.2.0 introduced an extension property LifecycleOwner.lifecycleScope: LifecycleCoroutineScope which will be cancelled when the Lifecycle is destroyed. In an Activity it might look something like this: class ExampleActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_example ) findViewById < ViewPager2 >( R . id . viewPager ) . pageSelections () // binding API available in flowbinding-viewpager2 . onEach { pagePosition -> // handle pagePosition } . launchIn ( lifecycleScope ) // provided by lifecycle-runtime-ktx } } Note that with FlowBinding you no longer need to unregister / remove listeners or callbacks in onDestroy() as this is done automatically for you. Binding UI Events with Additional Information \u00b6 Some UI widgets might hold a state internally which you might want to observe with a Flow . For example with a TabLayout you might want to observe and react to the Tab selection events. In this case the binding API returns a Flow of custom TabLayoutSelectionEvent type which contains the currently selected Tab : tabLayout . tabSelectionEvents () . filterIsInstance < TabLayoutSelectionEvent . TabSelected >() // only care about TabSelected events . onEach { event -> // sync selected tab title to some other UI element selectedTabTitle . text = event . tab . text } . launchIn ( uiScope ) Skipping Initial Value \u00b6 Bindings which emit a stream of state changes return the InitialValueFlow . An InitialValueFlow emits the current value (state) of the widget immediately upon collection of the Flow . In some cases you might want to skip the initial emission of the current value. This can be done by calling the skipInitialValue() on the InitialValueFlow : slider . valueChanges () . skipInitialValue () . onEach { value -> // handle value } . launchIn ( uiScope ) // current value won't be emitted immediately Additional Samples \u00b6 All binding APIs are documented with Example of usage . All bindings are covered by instrumented tests which you may want to refer to. Roadmap \u00b6 Our goal is to provide most of the bindings provided by RxBinding , while shifting our focus to supporting more modern AndroidX APIs such as ViewPager2 and the new components in Material Components as they become available. List of all bindings available: Platform bindings AndroidX Activity bindings AndroidX AppCompat bindings AndroidX Core bindings AndroidX DrawerLayout bindings AndroidX Lifecycle bindings AndroidX Navigation Component bindings AndroidX Preference bindings AndroidX RecyclerView bindings AndroidX SwipeRefreshLayout bindings AndroidX ViewPager bindings AndroidX ViewPager2 bindings Material Components bindings Please feel free to create an issue if you think a useful binding is missing or you want a new binding added to the library. Credits \u00b6 This library is inspired by RxBinding which provides RxJava binding APIs for Android\u2019s UI widgets. Many thanks to RxBinding\u2019s author Jake Wharton and its contributors. License \u00b6 Copyright 2019 Yang Chen Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#flowbinding","text":"Kotlin Flow binding APIs for Android\u2019s platform and unbundled UI widgets, inspired by RxBinding . Flow is (conceptually) a reactive streams implementation provided by the kotlinx-coroutines-core artifact. FlowBinding offers an extensive set of extension functions that turn traditional callbacks / listeners on Android UI widgets into the Flow type.","title":"FlowBinding"},{"location":"#article","text":"Blog post published in Kotlin Weekly #170 - Binding Android UI with Kotlin Flow","title":"Article"},{"location":"#download","text":"Dependencies are hosted on Maven Central . Latest version: def flowbinding_version = \"1.0.0-alpha04\"","title":"Download"},{"location":"#platform-bindings","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-android:${flowbinding_version}\"","title":"Platform Bindings"},{"location":"#androidx-bindings","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-activity:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-appcompat:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-core:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-drawerlayout:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-lifecycle:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-navigation:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-preference:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-recyclerview:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-swiperefreshlayout:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager:${flowbinding_version}\" implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager2:${flowbinding_version}\"","title":"AndroidX Bindings"},{"location":"#material-components-bindings","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-material:${flowbinding_version}\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository .","title":"Material Components Bindings"},{"location":"#usage","text":"","title":"Usage"},{"location":"#binding-ui-events","text":"To observe click events on an Android View : findViewById < Button >( R . id . button ) . clicks () // binding API available in flowbinding-android . onEach { // handle button clicked } . launchIn ( uiScope )","title":"Binding UI Events"},{"location":"#binding-scope","text":"launchIn(scope) is a shorthand for scope.launch { flow.collect() } provided by the kotlinx-coroutines-core library. This uiScope in the example above is a CoroutineScope that defines the lifecycle of this Flow . The binding implementation will respect this scope by unregistering the callback / listener automatically when the scope is cancelled. In the context of Android lifecycle this means the uiScope passed in here should be a scope that\u2019s bound to the Lifecycle of the view the widget lives in. androidx.lifecycle:lifecycle-runtime-ktx:2.2.0 introduced an extension property LifecycleOwner.lifecycleScope: LifecycleCoroutineScope which will be cancelled when the Lifecycle is destroyed. In an Activity it might look something like this: class ExampleActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_example ) findViewById < ViewPager2 >( R . id . viewPager ) . pageSelections () // binding API available in flowbinding-viewpager2 . onEach { pagePosition -> // handle pagePosition } . launchIn ( lifecycleScope ) // provided by lifecycle-runtime-ktx } } Note that with FlowBinding you no longer need to unregister / remove listeners or callbacks in onDestroy() as this is done automatically for you.","title":"Binding Scope"},{"location":"#binding-ui-events-with-additional-information","text":"Some UI widgets might hold a state internally which you might want to observe with a Flow . For example with a TabLayout you might want to observe and react to the Tab selection events. In this case the binding API returns a Flow of custom TabLayoutSelectionEvent type which contains the currently selected Tab : tabLayout . tabSelectionEvents () . filterIsInstance < TabLayoutSelectionEvent . TabSelected >() // only care about TabSelected events . onEach { event -> // sync selected tab title to some other UI element selectedTabTitle . text = event . tab . text } . launchIn ( uiScope )","title":"Binding UI Events with Additional Information"},{"location":"#skipping-initial-value","text":"Bindings which emit a stream of state changes return the InitialValueFlow . An InitialValueFlow emits the current value (state) of the widget immediately upon collection of the Flow . In some cases you might want to skip the initial emission of the current value. This can be done by calling the skipInitialValue() on the InitialValueFlow : slider . valueChanges () . skipInitialValue () . onEach { value -> // handle value } . launchIn ( uiScope ) // current value won't be emitted immediately","title":"Skipping Initial Value"},{"location":"#additional-samples","text":"All binding APIs are documented with Example of usage . All bindings are covered by instrumented tests which you may want to refer to.","title":"Additional Samples"},{"location":"#roadmap","text":"Our goal is to provide most of the bindings provided by RxBinding , while shifting our focus to supporting more modern AndroidX APIs such as ViewPager2 and the new components in Material Components as they become available. List of all bindings available: Platform bindings AndroidX Activity bindings AndroidX AppCompat bindings AndroidX Core bindings AndroidX DrawerLayout bindings AndroidX Lifecycle bindings AndroidX Navigation Component bindings AndroidX Preference bindings AndroidX RecyclerView bindings AndroidX SwipeRefreshLayout bindings AndroidX ViewPager bindings AndroidX ViewPager2 bindings Material Components bindings Please feel free to create an issue if you think a useful binding is missing or you want a new binding added to the library.","title":"Roadmap"},{"location":"#credits","text":"This library is inspired by RxBinding which provides RxJava binding APIs for Android\u2019s UI widgets. Many thanks to RxBinding\u2019s author Jake Wharton and its contributors.","title":"Credits"},{"location":"#license","text":"Copyright 2019 Yang Chen Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 1.0.0-alpha04 \u00b6 2020-08-18 Fixed incorrect packagingOptions exclusion. Version 1.0.0-alpha03 \u00b6 2020-08-16 Update to Kotlin 1.4.0 and Coroutines 1.3.9. Enable explicit API mode. Update AndroidX and Material Components. Version 1.0.0-alpha02 \u00b6 2020-06-27 Fix: Explicitly adding the flowbinding-common dependency is no longer required. Version 1.0.0-alpha01 \u00b6 2020-06-26 Breaking change: Introduced a new InitialValueFlow type for the bindings which emit state. All bindings with the emitImmediately: Boolean = false param have been migrated to to return InitialValueFlow . This is also a behavior change as the current value of a widget will now be emitted immediately upon collection. The new InitialValueFlow provides a skipInitialValue() function for skipping the initial emission. Dependency updates: drawerlayout:1.1.0 fragment:1.2.5 navigation:2.3.0 swiperefreshlayout:1.1.0 Version 0.12.0 \u00b6 2020-05-29 New: Added new bindings for Material Components: fun Slider.touchEvents(): Flow<SliderTouchEvent> fun RangeSlider.valuesChanges(emitImmediately: Boolean = false): Flow<List<Float>> fun RangeSlider.changeEvents(emitImmediately: Boolean = false): Flow<RangeSliderChangeEvent> fun RangeSlider.touchEvents(): Flow<RangeSliderTouchEvent> fun TextInputLayout.errorIconClicks(): Flow<Unit> fun TextInputLayout.errorIconLongClicks(): Flow<Unit> Enhancement: Updated to Material Components 1.2.0-beta01. Enhancement: Updated to Coroutines 1.3.7. Enhancement: Started downgrading alpha versions of AndroidX dependencies to latest stable for upcoming FlowBinding 1.0 release. Version 0.11.1 \u00b6 2020-04-20 Fix: revert to AGP 4.1.0-alpha05 which broke publishing. Version 0.11.0 \u00b6 2020-04-20 New: Added new binding fun Slider.changeEvents(emitImmediately: Boolean = false): Flow<SliderChangeEvent> ( PR ). Thanks @FlowMo7 for contribution! New: Added flowbinding-viewpager artifact with bindings for the legacy androidx.viewpager.widget.ViewPager . Enhancement: Updated to Kotlin 1.3.72, Coroutines 1.3.5. Enhancement: Updated AndroidX: core:1.3.0-rc01 appcompat:1.2.0-beta01 activity:1.2.0-alpha03 fragment:1.3.0-alpha03 drawerlayout:1.1.0-beta01 navigation:2.3.0-alpha05 preference:1.1.1 recyclerview:1.2.0-alpha02 swiperefreshlayout:1.1.0-rc01 viewpager2:1.1.0-alpha01 Enhancement: Updated Material Components to 1.2.0-alpha06. Version 0.10.2 \u00b6 2020-03-14 Enhancement: Started tracking API binary compatibility. Enhancement: Updated to Kotlin 1.3.70, Coroutines 1.3.4. Enhancement: Updated AndroidX: core:1.3.0-alpha02 appcompat:1.2.0-alpha03 activity:1.2.0-alpha01 fragment:1.3.0-alpha01 drawerlayout:1.1.0-alpha04 lifecycle:2.3.0-alpha01 navigation:2.3.0-alpha03 swiperefreshlayout:1.1.0-beta01 Fix: Do not conflate Flow<Lifecycle.Event> from LifecycleEventFlow to respect the behavior of LifecycleObserver . Version 0.10.1 \u00b6 2020-02-28 Fix: Removed incorrect packagingOptions exclusion. Version 0.10.0 \u00b6 2020-02-28 New: We have a new website with automatically generated & updated API docs. New: minSdkVersion has been dropped to API 14 to match AndroidX\u2019s default and RxBinding. Enhancement: Updated AndroidX, Material Components, build tools, Gradle, AGP, detekt. Version 0.9.0 \u00b6 2020-01-24 New: Added flowbinding-lifecycle artifact with a binding for lifecycle events. New: Added flowbinding-activity artifact with a binding for back pressed events. Enhancement: Updated AndroidX - activity 1.1.0 , fragment 1.2.0 and navigation 2.2.0 . Enhancement: Updated Material Components to 1.2.0-alpha04 . Version 0.8.0 \u00b6 2020-01-04 Fix: Removed incorrect packagingOptions exclusion. Version 0.7.0 \u00b6 2019-12-30 New: Added flowbinding-preference artifact with bindings for the AndroidX Preference library. Enhancement: Migrated from custom GitHub Action to Cirrus CI for running instrumented tests. Tests now take ~15 mins compared to ~21 mins with GitHub Actions. Enhancement: Updated Gradle, AGP, AndroidX, Material Components, Kotlin, Coroutines, detekt, kluent, blueprint. Enhancement: Stopped generating BuildConfig for libraries. Version 0.6.0 \u00b6 2019-11-14 New: Added new binding fun MaterialCardView.checkedChanges(emitImmediately: Boolean = false): Flow<Boolean> Enhancement: Migrated from bitrise.io to a custom GitHub Action for running instrumented tests on macOS VMs. Tests now take ~21 mins compared to 30+ mins with bitrise. Fix: Added @SdkSuppress to ViewScrollChangeEventFlowTest which requires API 23. Enhancement: Updated Gradle, AGP and AndroidX. Fix: Added a bunch of missing event listener removals ( PR ). Thanks @hoc081098 for contribution! Enhancement: Added a custom lint check MissingListenerRemoval for detecting missing listener removals in awaitClose within a callbackFlow implementation. Version 0.5.0 \u00b6 2019-10-28 This is the initial release of FlowBinding - Kotlin Flow binding APIs for Android\u2019s platform and unbundled UI widgets. Please note that while the library is heavily tested with instrumented tests, the APIs are not yet stable. Our plan is to polish the library by adding missing bindings and fixing bugs as we work towards 1.0. New: flowbinding-android artifact - provides Flow bindings for the Android platform APIs. New: flowbinding-appcompat artifact - provides Flow bindings for the AndroidX AppCompat library. New: flowbinding-core artifact - provides Flow bindings for the AndroidX Core library. New: flowbinding-drawerlayout artifact - provides Flow bindings for the AndroidX DrawerLayout library. New: flowbinding-navigation artifact - provides Flow bindings for the AndroidX Navigation library. New: flowbinding-recyclerview artifact - provides Flow bindings for the AndroidX RecyclerView library. New: flowbinding-swiperefreshlayout artifact - provides Flow bindings for the AndroidX SwipeRefreshLayout library. New: flowbinding-viewpager2 artifact - provides Flow bindings for the AndroidX ViewPager2 library.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-100-alpha04","text":"2020-08-18 Fixed incorrect packagingOptions exclusion.","title":"Version 1.0.0-alpha04"},{"location":"changelog/#version-100-alpha03","text":"2020-08-16 Update to Kotlin 1.4.0 and Coroutines 1.3.9. Enable explicit API mode. Update AndroidX and Material Components.","title":"Version 1.0.0-alpha03"},{"location":"changelog/#version-100-alpha02","text":"2020-06-27 Fix: Explicitly adding the flowbinding-common dependency is no longer required.","title":"Version 1.0.0-alpha02"},{"location":"changelog/#version-100-alpha01","text":"2020-06-26 Breaking change: Introduced a new InitialValueFlow type for the bindings which emit state. All bindings with the emitImmediately: Boolean = false param have been migrated to to return InitialValueFlow . This is also a behavior change as the current value of a widget will now be emitted immediately upon collection. The new InitialValueFlow provides a skipInitialValue() function for skipping the initial emission. Dependency updates: drawerlayout:1.1.0 fragment:1.2.5 navigation:2.3.0 swiperefreshlayout:1.1.0","title":"Version 1.0.0-alpha01"},{"location":"changelog/#version-0120","text":"2020-05-29 New: Added new bindings for Material Components: fun Slider.touchEvents(): Flow<SliderTouchEvent> fun RangeSlider.valuesChanges(emitImmediately: Boolean = false): Flow<List<Float>> fun RangeSlider.changeEvents(emitImmediately: Boolean = false): Flow<RangeSliderChangeEvent> fun RangeSlider.touchEvents(): Flow<RangeSliderTouchEvent> fun TextInputLayout.errorIconClicks(): Flow<Unit> fun TextInputLayout.errorIconLongClicks(): Flow<Unit> Enhancement: Updated to Material Components 1.2.0-beta01. Enhancement: Updated to Coroutines 1.3.7. Enhancement: Started downgrading alpha versions of AndroidX dependencies to latest stable for upcoming FlowBinding 1.0 release.","title":"Version 0.12.0"},{"location":"changelog/#version-0111","text":"2020-04-20 Fix: revert to AGP 4.1.0-alpha05 which broke publishing.","title":"Version 0.11.1"},{"location":"changelog/#version-0110","text":"2020-04-20 New: Added new binding fun Slider.changeEvents(emitImmediately: Boolean = false): Flow<SliderChangeEvent> ( PR ). Thanks @FlowMo7 for contribution! New: Added flowbinding-viewpager artifact with bindings for the legacy androidx.viewpager.widget.ViewPager . Enhancement: Updated to Kotlin 1.3.72, Coroutines 1.3.5. Enhancement: Updated AndroidX: core:1.3.0-rc01 appcompat:1.2.0-beta01 activity:1.2.0-alpha03 fragment:1.3.0-alpha03 drawerlayout:1.1.0-beta01 navigation:2.3.0-alpha05 preference:1.1.1 recyclerview:1.2.0-alpha02 swiperefreshlayout:1.1.0-rc01 viewpager2:1.1.0-alpha01 Enhancement: Updated Material Components to 1.2.0-alpha06.","title":"Version 0.11.0"},{"location":"changelog/#version-0102","text":"2020-03-14 Enhancement: Started tracking API binary compatibility. Enhancement: Updated to Kotlin 1.3.70, Coroutines 1.3.4. Enhancement: Updated AndroidX: core:1.3.0-alpha02 appcompat:1.2.0-alpha03 activity:1.2.0-alpha01 fragment:1.3.0-alpha01 drawerlayout:1.1.0-alpha04 lifecycle:2.3.0-alpha01 navigation:2.3.0-alpha03 swiperefreshlayout:1.1.0-beta01 Fix: Do not conflate Flow<Lifecycle.Event> from LifecycleEventFlow to respect the behavior of LifecycleObserver .","title":"Version 0.10.2"},{"location":"changelog/#version-0101","text":"2020-02-28 Fix: Removed incorrect packagingOptions exclusion.","title":"Version 0.10.1"},{"location":"changelog/#version-0100","text":"2020-02-28 New: We have a new website with automatically generated & updated API docs. New: minSdkVersion has been dropped to API 14 to match AndroidX\u2019s default and RxBinding. Enhancement: Updated AndroidX, Material Components, build tools, Gradle, AGP, detekt.","title":"Version 0.10.0"},{"location":"changelog/#version-090","text":"2020-01-24 New: Added flowbinding-lifecycle artifact with a binding for lifecycle events. New: Added flowbinding-activity artifact with a binding for back pressed events. Enhancement: Updated AndroidX - activity 1.1.0 , fragment 1.2.0 and navigation 2.2.0 . Enhancement: Updated Material Components to 1.2.0-alpha04 .","title":"Version 0.9.0"},{"location":"changelog/#version-080","text":"2020-01-04 Fix: Removed incorrect packagingOptions exclusion.","title":"Version 0.8.0"},{"location":"changelog/#version-070","text":"2019-12-30 New: Added flowbinding-preference artifact with bindings for the AndroidX Preference library. Enhancement: Migrated from custom GitHub Action to Cirrus CI for running instrumented tests. Tests now take ~15 mins compared to ~21 mins with GitHub Actions. Enhancement: Updated Gradle, AGP, AndroidX, Material Components, Kotlin, Coroutines, detekt, kluent, blueprint. Enhancement: Stopped generating BuildConfig for libraries.","title":"Version 0.7.0"},{"location":"changelog/#version-060","text":"2019-11-14 New: Added new binding fun MaterialCardView.checkedChanges(emitImmediately: Boolean = false): Flow<Boolean> Enhancement: Migrated from bitrise.io to a custom GitHub Action for running instrumented tests on macOS VMs. Tests now take ~21 mins compared to 30+ mins with bitrise. Fix: Added @SdkSuppress to ViewScrollChangeEventFlowTest which requires API 23. Enhancement: Updated Gradle, AGP and AndroidX. Fix: Added a bunch of missing event listener removals ( PR ). Thanks @hoc081098 for contribution! Enhancement: Added a custom lint check MissingListenerRemoval for detecting missing listener removals in awaitClose within a callbackFlow implementation.","title":"Version 0.6.0"},{"location":"changelog/#version-050","text":"2019-10-28 This is the initial release of FlowBinding - Kotlin Flow binding APIs for Android\u2019s platform and unbundled UI widgets. Please note that while the library is heavily tested with instrumented tests, the APIs are not yet stable. Our plan is to polish the library by adding missing bindings and fixing bugs as we work towards 1.0. New: flowbinding-android artifact - provides Flow bindings for the Android platform APIs. New: flowbinding-appcompat artifact - provides Flow bindings for the AndroidX AppCompat library. New: flowbinding-core artifact - provides Flow bindings for the AndroidX Core library. New: flowbinding-drawerlayout artifact - provides Flow bindings for the AndroidX DrawerLayout library. New: flowbinding-navigation artifact - provides Flow bindings for the AndroidX Navigation library. New: flowbinding-recyclerview artifact - provides Flow bindings for the AndroidX RecyclerView library. New: flowbinding-swiperefreshlayout artifact - provides Flow bindings for the AndroidX SwipeRefreshLayout library. New: flowbinding-viewpager2 artifact - provides Flow bindings for the AndroidX ViewPager2 library.","title":"Version 0.5.0"},{"location":"api/flowbinding-activity/","text":"flowbinding-activity Packages \u00b6 Name Summary reactivecircus.flowbinding.activity Index \u00b6 All Types","title":"flowbinding-activity"},{"location":"api/flowbinding-activity/#packages","text":"Name Summary reactivecircus.flowbinding.activity","title":"Packages"},{"location":"api/flowbinding-activity/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-activity/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.activity) androidx.activity.OnBackPressedDispatcher \u00b6","title":"Index"},{"location":"api/flowbinding-activity/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.activity)","title":"All Types"},{"location":"api/flowbinding-activity/alltypes/#androidxactivityonbackpresseddispatcher","text":"","title":"androidx.activity.OnBackPressedDispatcher"},{"location":"api/flowbinding-activity/reactivecircus.flowbinding.activity/","text":"flowbinding-activity / reactivecircus.flowbinding.activity Package reactivecircus.flowbinding.activity \u00b6 Extensions for External Classes \u00b6 Name Summary androidx.activity.OnBackPressedDispatcher","title":"Index"},{"location":"api/flowbinding-activity/reactivecircus.flowbinding.activity/#package-reactivecircusflowbindingactivity","text":"","title":"Package reactivecircus.flowbinding.activity"},{"location":"api/flowbinding-activity/reactivecircus.flowbinding.activity/#extensions-for-external-classes","text":"Name Summary androidx.activity.OnBackPressedDispatcher","title":"Extensions for External Classes"},{"location":"api/flowbinding-activity/reactivecircus.flowbinding.activity/androidx.activity.-on-back-pressed-dispatcher/","text":"flowbinding-activity / reactivecircus.flowbinding.activity / androidx.activity.OnBackPressedDispatcher Extensions for androidx.activity.OnBackPressedDispatcher \u00b6 Name Summary backPresses Create a Flow of on back pressed events on the OnBackPressedDispatcher instance. fun OnBackPressedDispatcher.backPresses(owner: LifecycleOwner): Flow< Unit >","title":"Index"},{"location":"api/flowbinding-activity/reactivecircus.flowbinding.activity/androidx.activity.-on-back-pressed-dispatcher/#extensions-for-androidxactivityonbackpresseddispatcher","text":"Name Summary backPresses Create a Flow of on back pressed events on the OnBackPressedDispatcher instance. fun OnBackPressedDispatcher.backPresses(owner: LifecycleOwner): Flow< Unit >","title":"Extensions for androidx.activity.OnBackPressedDispatcher"},{"location":"api/flowbinding-activity/reactivecircus.flowbinding.activity/androidx.activity.-on-back-pressed-dispatcher/back-presses/","text":"flowbinding-activity / reactivecircus.flowbinding.activity / androidx.activity.OnBackPressedDispatcher / backPresses backPresses \u00b6 @CheckResult fun OnBackPressedDispatcher.backPresses(owner: LifecycleOwner): Flow< Unit > Create a Flow of on back pressed events on the OnBackPressedDispatcher instance. Parameters \u00b6 owner - the LifecycleOwner which controls when the callback should be invoked. Note: Created flow keeps a strong reference to the OnBackPressedDispatcher instance until the coroutine that launched the flow collector is cancelled. Example of usage: onBackPressedDispatcher.backPresses(lifecycleOwner) .onEach { // handle back pressed } .launchIn(uiScope)","title":"Back presses"},{"location":"api/flowbinding-activity/reactivecircus.flowbinding.activity/androidx.activity.-on-back-pressed-dispatcher/back-presses/#backpresses","text":"@CheckResult fun OnBackPressedDispatcher.backPresses(owner: LifecycleOwner): Flow< Unit > Create a Flow of on back pressed events on the OnBackPressedDispatcher instance.","title":"backPresses"},{"location":"api/flowbinding-activity/reactivecircus.flowbinding.activity/androidx.activity.-on-back-pressed-dispatcher/back-presses/#parameters","text":"owner - the LifecycleOwner which controls when the callback should be invoked. Note: Created flow keeps a strong reference to the OnBackPressedDispatcher instance until the coroutine that launched the flow collector is cancelled. Example of usage: onBackPressedDispatcher.backPresses(lifecycleOwner) .onEach { // handle back pressed } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/","text":"flowbinding-android Packages \u00b6 Name Summary reactivecircus.flowbinding.android.view reactivecircus.flowbinding.android.widget Index \u00b6 All Types","title":"flowbinding-android"},{"location":"api/flowbinding-android/#packages","text":"Name Summary reactivecircus.flowbinding.android.view reactivecircus.flowbinding.android.widget","title":"Packages"},{"location":"api/flowbinding-android/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-android/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.android.widget) android.widget.AbsListView \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.Adapter \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.AdapterView \u00b6 | reactivecircus.flowbinding.android.widget.AdapterViewItemClickEvent \u00b6 | reactivecircus.flowbinding.android.widget.AdapterViewItemLongClickEvent \u00b6 | reactivecircus.flowbinding.android.widget.AdapterViewSelectionEvent \u00b6 | reactivecircus.flowbinding.android.widget.AfterTextChangeEvent \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.AutoCompleteTextView \u00b6 | reactivecircus.flowbinding.android.widget.BeforeTextChangeEvent \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.CompoundButton \u00b6 | reactivecircus.flowbinding.android.widget.EditorActionEvent \u00b6 | reactivecircus.flowbinding.android.view.HierarchyChangeEvent \u00b6 | reactivecircus.flowbinding.android.view.LayoutChangeEvent \u00b6 | (extensions in package reactivecircus.flowbinding.android.view) android.view.MenuItem \u00b6 | reactivecircus.flowbinding.android.view.MenuItemActionViewEvent \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.PopupMenu \u00b6 | reactivecircus.flowbinding.android.widget.QueryTextEvent \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.RadioGroup \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.RatingBar \u00b6 | reactivecircus.flowbinding.android.widget.RatingChangeEvent \u00b6 | reactivecircus.flowbinding.android.view.ScrollChangeEvent \u00b6 | reactivecircus.flowbinding.android.widget.ScrollEvent \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.SearchView \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.SeekBar \u00b6 | reactivecircus.flowbinding.android.widget.SeekBarChangeEvent \u00b6 | reactivecircus.flowbinding.android.widget.TextChangeEvent \u00b6 | (extensions in package reactivecircus.flowbinding.android.widget) android.widget.TextView \u00b6 | (extensions in package reactivecircus.flowbinding.android.view) android.view.View \u00b6 | reactivecircus.flowbinding.android.view.ViewAttachEvent \u00b6 | (extensions in package reactivecircus.flowbinding.android.view) android.view.ViewGroup \u00b6","title":"Index"},{"location":"api/flowbinding-android/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.android.widget)","title":"All Types"},{"location":"api/flowbinding-android/alltypes/#androidwidgetabslistview","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"android.widget.AbsListView"},{"location":"api/flowbinding-android/alltypes/#androidwidgetadapter","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"android.widget.Adapter"},{"location":"api/flowbinding-android/alltypes/#androidwidgetadapterview","text":"|","title":"android.widget.AdapterView"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgetadapterviewitemclickevent","text":"|","title":"reactivecircus.flowbinding.android.widget.AdapterViewItemClickEvent"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgetadapterviewitemlongclickevent","text":"|","title":"reactivecircus.flowbinding.android.widget.AdapterViewItemLongClickEvent"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgetadapterviewselectionevent","text":"|","title":"reactivecircus.flowbinding.android.widget.AdapterViewSelectionEvent"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgetaftertextchangeevent","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"reactivecircus.flowbinding.android.widget.AfterTextChangeEvent"},{"location":"api/flowbinding-android/alltypes/#androidwidgetautocompletetextview","text":"|","title":"android.widget.AutoCompleteTextView"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgetbeforetextchangeevent","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"reactivecircus.flowbinding.android.widget.BeforeTextChangeEvent"},{"location":"api/flowbinding-android/alltypes/#androidwidgetcompoundbutton","text":"|","title":"android.widget.CompoundButton"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgeteditoractionevent","text":"|","title":"reactivecircus.flowbinding.android.widget.EditorActionEvent"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidviewhierarchychangeevent","text":"|","title":"reactivecircus.flowbinding.android.view.HierarchyChangeEvent"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidviewlayoutchangeevent","text":"| (extensions in package reactivecircus.flowbinding.android.view)","title":"reactivecircus.flowbinding.android.view.LayoutChangeEvent"},{"location":"api/flowbinding-android/alltypes/#androidviewmenuitem","text":"|","title":"android.view.MenuItem"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidviewmenuitemactionviewevent","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"reactivecircus.flowbinding.android.view.MenuItemActionViewEvent"},{"location":"api/flowbinding-android/alltypes/#androidwidgetpopupmenu","text":"|","title":"android.widget.PopupMenu"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgetquerytextevent","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"reactivecircus.flowbinding.android.widget.QueryTextEvent"},{"location":"api/flowbinding-android/alltypes/#androidwidgetradiogroup","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"android.widget.RadioGroup"},{"location":"api/flowbinding-android/alltypes/#androidwidgetratingbar","text":"|","title":"android.widget.RatingBar"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgetratingchangeevent","text":"|","title":"reactivecircus.flowbinding.android.widget.RatingChangeEvent"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidviewscrollchangeevent","text":"|","title":"reactivecircus.flowbinding.android.view.ScrollChangeEvent"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgetscrollevent","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"reactivecircus.flowbinding.android.widget.ScrollEvent"},{"location":"api/flowbinding-android/alltypes/#androidwidgetsearchview","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"android.widget.SearchView"},{"location":"api/flowbinding-android/alltypes/#androidwidgetseekbar","text":"|","title":"android.widget.SeekBar"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgetseekbarchangeevent","text":"|","title":"reactivecircus.flowbinding.android.widget.SeekBarChangeEvent"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidwidgettextchangeevent","text":"| (extensions in package reactivecircus.flowbinding.android.widget)","title":"reactivecircus.flowbinding.android.widget.TextChangeEvent"},{"location":"api/flowbinding-android/alltypes/#androidwidgettextview","text":"| (extensions in package reactivecircus.flowbinding.android.view)","title":"android.widget.TextView"},{"location":"api/flowbinding-android/alltypes/#androidviewview","text":"|","title":"android.view.View"},{"location":"api/flowbinding-android/alltypes/#reactivecircusflowbindingandroidviewviewattachevent","text":"| (extensions in package reactivecircus.flowbinding.android.view)","title":"reactivecircus.flowbinding.android.view.ViewAttachEvent"},{"location":"api/flowbinding-android/alltypes/#androidviewviewgroup","text":"","title":"android.view.ViewGroup"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/","text":"flowbinding-android / reactivecircus.flowbinding.android.view Package reactivecircus.flowbinding.android.view \u00b6 Types \u00b6 Name Summary HierarchyChangeEvent sealed class HierarchyChangeEvent LayoutChangeEvent class LayoutChangeEvent MenuItemActionViewEvent sealed class MenuItemActionViewEvent ScrollChangeEvent class ScrollChangeEvent ViewAttachEvent sealed class ViewAttachEvent Extensions for External Classes \u00b6 Name Summary android.view.MenuItem android.view.View android.view.ViewGroup","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/#package-reactivecircusflowbindingandroidview","text":"","title":"Package reactivecircus.flowbinding.android.view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/#types","text":"Name Summary HierarchyChangeEvent sealed class HierarchyChangeEvent LayoutChangeEvent class LayoutChangeEvent MenuItemActionViewEvent sealed class MenuItemActionViewEvent ScrollChangeEvent class ScrollChangeEvent ViewAttachEvent sealed class ViewAttachEvent","title":"Types"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/#extensions-for-external-classes","text":"Name Summary android.view.MenuItem android.view.View android.view.ViewGroup","title":"Extensions for External Classes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent HierarchyChangeEvent \u00b6 sealed class HierarchyChangeEvent Types \u00b6 Name Summary ChildAdded class ChildAdded : HierarchyChangeEvent ChildRemoved class ChildRemoved : HierarchyChangeEvent Properties \u00b6 Name Summary child abstract val child: View parent abstract val parent: ViewGroup","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/#hierarchychangeevent","text":"sealed class HierarchyChangeEvent","title":"HierarchyChangeEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/#types","text":"Name Summary ChildAdded class ChildAdded : HierarchyChangeEvent ChildRemoved class ChildRemoved : HierarchyChangeEvent","title":"Types"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/#properties","text":"Name Summary child abstract val child: View parent abstract val parent: ViewGroup","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/child/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / child child \u00b6 abstract val child: View","title":"Child"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/child/#child","text":"abstract val child: View","title":"child"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/parent/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / parent parent \u00b6 abstract val parent: ViewGroup","title":"Parent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/parent/#parent","text":"abstract val parent: ViewGroup","title":"parent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / ChildAdded ChildAdded \u00b6 class ChildAdded : HierarchyChangeEvent Constructors \u00b6 Name Summary <init> ChildAdded(parent: ViewGroup , child: View ) Properties \u00b6 Name Summary child val child: View parent val parent: ViewGroup","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/#childadded","text":"class ChildAdded : HierarchyChangeEvent","title":"ChildAdded"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/#constructors","text":"Name Summary <init> ChildAdded(parent: ViewGroup , child: View )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/#properties","text":"Name Summary child val child: View parent val parent: ViewGroup","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / ChildAdded / <init> <init> \u00b6 ChildAdded(parent: ViewGroup , child: View )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/-init-/#init","text":"ChildAdded(parent: ViewGroup , child: View )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/child/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / ChildAdded / child child \u00b6 val child: View","title":"Child"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/child/#child","text":"val child: View","title":"child"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/parent/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / ChildAdded / parent parent \u00b6 val parent: ViewGroup","title":"Parent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-added/parent/#parent","text":"val parent: ViewGroup","title":"parent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / ChildRemoved ChildRemoved \u00b6 class ChildRemoved : HierarchyChangeEvent Constructors \u00b6 Name Summary <init> ChildRemoved(parent: ViewGroup , child: View ) Properties \u00b6 Name Summary child val child: View parent val parent: ViewGroup","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/#childremoved","text":"class ChildRemoved : HierarchyChangeEvent","title":"ChildRemoved"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/#constructors","text":"Name Summary <init> ChildRemoved(parent: ViewGroup , child: View )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/#properties","text":"Name Summary child val child: View parent val parent: ViewGroup","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / ChildRemoved / <init> <init> \u00b6 ChildRemoved(parent: ViewGroup , child: View )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/-init-/#init","text":"ChildRemoved(parent: ViewGroup , child: View )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/child/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / ChildRemoved / child child \u00b6 val child: View","title":"Child"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/child/#child","text":"val child: View","title":"child"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/parent/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / HierarchyChangeEvent / ChildRemoved / parent parent \u00b6 val parent: ViewGroup","title":"Parent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-hierarchy-change-event/-child-removed/parent/#parent","text":"val parent: ViewGroup","title":"parent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent LayoutChangeEvent \u00b6 class LayoutChangeEvent Constructors \u00b6 Name Summary <init> LayoutChangeEvent(view: View , left: Int , top: Int , right: Int , bottom: Int , oldLeft: Int , oldTop: Int , oldRight: Int , oldBottom: Int ) Properties \u00b6 Name Summary bottom val bottom: Int left val left: Int oldBottom val oldBottom: Int oldLeft val oldLeft: Int oldRight val oldRight: Int oldTop val oldTop: Int right val right: Int top val top: Int view val view: View","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/#layoutchangeevent","text":"class LayoutChangeEvent","title":"LayoutChangeEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/#constructors","text":"Name Summary <init> LayoutChangeEvent(view: View , left: Int , top: Int , right: Int , bottom: Int , oldLeft: Int , oldTop: Int , oldRight: Int , oldBottom: Int )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/#properties","text":"Name Summary bottom val bottom: Int left val left: Int oldBottom val oldBottom: Int oldLeft val oldLeft: Int oldRight val oldRight: Int oldTop val oldTop: Int right val right: Int top val top: Int view val view: View","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / <init> <init> \u00b6 LayoutChangeEvent(view: View , left: Int , top: Int , right: Int , bottom: Int , oldLeft: Int , oldTop: Int , oldRight: Int , oldBottom: Int )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/-init-/#init","text":"LayoutChangeEvent(view: View , left: Int , top: Int , right: Int , bottom: Int , oldLeft: Int , oldTop: Int , oldRight: Int , oldBottom: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/bottom/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / bottom bottom \u00b6 val bottom: Int","title":"Bottom"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/bottom/#bottom","text":"val bottom: Int","title":"bottom"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/left/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / left left \u00b6 val left: Int","title":"Left"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/left/#left","text":"val left: Int","title":"left"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/old-bottom/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / oldBottom oldBottom \u00b6 val oldBottom: Int","title":"Old bottom"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/old-bottom/#oldbottom","text":"val oldBottom: Int","title":"oldBottom"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/old-left/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / oldLeft oldLeft \u00b6 val oldLeft: Int","title":"Old left"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/old-left/#oldleft","text":"val oldLeft: Int","title":"oldLeft"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/old-right/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / oldRight oldRight \u00b6 val oldRight: Int","title":"Old right"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/old-right/#oldright","text":"val oldRight: Int","title":"oldRight"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/old-top/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / oldTop oldTop \u00b6 val oldTop: Int","title":"Old top"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/old-top/#oldtop","text":"val oldTop: Int","title":"oldTop"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/right/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / right right \u00b6 val right: Int","title":"Right"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/right/#right","text":"val right: Int","title":"right"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/top/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / top top \u00b6 val top: Int","title":"Top"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/top/#top","text":"val top: Int","title":"top"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / LayoutChangeEvent / view view \u00b6 val view: View","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-layout-change-event/view/#view","text":"val view: View","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / MenuItemActionViewEvent MenuItemActionViewEvent \u00b6 sealed class MenuItemActionViewEvent Types \u00b6 Name Summary Collapse class Collapse : MenuItemActionViewEvent Expand class Expand : MenuItemActionViewEvent Properties \u00b6 Name Summary menuItem abstract val menuItem: MenuItem","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/#menuitemactionviewevent","text":"sealed class MenuItemActionViewEvent","title":"MenuItemActionViewEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/#types","text":"Name Summary Collapse class Collapse : MenuItemActionViewEvent Expand class Expand : MenuItemActionViewEvent","title":"Types"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/#properties","text":"Name Summary menuItem abstract val menuItem: MenuItem","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/menu-item/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / MenuItemActionViewEvent / menuItem menuItem \u00b6 abstract val menuItem: MenuItem","title":"Menu item"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/menu-item/#menuitem","text":"abstract val menuItem: MenuItem","title":"menuItem"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-collapse/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / MenuItemActionViewEvent / Collapse Collapse \u00b6 class Collapse : MenuItemActionViewEvent Constructors \u00b6 Name Summary <init> Collapse(menuItem: MenuItem ) Properties \u00b6 Name Summary menuItem val menuItem: MenuItem","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-collapse/#collapse","text":"class Collapse : MenuItemActionViewEvent","title":"Collapse"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-collapse/#constructors","text":"Name Summary <init> Collapse(menuItem: MenuItem )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-collapse/#properties","text":"Name Summary menuItem val menuItem: MenuItem","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-collapse/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / MenuItemActionViewEvent / Collapse / <init> <init> \u00b6 Collapse(menuItem: MenuItem )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-collapse/-init-/#init","text":"Collapse(menuItem: MenuItem )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-collapse/menu-item/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / MenuItemActionViewEvent / Collapse / menuItem menuItem \u00b6 val menuItem: MenuItem","title":"Menu item"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-collapse/menu-item/#menuitem","text":"val menuItem: MenuItem","title":"menuItem"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-expand/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / MenuItemActionViewEvent / Expand Expand \u00b6 class Expand : MenuItemActionViewEvent Constructors \u00b6 Name Summary <init> Expand(menuItem: MenuItem ) Properties \u00b6 Name Summary menuItem val menuItem: MenuItem","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-expand/#expand","text":"class Expand : MenuItemActionViewEvent","title":"Expand"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-expand/#constructors","text":"Name Summary <init> Expand(menuItem: MenuItem )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-expand/#properties","text":"Name Summary menuItem val menuItem: MenuItem","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-expand/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / MenuItemActionViewEvent / Expand / <init> <init> \u00b6 Expand(menuItem: MenuItem )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-expand/-init-/#init","text":"Expand(menuItem: MenuItem )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-expand/menu-item/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / MenuItemActionViewEvent / Expand / menuItem menuItem \u00b6 val menuItem: MenuItem","title":"Menu item"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-menu-item-action-view-event/-expand/menu-item/#menuitem","text":"val menuItem: MenuItem","title":"menuItem"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ScrollChangeEvent ScrollChangeEvent \u00b6 class ScrollChangeEvent Constructors \u00b6 Name Summary <init> ScrollChangeEvent(view: View , scrollX: Int , scrollY: Int , oldScrollX: Int , oldScrollY: Int ) Properties \u00b6 Name Summary oldScrollX val oldScrollX: Int oldScrollY val oldScrollY: Int scrollX val scrollX: Int scrollY val scrollY: Int view val view: View","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/#scrollchangeevent","text":"class ScrollChangeEvent","title":"ScrollChangeEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/#constructors","text":"Name Summary <init> ScrollChangeEvent(view: View , scrollX: Int , scrollY: Int , oldScrollX: Int , oldScrollY: Int )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/#properties","text":"Name Summary oldScrollX val oldScrollX: Int oldScrollY val oldScrollY: Int scrollX val scrollX: Int scrollY val scrollY: Int view val view: View","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ScrollChangeEvent / <init> <init> \u00b6 ScrollChangeEvent(view: View , scrollX: Int , scrollY: Int , oldScrollX: Int , oldScrollY: Int )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/-init-/#init","text":"ScrollChangeEvent(view: View , scrollX: Int , scrollY: Int , oldScrollX: Int , oldScrollY: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/old-scroll-x/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ScrollChangeEvent / oldScrollX oldScrollX \u00b6 val oldScrollX: Int","title":"Old scroll x"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/old-scroll-x/#oldscrollx","text":"val oldScrollX: Int","title":"oldScrollX"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/old-scroll-y/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ScrollChangeEvent / oldScrollY oldScrollY \u00b6 val oldScrollY: Int","title":"Old scroll y"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/old-scroll-y/#oldscrolly","text":"val oldScrollY: Int","title":"oldScrollY"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/scroll-x/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ScrollChangeEvent / scrollX scrollX \u00b6 val scrollX: Int","title":"Scroll x"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/scroll-x/#scrollx","text":"val scrollX: Int","title":"scrollX"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/scroll-y/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ScrollChangeEvent / scrollY scrollY \u00b6 val scrollY: Int","title":"Scroll y"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/scroll-y/#scrolly","text":"val scrollY: Int","title":"scrollY"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ScrollChangeEvent / view view \u00b6 val view: View","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-scroll-change-event/view/#view","text":"val view: View","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ViewAttachEvent ViewAttachEvent \u00b6 sealed class ViewAttachEvent Types \u00b6 Name Summary Attached class Attached : ViewAttachEvent Detached class Detached : ViewAttachEvent Properties \u00b6 Name Summary view abstract val view: View","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/#viewattachevent","text":"sealed class ViewAttachEvent","title":"ViewAttachEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/#types","text":"Name Summary Attached class Attached : ViewAttachEvent Detached class Detached : ViewAttachEvent","title":"Types"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/#properties","text":"Name Summary view abstract val view: View","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ViewAttachEvent / view view \u00b6 abstract val view: View","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/view/#view","text":"abstract val view: View","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-attached/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ViewAttachEvent / Attached Attached \u00b6 class Attached : ViewAttachEvent Constructors \u00b6 Name Summary <init> Attached(view: View ) Properties \u00b6 Name Summary view val view: View","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-attached/#attached","text":"class Attached : ViewAttachEvent","title":"Attached"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-attached/#constructors","text":"Name Summary <init> Attached(view: View )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-attached/#properties","text":"Name Summary view val view: View","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-attached/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ViewAttachEvent / Attached / <init> <init> \u00b6 Attached(view: View )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-attached/-init-/#init","text":"Attached(view: View )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-attached/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ViewAttachEvent / Attached / view view \u00b6 val view: View","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-attached/view/#view","text":"val view: View","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-detached/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ViewAttachEvent / Detached Detached \u00b6 class Detached : ViewAttachEvent Constructors \u00b6 Name Summary <init> Detached(view: View ) Properties \u00b6 Name Summary view val view: View","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-detached/#detached","text":"class Detached : ViewAttachEvent","title":"Detached"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-detached/#constructors","text":"Name Summary <init> Detached(view: View )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-detached/#properties","text":"Name Summary view val view: View","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-detached/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ViewAttachEvent / Detached / <init> <init> \u00b6 Detached(view: View )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-detached/-init-/#init","text":"Detached(view: View )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-detached/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / ViewAttachEvent / Detached / view view \u00b6 val view: View","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/-view-attach-event/-detached/view/#view","text":"val view: View","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-menu-item/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.MenuItem Extensions for android.view.MenuItem \u00b6 Name Summary actionViewEvents Create a Flow of action view events on the MenuItem instance where the value emitted is one of the 2 event types: MenuItemActionViewEvent.Collapse , MenuItemActionViewEvent.Expand fun MenuItem .actionViewEvents(handled: ( MenuItemActionViewEvent ) -> Boolean = { true }): Flow< MenuItemActionViewEvent > clicks Create a Flow of click events on the MenuItem instance. fun MenuItem .clicks(handled: ( MenuItem ) -> Boolean = { true }): Flow< Unit >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-menu-item/#extensions-for-androidviewmenuitem","text":"Name Summary actionViewEvents Create a Flow of action view events on the MenuItem instance where the value emitted is one of the 2 event types: MenuItemActionViewEvent.Collapse , MenuItemActionViewEvent.Expand fun MenuItem .actionViewEvents(handled: ( MenuItemActionViewEvent ) -> Boolean = { true }): Flow< MenuItemActionViewEvent > clicks Create a Flow of click events on the MenuItem instance. fun MenuItem .clicks(handled: ( MenuItem ) -> Boolean = { true }): Flow< Unit >","title":"Extensions for android.view.MenuItem"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-menu-item/action-view-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.MenuItem / actionViewEvents actionViewEvents \u00b6 @CheckResult fun MenuItem .actionViewEvents(handled: ( MenuItemActionViewEvent ) -> Boolean = { true }): Flow< MenuItemActionViewEvent > Create a Flow of action view events on the MenuItem instance where the value emitted is one of the 2 event types: MenuItemActionViewEvent.Collapse , MenuItemActionViewEvent.Expand Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying MenuItem.OnActionExpandListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the MenuItem instance until the coroutine that launched the flow collector is cancelled. Example of usage: menuItem.actionViewEvents { it.menuItem.isChecked } .onEach { event -> when(event) { is MenuItemActionViewEvent.Collapse -> { // handle collapse event } is MenuItemActionViewEvent.Expand -> { // handle expand event } } } .launchIn(uiScope)","title":"Action view events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-menu-item/action-view-events/#actionviewevents","text":"@CheckResult fun MenuItem .actionViewEvents(handled: ( MenuItemActionViewEvent ) -> Boolean = { true }): Flow< MenuItemActionViewEvent > Create a Flow of action view events on the MenuItem instance where the value emitted is one of the 2 event types: MenuItemActionViewEvent.Collapse , MenuItemActionViewEvent.Expand","title":"actionViewEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-menu-item/action-view-events/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying MenuItem.OnActionExpandListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the MenuItem instance until the coroutine that launched the flow collector is cancelled. Example of usage: menuItem.actionViewEvents { it.menuItem.isChecked } .onEach { event -> when(event) { is MenuItemActionViewEvent.Collapse -> { // handle collapse event } is MenuItemActionViewEvent.Expand -> { // handle expand event } } } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-menu-item/clicks/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.MenuItem / clicks clicks \u00b6 @CheckResult fun MenuItem .clicks(handled: ( MenuItem ) -> Boolean = { true }): Flow< Unit > Create a Flow of click events on the MenuItem instance. Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying MenuItem.OnMenuItemClickListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the MenuItem instance until the coroutine that launched the flow collector is cancelled. Example of usage: menuItem.clicks { it.isChecked } .onEach { // handle menu item clicked } .launchIn(uiScope)","title":"Clicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-menu-item/clicks/#clicks","text":"@CheckResult fun MenuItem .clicks(handled: ( MenuItem ) -> Boolean = { true }): Flow< Unit > Create a Flow of click events on the MenuItem instance.","title":"clicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-menu-item/clicks/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying MenuItem.OnMenuItemClickListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the MenuItem instance until the coroutine that launched the flow collector is cancelled. Example of usage: menuItem.clicks { it.isChecked } .onEach { // handle menu item clicked } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View Extensions for android.view.View \u00b6 Name Summary attachEvents Create a Flow of view attach events on the View instance where the value emitted is one of the 2 event types: ViewAttachEvent.Attached , ViewAttachEvent.Detached fun View .attachEvents(): Flow< ViewAttachEvent > clicks Create a Flow of click events on the View instance. fun View .clicks(): Flow< Unit > drags Create a Flow of drag events on the View instance. fun View .drags(handled: ( DragEvent ) -> Boolean = { true }): Flow< DragEvent > draws Create a Flow of draw events on the View instance. fun View .draws(): Flow< Unit > focusChanges Create a InitialValueFlow of focus changed events on the View instance, where the value emitted indicates whether the View has focus. fun View .focusChanges(): InitialValueFlow< Boolean > globalLayouts Create a Flow of global layout events on the View instance. fun View .globalLayouts(): Flow< Unit > hovers Create a Flow of hover events on the View instance. fun View .hovers(handled: ( MotionEvent ) -> Boolean = { true }): Flow< MotionEvent > keys Create a Flow of key events on the View instance. fun View .keys(handled: ( KeyEvent ) -> Boolean = { true }): Flow< KeyEvent > layoutChangeEvents Create a Flow of view layout change events on the View instance. fun View .layoutChangeEvents(): Flow< LayoutChangeEvent > layoutChanges Create a Flow which emits on view layout changes. fun View .layoutChanges(): Flow< Unit > longClicks Create a Flow of long click events on the View instance. fun View .longClicks(): Flow< Unit > preDraws Create a Flow of pre-draw events on the View instance. fun View .preDraws(proceedDrawingPass: () -> Boolean ): Flow< Unit > scrollChangeEvents Create a Flow of scroll change events on the View instance. fun View .scrollChangeEvents(): Flow< ScrollChangeEvent > systemUiVisibilityChanges Create a Flow of system UI visibility change events on the View instance where the value emitted is one of the following: View.SYSTEM_UI_FLAG_LOW_PROFILE , View.SYSTEM_UI_FLAG_HIDE_NAVIGATION , View.SYSTEM_UI_FLAG_FULLSCREEN fun View .systemUiVisibilityChanges(): Flow< Int > touches Create a Flow of touch events on the View instance. fun View .touches(handled: ( MotionEvent ) -> Boolean = { true }): Flow< MotionEvent >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/#extensions-for-androidviewview","text":"Name Summary attachEvents Create a Flow of view attach events on the View instance where the value emitted is one of the 2 event types: ViewAttachEvent.Attached , ViewAttachEvent.Detached fun View .attachEvents(): Flow< ViewAttachEvent > clicks Create a Flow of click events on the View instance. fun View .clicks(): Flow< Unit > drags Create a Flow of drag events on the View instance. fun View .drags(handled: ( DragEvent ) -> Boolean = { true }): Flow< DragEvent > draws Create a Flow of draw events on the View instance. fun View .draws(): Flow< Unit > focusChanges Create a InitialValueFlow of focus changed events on the View instance, where the value emitted indicates whether the View has focus. fun View .focusChanges(): InitialValueFlow< Boolean > globalLayouts Create a Flow of global layout events on the View instance. fun View .globalLayouts(): Flow< Unit > hovers Create a Flow of hover events on the View instance. fun View .hovers(handled: ( MotionEvent ) -> Boolean = { true }): Flow< MotionEvent > keys Create a Flow of key events on the View instance. fun View .keys(handled: ( KeyEvent ) -> Boolean = { true }): Flow< KeyEvent > layoutChangeEvents Create a Flow of view layout change events on the View instance. fun View .layoutChangeEvents(): Flow< LayoutChangeEvent > layoutChanges Create a Flow which emits on view layout changes. fun View .layoutChanges(): Flow< Unit > longClicks Create a Flow of long click events on the View instance. fun View .longClicks(): Flow< Unit > preDraws Create a Flow of pre-draw events on the View instance. fun View .preDraws(proceedDrawingPass: () -> Boolean ): Flow< Unit > scrollChangeEvents Create a Flow of scroll change events on the View instance. fun View .scrollChangeEvents(): Flow< ScrollChangeEvent > systemUiVisibilityChanges Create a Flow of system UI visibility change events on the View instance where the value emitted is one of the following: View.SYSTEM_UI_FLAG_LOW_PROFILE , View.SYSTEM_UI_FLAG_HIDE_NAVIGATION , View.SYSTEM_UI_FLAG_FULLSCREEN fun View .systemUiVisibilityChanges(): Flow< Int > touches Create a Flow of touch events on the View instance. fun View .touches(handled: ( MotionEvent ) -> Boolean = { true }): Flow< MotionEvent >","title":"Extensions for android.view.View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/attach-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / attachEvents attachEvents \u00b6 @CheckResult fun View .attachEvents(): Flow< ViewAttachEvent > Create a Flow of view attach events on the View instance where the value emitted is one of the 2 event types: ViewAttachEvent.Attached , ViewAttachEvent.Detached Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: childView.attachEvents() .onEach { event -> when(event) { is ViewAttachEvent.Attached -> { // handle attached event } is ViewAttachEvent.Detached -> { // handle detached event } } } .launchIn(uiScope)","title":"Attach events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/attach-events/#attachevents","text":"@CheckResult fun View .attachEvents(): Flow< ViewAttachEvent > Create a Flow of view attach events on the View instance where the value emitted is one of the 2 event types: ViewAttachEvent.Attached , ViewAttachEvent.Detached Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: childView.attachEvents() .onEach { event -> when(event) { is ViewAttachEvent.Attached -> { // handle attached event } is ViewAttachEvent.Detached -> { // handle detached event } } } .launchIn(uiScope)","title":"attachEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/clicks/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / clicks clicks \u00b6 @CheckResult fun View .clicks(): Flow< Unit > Create a Flow of click events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.clicks() .onEach { // handle view clicked } .launchIn(uiScope)","title":"Clicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/clicks/#clicks","text":"@CheckResult fun View .clicks(): Flow< Unit > Create a Flow of click events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.clicks() .onEach { // handle view clicked } .launchIn(uiScope)","title":"clicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/drags/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / drags drags \u00b6 @CheckResult fun View .drags(handled: ( DragEvent ) -> Boolean = { true }): Flow< DragEvent > Create a Flow of drag events on the View instance. Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying View.OnDragListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.drags { it.action == DragEvent.ACTION_DRAG_ENDED } .onEach { event -> // handle drag event } .launchIn(uiScope)","title":"Drags"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/drags/#drags","text":"@CheckResult fun View .drags(handled: ( DragEvent ) -> Boolean = { true }): Flow< DragEvent > Create a Flow of drag events on the View instance.","title":"drags"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/drags/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying View.OnDragListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.drags { it.action == DragEvent.ACTION_DRAG_ENDED } .onEach { event -> // handle drag event } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/draws/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / draws draws \u00b6 @CheckResult fun View .draws(): Flow< Unit > Create a Flow of draw events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.draws() .onEach { // handle draw } .launchIn(uiScope)","title":"Draws"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/draws/#draws","text":"@CheckResult fun View .draws(): Flow< Unit > Create a Flow of draw events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.draws() .onEach { // handle draw } .launchIn(uiScope)","title":"draws"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/focus-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / focusChanges focusChanges \u00b6 @CheckResult fun View .focusChanges(): InitialValueFlow< Boolean > Create a InitialValueFlow of focus changed events on the View instance, where the value emitted indicates whether the View has focus. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.focusChanges() .onEach { // handle view focus changed } .launchIn(uiScope)","title":"Focus changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/focus-changes/#focuschanges","text":"@CheckResult fun View .focusChanges(): InitialValueFlow< Boolean > Create a InitialValueFlow of focus changed events on the View instance, where the value emitted indicates whether the View has focus. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.focusChanges() .onEach { // handle view focus changed } .launchIn(uiScope)","title":"focusChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/global-layouts/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / globalLayouts globalLayouts \u00b6 @CheckResult fun View .globalLayouts(): Flow< Unit > Create a Flow of global layout events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.globalLayouts() .onEach { // handle global layout } .launchIn(uiScope)","title":"Global layouts"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/global-layouts/#globallayouts","text":"@CheckResult fun View .globalLayouts(): Flow< Unit > Create a Flow of global layout events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.globalLayouts() .onEach { // handle global layout } .launchIn(uiScope)","title":"globalLayouts"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/hovers/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / hovers hovers \u00b6 @CheckResult fun View .hovers(handled: ( MotionEvent ) -> Boolean = { true }): Flow< MotionEvent > Create a Flow of hover events on the View instance. Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying View.OnHoverListener . Note that the Flow will only emit when this function evaluates to true. Note: Values emitted by this flow are mutable and part of a shared object pool and thus are not safe to cache or delay reading (such as by observing on a different thread). If you want to cache or delay reading the items emitted then you must map values through a function which calls MotionEvent.obtain or MotionEvent.obtainNoHistory to create a copy. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.hovers { event.action == MotionEvent.ACTION_HOVER_ENTER } .onEach { event -> // handle hover event } .launchIn(uiScope)","title":"Hovers"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/hovers/#hovers","text":"@CheckResult fun View .hovers(handled: ( MotionEvent ) -> Boolean = { true }): Flow< MotionEvent > Create a Flow of hover events on the View instance.","title":"hovers"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/hovers/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying View.OnHoverListener . Note that the Flow will only emit when this function evaluates to true. Note: Values emitted by this flow are mutable and part of a shared object pool and thus are not safe to cache or delay reading (such as by observing on a different thread). If you want to cache or delay reading the items emitted then you must map values through a function which calls MotionEvent.obtain or MotionEvent.obtainNoHistory to create a copy. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.hovers { event.action == MotionEvent.ACTION_HOVER_ENTER } .onEach { event -> // handle hover event } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/keys/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / keys keys \u00b6 @CheckResult fun View .keys(handled: ( KeyEvent ) -> Boolean = { true }): Flow< KeyEvent > Create a Flow of key events on the View instance. Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying View.OnKeyListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.keys { event.keyCode == KeyEvent.KEYCODE_ENTER } .onEach { event -> // handle key event } .launchIn(uiScope)","title":"Keys"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/keys/#keys","text":"@CheckResult fun View .keys(handled: ( KeyEvent ) -> Boolean = { true }): Flow< KeyEvent > Create a Flow of key events on the View instance.","title":"keys"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/keys/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying View.OnKeyListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.keys { event.keyCode == KeyEvent.KEYCODE_ENTER } .onEach { event -> // handle key event } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/layout-change-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / layoutChangeEvents layoutChangeEvents \u00b6 @CheckResult fun View .layoutChangeEvents(): Flow< LayoutChangeEvent > Create a Flow of view layout change events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.layoutChangeEvents() .onEach { event -> // handle layout change event } .launchIn(uiScope)","title":"Layout change events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/layout-change-events/#layoutchangeevents","text":"@CheckResult fun View .layoutChangeEvents(): Flow< LayoutChangeEvent > Create a Flow of view layout change events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.layoutChangeEvents() .onEach { event -> // handle layout change event } .launchIn(uiScope)","title":"layoutChangeEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/layout-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / layoutChanges layoutChanges \u00b6 @CheckResult fun View .layoutChanges(): Flow< Unit > Create a Flow which emits on view layout changes. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.layoutChanges() .onEach { // handle layout changed } .launchIn(uiScope)","title":"Layout changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/layout-changes/#layoutchanges","text":"@CheckResult fun View .layoutChanges(): Flow< Unit > Create a Flow which emits on view layout changes. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.layoutChanges() .onEach { // handle layout changed } .launchIn(uiScope)","title":"layoutChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/long-clicks/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / longClicks longClicks \u00b6 @CheckResult fun View .longClicks(): Flow< Unit > Create a Flow of long click events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.longClicks() .onEach { // handle view long clicked } .launchIn(uiScope)","title":"Long clicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/long-clicks/#longclicks","text":"@CheckResult fun View .longClicks(): Flow< Unit > Create a Flow of long click events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.longClicks() .onEach { // handle view long clicked } .launchIn(uiScope)","title":"longClicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/pre-draws/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / preDraws preDraws \u00b6 @CheckResult fun View .preDraws(proceedDrawingPass: () -> Boolean ): Flow< Unit > Create a Flow of pre-draw events on the View instance. Parameters \u00b6 proceedDrawingPass - function to be invoked to determine whether to proceed with the current drawing pass or cancel. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.preDraws { shouldProceedDrawingPass } .onEach { // handle pre-draw } .launchIn(uiScope)","title":"Pre draws"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/pre-draws/#predraws","text":"@CheckResult fun View .preDraws(proceedDrawingPass: () -> Boolean ): Flow< Unit > Create a Flow of pre-draw events on the View instance.","title":"preDraws"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/pre-draws/#parameters","text":"proceedDrawingPass - function to be invoked to determine whether to proceed with the current drawing pass or cancel. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.preDraws { shouldProceedDrawingPass } .onEach { // handle pre-draw } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/scroll-change-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / scrollChangeEvents scrollChangeEvents \u00b6 @CheckResult fun View .scrollChangeEvents(): Flow< ScrollChangeEvent > Create a Flow of scroll change events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.scrollChangeEvents() .onEach { event -> // handle scroll change event } .launchIn(uiScope)","title":"Scroll change events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/scroll-change-events/#scrollchangeevents","text":"@CheckResult fun View .scrollChangeEvents(): Flow< ScrollChangeEvent > Create a Flow of scroll change events on the View instance. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.scrollChangeEvents() .onEach { event -> // handle scroll change event } .launchIn(uiScope)","title":"scrollChangeEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/system-ui-visibility-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / systemUiVisibilityChanges systemUiVisibilityChanges \u00b6 @CheckResult fun View .systemUiVisibilityChanges(): Flow< Int > Create a Flow of system UI visibility change events on the View instance where the value emitted is one of the following: View.SYSTEM_UI_FLAG_LOW_PROFILE , View.SYSTEM_UI_FLAG_HIDE_NAVIGATION , View.SYSTEM_UI_FLAG_FULLSCREEN Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.systemUiVisibilityChanges() .onEach { event -> when(event) { View.SYSTEM_UI_FLAG_LOW_PROFILE -> { // handle system UI low profile event } View.SYSTEM_UI_FLAG_HIDE_NAVIGATION -> { // handle system UI hide navigation event } View.SYSTEM_UI_FLAG_FULLSCREEN -> { // handle system UI fullscreen event } } } .launchIn(uiScope)","title":"System ui visibility changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/system-ui-visibility-changes/#systemuivisibilitychanges","text":"@CheckResult fun View .systemUiVisibilityChanges(): Flow< Int > Create a Flow of system UI visibility change events on the View instance where the value emitted is one of the following: View.SYSTEM_UI_FLAG_LOW_PROFILE , View.SYSTEM_UI_FLAG_HIDE_NAVIGATION , View.SYSTEM_UI_FLAG_FULLSCREEN Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.systemUiVisibilityChanges() .onEach { event -> when(event) { View.SYSTEM_UI_FLAG_LOW_PROFILE -> { // handle system UI low profile event } View.SYSTEM_UI_FLAG_HIDE_NAVIGATION -> { // handle system UI hide navigation event } View.SYSTEM_UI_FLAG_FULLSCREEN -> { // handle system UI fullscreen event } } } .launchIn(uiScope)","title":"systemUiVisibilityChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/touches/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.View / touches touches \u00b6 @CheckResult fun View .touches(handled: ( MotionEvent ) -> Boolean = { true }): Flow< MotionEvent > Create a Flow of touch events on the View instance. Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying View.OnTouchListener . Note that the Flow will only emit when this function evaluates to true. Note: Values emitted by this flow are mutable and part of a shared object pool and thus are not safe to cache or delay reading (such as by observing on a different thread). If you want to cache or delay reading the items emitted then you must map values through a function which calls MotionEvent.obtain or MotionEvent.obtainNoHistory to create a copy. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.touch { event.action == MotionEvent.ACTION_DOWN } .onEach { event -> // handle touch event } .launchIn(uiScope)","title":"Touches"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/touches/#touches","text":"@CheckResult fun View .touches(handled: ( MotionEvent ) -> Boolean = { true }): Flow< MotionEvent > Create a Flow of touch events on the View instance.","title":"touches"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view/touches/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying View.OnTouchListener . Note that the Flow will only emit when this function evaluates to true. Note: Values emitted by this flow are mutable and part of a shared object pool and thus are not safe to cache or delay reading (such as by observing on a different thread). If you want to cache or delay reading the items emitted then you must map values through a function which calls MotionEvent.obtain or MotionEvent.obtainNoHistory to create a copy. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.touch { event.action == MotionEvent.ACTION_DOWN } .onEach { event -> // handle touch event } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view-group/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.ViewGroup Extensions for android.view.ViewGroup \u00b6 Name Summary hierarchyChangeEvents Create a Flow of view group hierarchy change events on the ViewGroup instance where the value emitted is one of the 2 event types: HierarchyChangeEvent.ChildAdded , HierarchyChangeEvent.ChildRemoved fun ViewGroup .hierarchyChangeEvents(): Flow< HierarchyChangeEvent >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view-group/#extensions-for-androidviewviewgroup","text":"Name Summary hierarchyChangeEvents Create a Flow of view group hierarchy change events on the ViewGroup instance where the value emitted is one of the 2 event types: HierarchyChangeEvent.ChildAdded , HierarchyChangeEvent.ChildRemoved fun ViewGroup .hierarchyChangeEvents(): Flow< HierarchyChangeEvent >","title":"Extensions for android.view.ViewGroup"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view-group/hierarchy-change-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.view / android.view.ViewGroup / hierarchyChangeEvents hierarchyChangeEvents \u00b6 @CheckResult fun ViewGroup .hierarchyChangeEvents(): Flow< HierarchyChangeEvent > Create a Flow of view group hierarchy change events on the ViewGroup instance where the value emitted is one of the 2 event types: HierarchyChangeEvent.ChildAdded , HierarchyChangeEvent.ChildRemoved Note: Created flow keeps a strong reference to the ViewGroup instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewGroup.hierarchyChangeEvents() .onEach { event -> when(event) { is HierarchyChangeEvent.ChildAdded -> { // handle child added event } is HierarchyChangeEvent.ChildRemoved -> { // handle child removed event } } } .launchIn(uiScope)","title":"Hierarchy change events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.view/android.view.-view-group/hierarchy-change-events/#hierarchychangeevents","text":"@CheckResult fun ViewGroup .hierarchyChangeEvents(): Flow< HierarchyChangeEvent > Create a Flow of view group hierarchy change events on the ViewGroup instance where the value emitted is one of the 2 event types: HierarchyChangeEvent.ChildAdded , HierarchyChangeEvent.ChildRemoved Note: Created flow keeps a strong reference to the ViewGroup instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewGroup.hierarchyChangeEvents() .onEach { event -> when(event) { is HierarchyChangeEvent.ChildAdded -> { // handle child added event } is HierarchyChangeEvent.ChildRemoved -> { // handle child removed event } } } .launchIn(uiScope)","title":"hierarchyChangeEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget Package reactivecircus.flowbinding.android.widget \u00b6 Types \u00b6 Name Summary AdapterViewItemClickEvent class AdapterViewItemClickEvent AdapterViewItemLongClickEvent class AdapterViewItemLongClickEvent AdapterViewSelectionEvent sealed class AdapterViewSelectionEvent AfterTextChangeEvent class AfterTextChangeEvent BeforeTextChangeEvent class BeforeTextChangeEvent EditorActionEvent class EditorActionEvent QueryTextEvent sealed class QueryTextEvent RatingChangeEvent class RatingChangeEvent ScrollEvent class ScrollEvent SeekBarChangeEvent sealed class SeekBarChangeEvent TextChangeEvent class TextChangeEvent Extensions for External Classes \u00b6 Name Summary android.widget.AbsListView android.widget.Adapter android.widget.AdapterView android.widget.AutoCompleteTextView android.widget.CompoundButton android.widget.PopupMenu android.widget.RadioGroup android.widget.RatingBar android.widget.SearchView android.widget.SeekBar android.widget.TextView","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/#package-reactivecircusflowbindingandroidwidget","text":"","title":"Package reactivecircus.flowbinding.android.widget"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/#types","text":"Name Summary AdapterViewItemClickEvent class AdapterViewItemClickEvent AdapterViewItemLongClickEvent class AdapterViewItemLongClickEvent AdapterViewSelectionEvent sealed class AdapterViewSelectionEvent AfterTextChangeEvent class AfterTextChangeEvent BeforeTextChangeEvent class BeforeTextChangeEvent EditorActionEvent class EditorActionEvent QueryTextEvent sealed class QueryTextEvent RatingChangeEvent class RatingChangeEvent ScrollEvent class ScrollEvent SeekBarChangeEvent sealed class SeekBarChangeEvent TextChangeEvent class TextChangeEvent","title":"Types"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/#extensions-for-external-classes","text":"Name Summary android.widget.AbsListView android.widget.Adapter android.widget.AdapterView android.widget.AutoCompleteTextView android.widget.CompoundButton android.widget.PopupMenu android.widget.RadioGroup android.widget.RatingBar android.widget.SearchView android.widget.SeekBar android.widget.TextView","title":"Extensions for External Classes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemClickEvent AdapterViewItemClickEvent \u00b6 class AdapterViewItemClickEvent Constructors \u00b6 Name Summary <init> AdapterViewItemClickEvent(view: AdapterView <*>, clickedView: View ?, position: Int , id: Long ) Properties \u00b6 Name Summary clickedView val clickedView: View ? id val id: Long position val position: Int view val view: AdapterView <*>","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/#adapterviewitemclickevent","text":"class AdapterViewItemClickEvent","title":"AdapterViewItemClickEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/#constructors","text":"Name Summary <init> AdapterViewItemClickEvent(view: AdapterView <*>, clickedView: View ?, position: Int , id: Long )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/#properties","text":"Name Summary clickedView val clickedView: View ? id val id: Long position val position: Int view val view: AdapterView <*>","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemClickEvent / <init> <init> \u00b6 AdapterViewItemClickEvent(view: AdapterView <*>, clickedView: View ?, position: Int , id: Long )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/-init-/#init","text":"AdapterViewItemClickEvent(view: AdapterView <*>, clickedView: View ?, position: Int , id: Long )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/clicked-view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemClickEvent / clickedView clickedView \u00b6 val clickedView: View ?","title":"Clicked view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/clicked-view/#clickedview","text":"val clickedView: View ?","title":"clickedView"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/id/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemClickEvent / id id \u00b6 val id: Long","title":"Id"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/id/#id","text":"val id: Long","title":"id"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/position/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemClickEvent / position position \u00b6 val position: Int","title":"Position"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/position/#position","text":"val position: Int","title":"position"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemClickEvent / view view \u00b6 val view: AdapterView <*>","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-click-event/view/#view","text":"val view: AdapterView <*>","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemLongClickEvent AdapterViewItemLongClickEvent \u00b6 class AdapterViewItemLongClickEvent Constructors \u00b6 Name Summary <init> AdapterViewItemLongClickEvent(view: AdapterView <*>, longClickedView: View ?, position: Int , id: Long ) Properties \u00b6 Name Summary id val id: Long longClickedView val longClickedView: View ? position val position: Int view val view: AdapterView <*>","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/#adapterviewitemlongclickevent","text":"class AdapterViewItemLongClickEvent","title":"AdapterViewItemLongClickEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/#constructors","text":"Name Summary <init> AdapterViewItemLongClickEvent(view: AdapterView <*>, longClickedView: View ?, position: Int , id: Long )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/#properties","text":"Name Summary id val id: Long longClickedView val longClickedView: View ? position val position: Int view val view: AdapterView <*>","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemLongClickEvent / <init> <init> \u00b6 AdapterViewItemLongClickEvent(view: AdapterView <*>, longClickedView: View ?, position: Int , id: Long )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/-init-/#init","text":"AdapterViewItemLongClickEvent(view: AdapterView <*>, longClickedView: View ?, position: Int , id: Long )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/id/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemLongClickEvent / id id \u00b6 val id: Long","title":"Id"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/id/#id","text":"val id: Long","title":"id"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/long-clicked-view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemLongClickEvent / longClickedView longClickedView \u00b6 val longClickedView: View ?","title":"Long clicked view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/long-clicked-view/#longclickedview","text":"val longClickedView: View ?","title":"longClickedView"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/position/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemLongClickEvent / position position \u00b6 val position: Int","title":"Position"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/position/#position","text":"val position: Int","title":"position"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewItemLongClickEvent / view view \u00b6 val view: AdapterView <*>","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-item-long-click-event/view/#view","text":"val view: AdapterView <*>","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent AdapterViewSelectionEvent \u00b6 sealed class AdapterViewSelectionEvent Types \u00b6 Name Summary ItemSelected class ItemSelected : AdapterViewSelectionEvent NothingSelected class NothingSelected : AdapterViewSelectionEvent Properties \u00b6 Name Summary view abstract val view: AdapterView <*>","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/#adapterviewselectionevent","text":"sealed class AdapterViewSelectionEvent","title":"AdapterViewSelectionEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/#types","text":"Name Summary ItemSelected class ItemSelected : AdapterViewSelectionEvent NothingSelected class NothingSelected : AdapterViewSelectionEvent","title":"Types"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/#properties","text":"Name Summary view abstract val view: AdapterView <*>","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / view view \u00b6 abstract val view: AdapterView <*>","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/view/#view","text":"abstract val view: AdapterView <*>","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / ItemSelected ItemSelected \u00b6 class ItemSelected : AdapterViewSelectionEvent Constructors \u00b6 Name Summary <init> ItemSelected(view: AdapterView <*>, selectedView: View ?, position: Int , id: Long ) Properties \u00b6 Name Summary id val id: Long position val position: Int selectedView val selectedView: View ? view val view: AdapterView <*>","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/#itemselected","text":"class ItemSelected : AdapterViewSelectionEvent","title":"ItemSelected"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/#constructors","text":"Name Summary <init> ItemSelected(view: AdapterView <*>, selectedView: View ?, position: Int , id: Long )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/#properties","text":"Name Summary id val id: Long position val position: Int selectedView val selectedView: View ? view val view: AdapterView <*>","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / ItemSelected / <init> <init> \u00b6 ItemSelected(view: AdapterView <*>, selectedView: View ?, position: Int , id: Long )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/-init-/#init","text":"ItemSelected(view: AdapterView <*>, selectedView: View ?, position: Int , id: Long )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/id/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / ItemSelected / id id \u00b6 val id: Long","title":"Id"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/id/#id","text":"val id: Long","title":"id"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/position/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / ItemSelected / position position \u00b6 val position: Int","title":"Position"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/position/#position","text":"val position: Int","title":"position"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/selected-view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / ItemSelected / selectedView selectedView \u00b6 val selectedView: View ?","title":"Selected view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/selected-view/#selectedview","text":"val selectedView: View ?","title":"selectedView"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / ItemSelected / view view \u00b6 val view: AdapterView <*>","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-item-selected/view/#view","text":"val view: AdapterView <*>","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-nothing-selected/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / NothingSelected NothingSelected \u00b6 class NothingSelected : AdapterViewSelectionEvent Constructors \u00b6 Name Summary <init> NothingSelected(view: AdapterView <*>) Properties \u00b6 Name Summary view val view: AdapterView <*>","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-nothing-selected/#nothingselected","text":"class NothingSelected : AdapterViewSelectionEvent","title":"NothingSelected"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-nothing-selected/#constructors","text":"Name Summary <init> NothingSelected(view: AdapterView <*>)","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-nothing-selected/#properties","text":"Name Summary view val view: AdapterView <*>","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-nothing-selected/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / NothingSelected / <init> <init> \u00b6 NothingSelected(view: AdapterView <*>)","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-nothing-selected/-init-/#init","text":"NothingSelected(view: AdapterView <*>)","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-nothing-selected/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AdapterViewSelectionEvent / NothingSelected / view view \u00b6 val view: AdapterView <*>","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-adapter-view-selection-event/-nothing-selected/view/#view","text":"val view: AdapterView <*>","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AfterTextChangeEvent AfterTextChangeEvent \u00b6 class AfterTextChangeEvent Constructors \u00b6 Name Summary <init> AfterTextChangeEvent(view: TextView , editable: Editable ?) Properties \u00b6 Name Summary editable val editable: Editable ? view val view: TextView","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/#aftertextchangeevent","text":"class AfterTextChangeEvent","title":"AfterTextChangeEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/#constructors","text":"Name Summary <init> AfterTextChangeEvent(view: TextView , editable: Editable ?)","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/#properties","text":"Name Summary editable val editable: Editable ? view val view: TextView","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AfterTextChangeEvent / <init> <init> \u00b6 AfterTextChangeEvent(view: TextView , editable: Editable ?)","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/-init-/#init","text":"AfterTextChangeEvent(view: TextView , editable: Editable ?)","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/editable/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AfterTextChangeEvent / editable editable \u00b6 val editable: Editable ?","title":"Editable"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/editable/#editable","text":"val editable: Editable ?","title":"editable"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / AfterTextChangeEvent / view view \u00b6 val view: TextView","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-after-text-change-event/view/#view","text":"val view: TextView","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / BeforeTextChangeEvent BeforeTextChangeEvent \u00b6 class BeforeTextChangeEvent Constructors \u00b6 Name Summary <init> BeforeTextChangeEvent(view: TextView , text: CharSequence , start: Int , count: Int , after: Int ) Properties \u00b6 Name Summary after val after: Int count val count: Int start val start: Int text val text: CharSequence view val view: TextView","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/#beforetextchangeevent","text":"class BeforeTextChangeEvent","title":"BeforeTextChangeEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/#constructors","text":"Name Summary <init> BeforeTextChangeEvent(view: TextView , text: CharSequence , start: Int , count: Int , after: Int )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/#properties","text":"Name Summary after val after: Int count val count: Int start val start: Int text val text: CharSequence view val view: TextView","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / BeforeTextChangeEvent / <init> <init> \u00b6 BeforeTextChangeEvent(view: TextView , text: CharSequence , start: Int , count: Int , after: Int )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/-init-/#init","text":"BeforeTextChangeEvent(view: TextView , text: CharSequence , start: Int , count: Int , after: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/after/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / BeforeTextChangeEvent / after after \u00b6 val after: Int","title":"After"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/after/#after","text":"val after: Int","title":"after"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/count/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / BeforeTextChangeEvent / count count \u00b6 val count: Int","title":"Count"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/count/#count","text":"val count: Int","title":"count"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/start/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / BeforeTextChangeEvent / start start \u00b6 val start: Int","title":"Start"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/start/#start","text":"val start: Int","title":"start"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/text/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / BeforeTextChangeEvent / text text \u00b6 val text: CharSequence","title":"Text"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/text/#text","text":"val text: CharSequence","title":"text"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / BeforeTextChangeEvent / view view \u00b6 val view: TextView","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-before-text-change-event/view/#view","text":"val view: TextView","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / EditorActionEvent EditorActionEvent \u00b6 class EditorActionEvent Constructors \u00b6 Name Summary <init> EditorActionEvent(view: TextView , actionId: Int , keyEvent: KeyEvent ?) Properties \u00b6 Name Summary actionId val actionId: Int keyEvent val keyEvent: KeyEvent ? view val view: TextView","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/#editoractionevent","text":"class EditorActionEvent","title":"EditorActionEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/#constructors","text":"Name Summary <init> EditorActionEvent(view: TextView , actionId: Int , keyEvent: KeyEvent ?)","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/#properties","text":"Name Summary actionId val actionId: Int keyEvent val keyEvent: KeyEvent ? view val view: TextView","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / EditorActionEvent / <init> <init> \u00b6 EditorActionEvent(view: TextView , actionId: Int , keyEvent: KeyEvent ?)","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/-init-/#init","text":"EditorActionEvent(view: TextView , actionId: Int , keyEvent: KeyEvent ?)","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/action-id/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / EditorActionEvent / actionId actionId \u00b6 val actionId: Int","title":"Action id"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/action-id/#actionid","text":"val actionId: Int","title":"actionId"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/key-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / EditorActionEvent / keyEvent keyEvent \u00b6 val keyEvent: KeyEvent ?","title":"Key event"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/key-event/#keyevent","text":"val keyEvent: KeyEvent ?","title":"keyEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / EditorActionEvent / view view \u00b6 val view: TextView","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-editor-action-event/view/#view","text":"val view: TextView","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent QueryTextEvent \u00b6 sealed class QueryTextEvent Types \u00b6 Name Summary QueryChanged class QueryChanged : QueryTextEvent QuerySubmitted class QuerySubmitted : QueryTextEvent Properties \u00b6 Name Summary queryText abstract val queryText: CharSequence view abstract val view: SearchView","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/#querytextevent","text":"sealed class QueryTextEvent","title":"QueryTextEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/#types","text":"Name Summary QueryChanged class QueryChanged : QueryTextEvent QuerySubmitted class QuerySubmitted : QueryTextEvent","title":"Types"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/#properties","text":"Name Summary queryText abstract val queryText: CharSequence view abstract val view: SearchView","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/query-text/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / queryText queryText \u00b6 abstract val queryText: CharSequence","title":"Query text"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/query-text/#querytext","text":"abstract val queryText: CharSequence","title":"queryText"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / view view \u00b6 abstract val view: SearchView","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/view/#view","text":"abstract val view: SearchView","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / QueryChanged QueryChanged \u00b6 class QueryChanged : QueryTextEvent Constructors \u00b6 Name Summary <init> QueryChanged(view: SearchView , queryText: CharSequence ) Properties \u00b6 Name Summary queryText val queryText: CharSequence view val view: SearchView","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/#querychanged","text":"class QueryChanged : QueryTextEvent","title":"QueryChanged"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/#constructors","text":"Name Summary <init> QueryChanged(view: SearchView , queryText: CharSequence )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/#properties","text":"Name Summary queryText val queryText: CharSequence view val view: SearchView","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / QueryChanged / <init> <init> \u00b6 QueryChanged(view: SearchView , queryText: CharSequence )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/-init-/#init","text":"QueryChanged(view: SearchView , queryText: CharSequence )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/query-text/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / QueryChanged / queryText queryText \u00b6 val queryText: CharSequence","title":"Query text"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/query-text/#querytext","text":"val queryText: CharSequence","title":"queryText"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / QueryChanged / view view \u00b6 val view: SearchView","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-changed/view/#view","text":"val view: SearchView","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / QuerySubmitted QuerySubmitted \u00b6 class QuerySubmitted : QueryTextEvent Constructors \u00b6 Name Summary <init> QuerySubmitted(view: SearchView , queryText: CharSequence ) Properties \u00b6 Name Summary queryText val queryText: CharSequence view val view: SearchView","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/#querysubmitted","text":"class QuerySubmitted : QueryTextEvent","title":"QuerySubmitted"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/#constructors","text":"Name Summary <init> QuerySubmitted(view: SearchView , queryText: CharSequence )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/#properties","text":"Name Summary queryText val queryText: CharSequence view val view: SearchView","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / QuerySubmitted / <init> <init> \u00b6 QuerySubmitted(view: SearchView , queryText: CharSequence )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/-init-/#init","text":"QuerySubmitted(view: SearchView , queryText: CharSequence )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/query-text/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / QuerySubmitted / queryText queryText \u00b6 val queryText: CharSequence","title":"Query text"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/query-text/#querytext","text":"val queryText: CharSequence","title":"queryText"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / QueryTextEvent / QuerySubmitted / view view \u00b6 val view: SearchView","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-query-text-event/-query-submitted/view/#view","text":"val view: SearchView","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / RatingChangeEvent RatingChangeEvent \u00b6 class RatingChangeEvent Constructors \u00b6 Name Summary <init> RatingChangeEvent(view: RatingBar , rating: Float , fromUser: Boolean ) Properties \u00b6 Name Summary fromUser val fromUser: Boolean rating val rating: Float view val view: RatingBar","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/#ratingchangeevent","text":"class RatingChangeEvent","title":"RatingChangeEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/#constructors","text":"Name Summary <init> RatingChangeEvent(view: RatingBar , rating: Float , fromUser: Boolean )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/#properties","text":"Name Summary fromUser val fromUser: Boolean rating val rating: Float view val view: RatingBar","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / RatingChangeEvent / <init> <init> \u00b6 RatingChangeEvent(view: RatingBar , rating: Float , fromUser: Boolean )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/-init-/#init","text":"RatingChangeEvent(view: RatingBar , rating: Float , fromUser: Boolean )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/from-user/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / RatingChangeEvent / fromUser fromUser \u00b6 val fromUser: Boolean","title":"From user"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/from-user/#fromuser","text":"val fromUser: Boolean","title":"fromUser"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/rating/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / RatingChangeEvent / rating rating \u00b6 val rating: Float","title":"Rating"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/rating/#rating","text":"val rating: Float","title":"rating"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / RatingChangeEvent / view view \u00b6 val view: RatingBar","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-rating-change-event/view/#view","text":"val view: RatingBar","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / ScrollEvent ScrollEvent \u00b6 class ScrollEvent Constructors \u00b6 Name Summary <init> ScrollEvent(view: AbsListView , scrollState: Int , firstVisibleItem: Int , visibleItemCount: Int , totalItemCount: Int ) Properties \u00b6 Name Summary firstVisibleItem val firstVisibleItem: Int scrollState val scrollState: Int totalItemCount val totalItemCount: Int view val view: AbsListView visibleItemCount val visibleItemCount: Int","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/#scrollevent","text":"class ScrollEvent","title":"ScrollEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/#constructors","text":"Name Summary <init> ScrollEvent(view: AbsListView , scrollState: Int , firstVisibleItem: Int , visibleItemCount: Int , totalItemCount: Int )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/#properties","text":"Name Summary firstVisibleItem val firstVisibleItem: Int scrollState val scrollState: Int totalItemCount val totalItemCount: Int view val view: AbsListView visibleItemCount val visibleItemCount: Int","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / ScrollEvent / <init> <init> \u00b6 ScrollEvent(view: AbsListView , scrollState: Int , firstVisibleItem: Int , visibleItemCount: Int , totalItemCount: Int )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/-init-/#init","text":"ScrollEvent(view: AbsListView , scrollState: Int , firstVisibleItem: Int , visibleItemCount: Int , totalItemCount: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/first-visible-item/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / ScrollEvent / firstVisibleItem firstVisibleItem \u00b6 val firstVisibleItem: Int","title":"First visible item"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/first-visible-item/#firstvisibleitem","text":"val firstVisibleItem: Int","title":"firstVisibleItem"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/scroll-state/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / ScrollEvent / scrollState scrollState \u00b6 val scrollState: Int","title":"Scroll state"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/scroll-state/#scrollstate","text":"val scrollState: Int","title":"scrollState"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/total-item-count/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / ScrollEvent / totalItemCount totalItemCount \u00b6 val totalItemCount: Int","title":"Total item count"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/total-item-count/#totalitemcount","text":"val totalItemCount: Int","title":"totalItemCount"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / ScrollEvent / view view \u00b6 val view: AbsListView","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/view/#view","text":"val view: AbsListView","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/visible-item-count/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / ScrollEvent / visibleItemCount visibleItemCount \u00b6 val visibleItemCount: Int","title":"Visible item count"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-scroll-event/visible-item-count/#visibleitemcount","text":"val visibleItemCount: Int","title":"visibleItemCount"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent SeekBarChangeEvent \u00b6 sealed class SeekBarChangeEvent Types \u00b6 Name Summary ProgressChanged class ProgressChanged : SeekBarChangeEvent StartTracking class StartTracking : SeekBarChangeEvent StopTracking class StopTracking : SeekBarChangeEvent Properties \u00b6 Name Summary view abstract val view: SeekBar","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/#seekbarchangeevent","text":"sealed class SeekBarChangeEvent","title":"SeekBarChangeEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/#types","text":"Name Summary ProgressChanged class ProgressChanged : SeekBarChangeEvent StartTracking class StartTracking : SeekBarChangeEvent StopTracking class StopTracking : SeekBarChangeEvent","title":"Types"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/#properties","text":"Name Summary view abstract val view: SeekBar","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / view view \u00b6 abstract val view: SeekBar","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/view/#view","text":"abstract val view: SeekBar","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / ProgressChanged ProgressChanged \u00b6 class ProgressChanged : SeekBarChangeEvent Constructors \u00b6 Name Summary <init> ProgressChanged(view: SeekBar , progress: Int , fromUser: Boolean ) Properties \u00b6 Name Summary fromUser val fromUser: Boolean progress val progress: Int view val view: SeekBar","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/#progresschanged","text":"class ProgressChanged : SeekBarChangeEvent","title":"ProgressChanged"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/#constructors","text":"Name Summary <init> ProgressChanged(view: SeekBar , progress: Int , fromUser: Boolean )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/#properties","text":"Name Summary fromUser val fromUser: Boolean progress val progress: Int view val view: SeekBar","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / ProgressChanged / <init> <init> \u00b6 ProgressChanged(view: SeekBar , progress: Int , fromUser: Boolean )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/-init-/#init","text":"ProgressChanged(view: SeekBar , progress: Int , fromUser: Boolean )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/from-user/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / ProgressChanged / fromUser fromUser \u00b6 val fromUser: Boolean","title":"From user"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/from-user/#fromuser","text":"val fromUser: Boolean","title":"fromUser"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/progress/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / ProgressChanged / progress progress \u00b6 val progress: Int","title":"Progress"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/progress/#progress","text":"val progress: Int","title":"progress"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / ProgressChanged / view view \u00b6 val view: SeekBar","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-progress-changed/view/#view","text":"val view: SeekBar","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-start-tracking/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / StartTracking StartTracking \u00b6 class StartTracking : SeekBarChangeEvent Constructors \u00b6 Name Summary <init> StartTracking(view: SeekBar ) Properties \u00b6 Name Summary view val view: SeekBar","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-start-tracking/#starttracking","text":"class StartTracking : SeekBarChangeEvent","title":"StartTracking"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-start-tracking/#constructors","text":"Name Summary <init> StartTracking(view: SeekBar )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-start-tracking/#properties","text":"Name Summary view val view: SeekBar","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-start-tracking/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / StartTracking / <init> <init> \u00b6 StartTracking(view: SeekBar )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-start-tracking/-init-/#init","text":"StartTracking(view: SeekBar )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-start-tracking/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / StartTracking / view view \u00b6 val view: SeekBar","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-start-tracking/view/#view","text":"val view: SeekBar","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-stop-tracking/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / StopTracking StopTracking \u00b6 class StopTracking : SeekBarChangeEvent Constructors \u00b6 Name Summary <init> StopTracking(view: SeekBar ) Properties \u00b6 Name Summary view val view: SeekBar","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-stop-tracking/#stoptracking","text":"class StopTracking : SeekBarChangeEvent","title":"StopTracking"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-stop-tracking/#constructors","text":"Name Summary <init> StopTracking(view: SeekBar )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-stop-tracking/#properties","text":"Name Summary view val view: SeekBar","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-stop-tracking/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / StopTracking / <init> <init> \u00b6 StopTracking(view: SeekBar )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-stop-tracking/-init-/#init","text":"StopTracking(view: SeekBar )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-stop-tracking/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / SeekBarChangeEvent / StopTracking / view view \u00b6 val view: SeekBar","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-seek-bar-change-event/-stop-tracking/view/#view","text":"val view: SeekBar","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / TextChangeEvent TextChangeEvent \u00b6 class TextChangeEvent Constructors \u00b6 Name Summary <init> TextChangeEvent(view: TextView , text: CharSequence , start: Int , before: Int , count: Int ) Properties \u00b6 Name Summary before val before: Int count val count: Int start val start: Int text val text: CharSequence view val view: TextView","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/#textchangeevent","text":"class TextChangeEvent","title":"TextChangeEvent"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/#constructors","text":"Name Summary <init> TextChangeEvent(view: TextView , text: CharSequence , start: Int , before: Int , count: Int )","title":"Constructors"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/#properties","text":"Name Summary before val before: Int count val count: Int start val start: Int text val text: CharSequence view val view: TextView","title":"Properties"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/-init-/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / TextChangeEvent / <init> <init> \u00b6 TextChangeEvent(view: TextView , text: CharSequence , start: Int , before: Int , count: Int )","title":" init "},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/-init-/#init","text":"TextChangeEvent(view: TextView , text: CharSequence , start: Int , before: Int , count: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/before/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / TextChangeEvent / before before \u00b6 val before: Int","title":"Before"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/before/#before","text":"val before: Int","title":"before"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/count/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / TextChangeEvent / count count \u00b6 val count: Int","title":"Count"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/count/#count","text":"val count: Int","title":"count"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/start/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / TextChangeEvent / start start \u00b6 val start: Int","title":"Start"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/start/#start","text":"val start: Int","title":"start"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/text/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / TextChangeEvent / text text \u00b6 val text: CharSequence","title":"Text"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/text/#text","text":"val text: CharSequence","title":"text"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / TextChangeEvent / view view \u00b6 val view: TextView","title":"View"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/-text-change-event/view/#view","text":"val view: TextView","title":"view"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-abs-list-view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AbsListView Extensions for android.widget.AbsListView \u00b6 Name Summary scrollEvents Create a Flow of scroll events on the AbsListView instance. fun AbsListView .scrollEvents(): Flow< ScrollEvent >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-abs-list-view/#extensions-for-androidwidgetabslistview","text":"Name Summary scrollEvents Create a Flow of scroll events on the AbsListView instance. fun AbsListView .scrollEvents(): Flow< ScrollEvent >","title":"Extensions for android.widget.AbsListView"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-abs-list-view/scroll-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AbsListView / scrollEvents scrollEvents \u00b6 @CheckResult fun AbsListView .scrollEvents(): Flow< ScrollEvent > Create a Flow of scroll events on the AbsListView instance. Note: Created flow keeps a strong reference to the AbsListView instance until the coroutine that launched the flow collector is cancelled. Example of usage: absListView.scrollEvents() .onEach { event -> // handle scroll event } .launchIn(uiScope)","title":"Scroll events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-abs-list-view/scroll-events/#scrollevents","text":"@CheckResult fun AbsListView .scrollEvents(): Flow< ScrollEvent > Create a Flow of scroll events on the AbsListView instance. Note: Created flow keeps a strong reference to the AbsListView instance until the coroutine that launched the flow collector is cancelled. Example of usage: absListView.scrollEvents() .onEach { event -> // handle scroll event } .launchIn(uiScope)","title":"scrollEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.Adapter Extensions for android.widget.Adapter \u00b6 Name Summary dataChanges Create a InitialValueFlow of data change events on the Adapter instance. fun Adapter .dataChanges(): InitialValueFlow< Adapter >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter/#extensions-for-androidwidgetadapter","text":"Name Summary dataChanges Create a InitialValueFlow of data change events on the Adapter instance. fun Adapter .dataChanges(): InitialValueFlow< Adapter >","title":"Extensions for android.widget.Adapter"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter/data-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.Adapter / dataChanges dataChanges \u00b6 @CheckResult fun Adapter .dataChanges(): InitialValueFlow< Adapter > Create a InitialValueFlow of data change events on the Adapter instance. Note: Created flow keeps a strong reference to the Adapter instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapter.dataChanges() .onEach { adapter -> // handle data changed } .launchIn(uiScope)","title":"Data changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter/data-changes/#datachanges","text":"@CheckResult fun Adapter .dataChanges(): InitialValueFlow< Adapter > Create a InitialValueFlow of data change events on the Adapter instance. Note: Created flow keeps a strong reference to the Adapter instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapter.dataChanges() .onEach { adapter -> // handle data changed } .launchIn(uiScope)","title":"dataChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AdapterView Extensions for android.widget.AdapterView \u00b6 Name Summary itemClickEvents Create a Flow of item click events on the AdapterView instance. fun <T : Adapter > AdapterView <T>.itemClickEvents(): Flow< AdapterViewItemClickEvent > itemClicks Create a Flow of item clicks on the AdapterView instance where the value emitted is the position of the item clicked. fun <T : Adapter > AdapterView <T>.itemClicks(): Flow< Int > itemLongClickEvents Create a Flow of item long click events on the AdapterView instance. fun <T : Adapter > AdapterView <T>.itemLongClickEvents(handled: ( AdapterViewItemLongClickEvent ) -> Boolean = { true }): Flow< AdapterViewItemLongClickEvent > itemLongClicks Create a Flow of item long clicks on the AdapterView instance where the value emitted is the position of the item clicked. fun <T : Adapter > AdapterView <T>.itemLongClicks(handled: () -> Boolean = { true }): Flow< Int > itemSelections Create a InitialValueFlow of item selections on the AdapterView instance where the value emitted is the selected position, or AdapterView.INVALID_POSITION if nothing is selected. fun <T : Adapter > AdapterView <T>.itemSelections(): InitialValueFlow< Int > selectionEvents Create a InitialValueFlow of item selection events on the AdapterView instance where the value emitted is one of the 2 event types: AdapterViewSelectionEvent.ItemSelected , AdapterViewSelectionEvent.NothingSelected fun <T : Adapter > AdapterView <T>.selectionEvents(): InitialValueFlow< AdapterViewSelectionEvent >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/#extensions-for-androidwidgetadapterview","text":"Name Summary itemClickEvents Create a Flow of item click events on the AdapterView instance. fun <T : Adapter > AdapterView <T>.itemClickEvents(): Flow< AdapterViewItemClickEvent > itemClicks Create a Flow of item clicks on the AdapterView instance where the value emitted is the position of the item clicked. fun <T : Adapter > AdapterView <T>.itemClicks(): Flow< Int > itemLongClickEvents Create a Flow of item long click events on the AdapterView instance. fun <T : Adapter > AdapterView <T>.itemLongClickEvents(handled: ( AdapterViewItemLongClickEvent ) -> Boolean = { true }): Flow< AdapterViewItemLongClickEvent > itemLongClicks Create a Flow of item long clicks on the AdapterView instance where the value emitted is the position of the item clicked. fun <T : Adapter > AdapterView <T>.itemLongClicks(handled: () -> Boolean = { true }): Flow< Int > itemSelections Create a InitialValueFlow of item selections on the AdapterView instance where the value emitted is the selected position, or AdapterView.INVALID_POSITION if nothing is selected. fun <T : Adapter > AdapterView <T>.itemSelections(): InitialValueFlow< Int > selectionEvents Create a InitialValueFlow of item selection events on the AdapterView instance where the value emitted is one of the 2 event types: AdapterViewSelectionEvent.ItemSelected , AdapterViewSelectionEvent.NothingSelected fun <T : Adapter > AdapterView <T>.selectionEvents(): InitialValueFlow< AdapterViewSelectionEvent >","title":"Extensions for android.widget.AdapterView"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-click-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AdapterView / itemClickEvents itemClickEvents \u00b6 @CheckResult fun <T : Adapter > AdapterView <T>.itemClickEvents(): Flow< AdapterViewItemClickEvent > Create a Flow of item click events on the AdapterView instance. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemClickEvents() .onEach { event -> // handle adapter view item click event } .launchIn(uiScope)","title":"Item click events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-click-events/#itemclickevents","text":"@CheckResult fun <T : Adapter > AdapterView <T>.itemClickEvents(): Flow< AdapterViewItemClickEvent > Create a Flow of item click events on the AdapterView instance. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemClickEvents() .onEach { event -> // handle adapter view item click event } .launchIn(uiScope)","title":"itemClickEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-clicks/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AdapterView / itemClicks itemClicks \u00b6 @CheckResult fun <T : Adapter > AdapterView <T>.itemClicks(): Flow< Int > Create a Flow of item clicks on the AdapterView instance where the value emitted is the position of the item clicked. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemClickEvents() .onEach { position -> // handle adapter view item clicked } .launchIn(uiScope)","title":"Item clicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-clicks/#itemclicks","text":"@CheckResult fun <T : Adapter > AdapterView <T>.itemClicks(): Flow< Int > Create a Flow of item clicks on the AdapterView instance where the value emitted is the position of the item clicked. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemClickEvents() .onEach { position -> // handle adapter view item clicked } .launchIn(uiScope)","title":"itemClicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-long-click-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AdapterView / itemLongClickEvents itemLongClickEvents \u00b6 @CheckResult fun <T : Adapter > AdapterView <T>.itemLongClickEvents(handled: ( AdapterViewItemLongClickEvent ) -> Boolean = { true }): Flow< AdapterViewItemLongClickEvent > Create a Flow of item long click events on the AdapterView instance. Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying AdapterView.OnItemLongClickListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemLongClickEvents { it.position == 0 } .onEach { event -> // handle adapter view item long click event } .launchIn(uiScope)","title":"Item long click events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-long-click-events/#itemlongclickevents","text":"@CheckResult fun <T : Adapter > AdapterView <T>.itemLongClickEvents(handled: ( AdapterViewItemLongClickEvent ) -> Boolean = { true }): Flow< AdapterViewItemLongClickEvent > Create a Flow of item long click events on the AdapterView instance.","title":"itemLongClickEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-long-click-events/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying AdapterView.OnItemLongClickListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemLongClickEvents { it.position == 0 } .onEach { event -> // handle adapter view item long click event } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-long-clicks/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AdapterView / itemLongClicks itemLongClicks \u00b6 @CheckResult fun <T : Adapter > AdapterView <T>.itemLongClicks(handled: () -> Boolean = { true }): Flow< Int > Create a Flow of item long clicks on the AdapterView instance where the value emitted is the position of the item clicked. Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying AdapterView.OnItemLongClickListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemLongClicks { it.position == 0 } .onEach { position -> // handle adapter view item long clicked } .launchIn(uiScope)","title":"Item long clicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-long-clicks/#itemlongclicks","text":"@CheckResult fun <T : Adapter > AdapterView <T>.itemLongClicks(handled: () -> Boolean = { true }): Flow< Int > Create a Flow of item long clicks on the AdapterView instance where the value emitted is the position of the item clicked.","title":"itemLongClicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-long-clicks/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying AdapterView.OnItemLongClickListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemLongClicks { it.position == 0 } .onEach { position -> // handle adapter view item long clicked } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-selections/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AdapterView / itemSelections itemSelections \u00b6 @CheckResult fun <T : Adapter > AdapterView <T>.itemSelections(): InitialValueFlow< Int > Create a InitialValueFlow of item selections on the AdapterView instance where the value emitted is the selected position, or AdapterView.INVALID_POSITION if nothing is selected. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemSelections() .onEach { position -> // handle adapter view item selection } .launchIn(uiScope)","title":"Item selections"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/item-selections/#itemselections","text":"@CheckResult fun <T : Adapter > AdapterView <T>.itemSelections(): InitialValueFlow< Int > Create a InitialValueFlow of item selections on the AdapterView instance where the value emitted is the selected position, or AdapterView.INVALID_POSITION if nothing is selected. Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.itemSelections() .onEach { position -> // handle adapter view item selection } .launchIn(uiScope)","title":"itemSelections"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/selection-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AdapterView / selectionEvents selectionEvents \u00b6 @CheckResult fun <T : Adapter > AdapterView <T>.selectionEvents(): InitialValueFlow< AdapterViewSelectionEvent > Create a InitialValueFlow of item selection events on the AdapterView instance where the value emitted is one of the 2 event types: AdapterViewSelectionEvent.ItemSelected , AdapterViewSelectionEvent.NothingSelected Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.selectionEvents() .onEach { event -> // handle adapter view selection event } .launchIn(uiScope)","title":"Selection events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-adapter-view/selection-events/#selectionevents","text":"@CheckResult fun <T : Adapter > AdapterView <T>.selectionEvents(): InitialValueFlow< AdapterViewSelectionEvent > Create a InitialValueFlow of item selection events on the AdapterView instance where the value emitted is one of the 2 event types: AdapterViewSelectionEvent.ItemSelected , AdapterViewSelectionEvent.NothingSelected Note: Created flow keeps a strong reference to the AdapterView instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapterView.selectionEvents() .onEach { event -> // handle adapter view selection event } .launchIn(uiScope)","title":"selectionEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-auto-complete-text-view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AutoCompleteTextView Extensions for android.widget.AutoCompleteTextView \u00b6 Name Summary dismisses Create a Flow of dismiss events on the AutoCompleteTextView instance. fun AutoCompleteTextView .dismisses(): Flow< Unit > itemClickEvents Create a Flow of item click events on the AutoCompleteTextView instance. fun AutoCompleteTextView .itemClickEvents(): Flow< AdapterViewItemClickEvent >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-auto-complete-text-view/#extensions-for-androidwidgetautocompletetextview","text":"Name Summary dismisses Create a Flow of dismiss events on the AutoCompleteTextView instance. fun AutoCompleteTextView .dismisses(): Flow< Unit > itemClickEvents Create a Flow of item click events on the AutoCompleteTextView instance. fun AutoCompleteTextView .itemClickEvents(): Flow< AdapterViewItemClickEvent >","title":"Extensions for android.widget.AutoCompleteTextView"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-auto-complete-text-view/dismisses/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AutoCompleteTextView / dismisses dismisses \u00b6 @CheckResult fun AutoCompleteTextView .dismisses(): Flow< Unit > Create a Flow of dismiss events on the AutoCompleteTextView instance. Note: Created flow keeps a strong reference to the AutoCompleteTextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: autoCompleteTextView.dismisses() .onEach { // handle auto-complete text view dismiss event } .launchIn(uiScope)","title":"Dismisses"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-auto-complete-text-view/dismisses/#dismisses","text":"@CheckResult fun AutoCompleteTextView .dismisses(): Flow< Unit > Create a Flow of dismiss events on the AutoCompleteTextView instance. Note: Created flow keeps a strong reference to the AutoCompleteTextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: autoCompleteTextView.dismisses() .onEach { // handle auto-complete text view dismiss event } .launchIn(uiScope)","title":"dismisses"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-auto-complete-text-view/item-click-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.AutoCompleteTextView / itemClickEvents itemClickEvents \u00b6 @CheckResult fun AutoCompleteTextView .itemClickEvents(): Flow< AdapterViewItemClickEvent > Create a Flow of item click events on the AutoCompleteTextView instance. Note: Created flow keeps a strong reference to the AutoCompleteTextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: autoCompleteTextView.itemClickEvents() .onEach { event -> // handle auto-complete text view item click event } .launchIn(uiScope)","title":"Item click events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-auto-complete-text-view/item-click-events/#itemclickevents","text":"@CheckResult fun AutoCompleteTextView .itemClickEvents(): Flow< AdapterViewItemClickEvent > Create a Flow of item click events on the AutoCompleteTextView instance. Note: Created flow keeps a strong reference to the AutoCompleteTextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: autoCompleteTextView.itemClickEvents() .onEach { event -> // handle auto-complete text view item click event } .launchIn(uiScope)","title":"itemClickEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-compound-button/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.CompoundButton Extensions for android.widget.CompoundButton \u00b6 Name Summary checkedChanges Create a InitialValueFlow of checked state changes on the CompoundButton instance where the value emitted is whether the CompoundButton is currently checked. fun CompoundButton .checkedChanges(): InitialValueFlow< Boolean >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-compound-button/#extensions-for-androidwidgetcompoundbutton","text":"Name Summary checkedChanges Create a InitialValueFlow of checked state changes on the CompoundButton instance where the value emitted is whether the CompoundButton is currently checked. fun CompoundButton .checkedChanges(): InitialValueFlow< Boolean >","title":"Extensions for android.widget.CompoundButton"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-compound-button/checked-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.CompoundButton / checkedChanges checkedChanges \u00b6 @CheckResult fun CompoundButton .checkedChanges(): InitialValueFlow< Boolean > Create a InitialValueFlow of checked state changes on the CompoundButton instance where the value emitted is whether the CompoundButton is currently checked. Note: Created flow keeps a strong reference to the CompoundButton instance until the coroutine that launched the flow collector is cancelled. Example of usage: compoundButton.checkedChanges() .onEach { isChecked -> // handle isChecked } .launchIn(uiScope)","title":"Checked changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-compound-button/checked-changes/#checkedchanges","text":"@CheckResult fun CompoundButton .checkedChanges(): InitialValueFlow< Boolean > Create a InitialValueFlow of checked state changes on the CompoundButton instance where the value emitted is whether the CompoundButton is currently checked. Note: Created flow keeps a strong reference to the CompoundButton instance until the coroutine that launched the flow collector is cancelled. Example of usage: compoundButton.checkedChanges() .onEach { isChecked -> // handle isChecked } .launchIn(uiScope)","title":"checkedChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-popup-menu/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.PopupMenu Extensions for android.widget.PopupMenu \u00b6 Name Summary dismisses Create a Flow of dismiss events on the PopupMenu instance. fun PopupMenu .dismisses(): Flow< Unit > itemClicks Create a Flow of item clicked events on the PopupMenu instance where the value emitted is the clicked menu item. fun PopupMenu .itemClicks(): Flow< MenuItem >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-popup-menu/#extensions-for-androidwidgetpopupmenu","text":"Name Summary dismisses Create a Flow of dismiss events on the PopupMenu instance. fun PopupMenu .dismisses(): Flow< Unit > itemClicks Create a Flow of item clicked events on the PopupMenu instance where the value emitted is the clicked menu item. fun PopupMenu .itemClicks(): Flow< MenuItem >","title":"Extensions for android.widget.PopupMenu"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-popup-menu/dismisses/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.PopupMenu / dismisses dismisses \u00b6 @CheckResult fun PopupMenu .dismisses(): Flow< Unit > Create a Flow of dismiss events on the PopupMenu instance. Note: Created flow keeps a strong reference to the PopupMenu instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.dismisses() .onEach { // handle popup menu dismiss event } .launchIn(uiScope)","title":"Dismisses"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-popup-menu/dismisses/#dismisses","text":"@CheckResult fun PopupMenu .dismisses(): Flow< Unit > Create a Flow of dismiss events on the PopupMenu instance. Note: Created flow keeps a strong reference to the PopupMenu instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.dismisses() .onEach { // handle popup menu dismiss event } .launchIn(uiScope)","title":"dismisses"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-popup-menu/item-clicks/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.PopupMenu / itemClicks itemClicks \u00b6 @CheckResult fun PopupMenu .itemClicks(): Flow< MenuItem > Create a Flow of item clicked events on the PopupMenu instance where the value emitted is the clicked menu item. Note: Created flow keeps a strong reference to the PopupMenu instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.itemClicks() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"Item clicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-popup-menu/item-clicks/#itemclicks","text":"@CheckResult fun PopupMenu .itemClicks(): Flow< MenuItem > Create a Flow of item clicked events on the PopupMenu instance where the value emitted is the clicked menu item. Note: Created flow keeps a strong reference to the PopupMenu instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.itemClicks() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"itemClicks"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-radio-group/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.RadioGroup Extensions for android.widget.RadioGroup \u00b6 Name Summary checkedChanges Create a InitialValueFlow of checked state change events on the RadioButton instance where the value emitted is the currently checked radio button id, or -1 when the selection is cleared. fun RadioGroup .checkedChanges(): InitialValueFlow< Int >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-radio-group/#extensions-for-androidwidgetradiogroup","text":"Name Summary checkedChanges Create a InitialValueFlow of checked state change events on the RadioButton instance where the value emitted is the currently checked radio button id, or -1 when the selection is cleared. fun RadioGroup .checkedChanges(): InitialValueFlow< Int >","title":"Extensions for android.widget.RadioGroup"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-radio-group/checked-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.RadioGroup / checkedChanges checkedChanges \u00b6 @CheckResult fun RadioGroup .checkedChanges(): InitialValueFlow< Int > Create a InitialValueFlow of checked state change events on the RadioButton instance where the value emitted is the currently checked radio button id, or -1 when the selection is cleared. Note: Created flow keeps a strong reference to the RadioButton instance until the coroutine that launched the flow collector is cancelled. Example of usage: radioGroup.checkedChanges() .onEach { checkedId -> // handle checkedId } .launchIn(uiScope)","title":"Checked changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-radio-group/checked-changes/#checkedchanges","text":"@CheckResult fun RadioGroup .checkedChanges(): InitialValueFlow< Int > Create a InitialValueFlow of checked state change events on the RadioButton instance where the value emitted is the currently checked radio button id, or -1 when the selection is cleared. Note: Created flow keeps a strong reference to the RadioButton instance until the coroutine that launched the flow collector is cancelled. Example of usage: radioGroup.checkedChanges() .onEach { checkedId -> // handle checkedId } .launchIn(uiScope)","title":"checkedChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-rating-bar/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.RatingBar Extensions for android.widget.RatingBar \u00b6 Name Summary ratingChangeEvents Create a InitialValueFlow of rating change events on the RatingBar instance. fun RatingBar .ratingChangeEvents(): InitialValueFlow< RatingChangeEvent > ratingChanges Create a InitialValueFlow of rating changes on the RatingBar instance where the value emitted is the current rating. fun RatingBar .ratingChanges(): InitialValueFlow< Float >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-rating-bar/#extensions-for-androidwidgetratingbar","text":"Name Summary ratingChangeEvents Create a InitialValueFlow of rating change events on the RatingBar instance. fun RatingBar .ratingChangeEvents(): InitialValueFlow< RatingChangeEvent > ratingChanges Create a InitialValueFlow of rating changes on the RatingBar instance where the value emitted is the current rating. fun RatingBar .ratingChanges(): InitialValueFlow< Float >","title":"Extensions for android.widget.RatingBar"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-rating-bar/rating-change-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.RatingBar / ratingChangeEvents ratingChangeEvents \u00b6 @CheckResult fun RatingBar .ratingChangeEvents(): InitialValueFlow< RatingChangeEvent > Create a InitialValueFlow of rating change events on the RatingBar instance. Note: Created flow keeps a strong reference to the RatingBar instance until the coroutine that launched the flow collector is cancelled. Example of usage: ratingBar.ratingChangeEvents() .onEach { event -> // handle rating change event } .launchIn(uiScope)","title":"Rating change events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-rating-bar/rating-change-events/#ratingchangeevents","text":"@CheckResult fun RatingBar .ratingChangeEvents(): InitialValueFlow< RatingChangeEvent > Create a InitialValueFlow of rating change events on the RatingBar instance. Note: Created flow keeps a strong reference to the RatingBar instance until the coroutine that launched the flow collector is cancelled. Example of usage: ratingBar.ratingChangeEvents() .onEach { event -> // handle rating change event } .launchIn(uiScope)","title":"ratingChangeEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-rating-bar/rating-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.RatingBar / ratingChanges ratingChanges \u00b6 @CheckResult fun RatingBar .ratingChanges(): InitialValueFlow< Float > Create a InitialValueFlow of rating changes on the RatingBar instance where the value emitted is the current rating. Note: Created flow keeps a strong reference to the RatingBar instance until the coroutine that launched the flow collector is cancelled. Example of usage: ratingBar.ratingChanges() .onEach { rating -> // handle rating } .launchIn(uiScope)","title":"Rating changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-rating-bar/rating-changes/#ratingchanges","text":"@CheckResult fun RatingBar .ratingChanges(): InitialValueFlow< Float > Create a InitialValueFlow of rating changes on the RatingBar instance where the value emitted is the current rating. Note: Created flow keeps a strong reference to the RatingBar instance until the coroutine that launched the flow collector is cancelled. Example of usage: ratingBar.ratingChanges() .onEach { rating -> // handle rating } .launchIn(uiScope)","title":"ratingChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-search-view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.SearchView Extensions for android.widget.SearchView \u00b6 Name Summary queryTextChanges Create a InitialValueFlow of query text changes on the SearchView instance where the value emitted is latest query text. fun SearchView .queryTextChanges(): InitialValueFlow< CharSequence > queryTextEvents Create a InitialValueFlow of query text events on the SearchView instance where the value emitted is one of the 2 event types: QueryTextEvent.QueryChanged , QueryTextEvent.QuerySubmitted fun SearchView .queryTextEvents(): InitialValueFlow< QueryTextEvent >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-search-view/#extensions-for-androidwidgetsearchview","text":"Name Summary queryTextChanges Create a InitialValueFlow of query text changes on the SearchView instance where the value emitted is latest query text. fun SearchView .queryTextChanges(): InitialValueFlow< CharSequence > queryTextEvents Create a InitialValueFlow of query text events on the SearchView instance where the value emitted is one of the 2 event types: QueryTextEvent.QueryChanged , QueryTextEvent.QuerySubmitted fun SearchView .queryTextEvents(): InitialValueFlow< QueryTextEvent >","title":"Extensions for android.widget.SearchView"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-search-view/query-text-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.SearchView / queryTextChanges queryTextChanges \u00b6 @CheckResult fun SearchView .queryTextChanges(): InitialValueFlow< CharSequence > Create a InitialValueFlow of query text changes on the SearchView instance where the value emitted is latest query text. Note: Created flow keeps a strong reference to the SearchView instance until the coroutine that launched the flow collector is cancelled. Example of usage: searchView.queryTextChanges() .onEach { queryText -> // handle queryText } .launchIn(uiScope)","title":"Query text changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-search-view/query-text-changes/#querytextchanges","text":"@CheckResult fun SearchView .queryTextChanges(): InitialValueFlow< CharSequence > Create a InitialValueFlow of query text changes on the SearchView instance where the value emitted is latest query text. Note: Created flow keeps a strong reference to the SearchView instance until the coroutine that launched the flow collector is cancelled. Example of usage: searchView.queryTextChanges() .onEach { queryText -> // handle queryText } .launchIn(uiScope)","title":"queryTextChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-search-view/query-text-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.SearchView / queryTextEvents queryTextEvents \u00b6 @CheckResult fun SearchView .queryTextEvents(): InitialValueFlow< QueryTextEvent > Create a InitialValueFlow of query text events on the SearchView instance where the value emitted is one of the 2 event types: QueryTextEvent.QueryChanged , QueryTextEvent.QuerySubmitted Note: Created flow keeps a strong reference to the SearchView instance until the coroutine that launched the flow collector is cancelled. Example of usage: searchView.queryTextEvents() .onEach { queryTextEvent -> // handle search view query text cha } .launchIn(uiScope)","title":"Query text events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-search-view/query-text-events/#querytextevents","text":"@CheckResult fun SearchView .queryTextEvents(): InitialValueFlow< QueryTextEvent > Create a InitialValueFlow of query text events on the SearchView instance where the value emitted is one of the 2 event types: QueryTextEvent.QueryChanged , QueryTextEvent.QuerySubmitted Note: Created flow keeps a strong reference to the SearchView instance until the coroutine that launched the flow collector is cancelled. Example of usage: searchView.queryTextEvents() .onEach { queryTextEvent -> // handle search view query text cha } .launchIn(uiScope)","title":"queryTextEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-seek-bar/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.SeekBar Extensions for android.widget.SeekBar \u00b6 Name Summary changeEvents Create a InitialValueFlow of change events on the SeekBar instance. fun SeekBar .changeEvents(): InitialValueFlow< SeekBarChangeEvent > progressChanges Create a InitialValueFlow of progress changes on the SeekBar instance where the value emitted is the current progress. fun SeekBar .progressChanges(): InitialValueFlow< Int >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-seek-bar/#extensions-for-androidwidgetseekbar","text":"Name Summary changeEvents Create a InitialValueFlow of change events on the SeekBar instance. fun SeekBar .changeEvents(): InitialValueFlow< SeekBarChangeEvent > progressChanges Create a InitialValueFlow of progress changes on the SeekBar instance where the value emitted is the current progress. fun SeekBar .progressChanges(): InitialValueFlow< Int >","title":"Extensions for android.widget.SeekBar"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-seek-bar/change-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.SeekBar / changeEvents changeEvents \u00b6 @CheckResult fun SeekBar .changeEvents(): InitialValueFlow< SeekBarChangeEvent > Create a InitialValueFlow of change events on the SeekBar instance. Note: Created flow keeps a strong reference to the SeekBar instance until the coroutine that launched the flow collector is cancelled. Example of usage: seekBar.changeEvents() .onEach { event -> when(event) { SeekBarChangeEvent.ProgressChanged -> { // handle seek bar progress changed event } SeekBarChangeEvent.StartTracking -> { // handle seek bar start tracking event } SeekBarChangeEvent.StopTracking -> { // handle seek bar stop tracking event } } } .launchIn(uiScope)","title":"Change events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-seek-bar/change-events/#changeevents","text":"@CheckResult fun SeekBar .changeEvents(): InitialValueFlow< SeekBarChangeEvent > Create a InitialValueFlow of change events on the SeekBar instance. Note: Created flow keeps a strong reference to the SeekBar instance until the coroutine that launched the flow collector is cancelled. Example of usage: seekBar.changeEvents() .onEach { event -> when(event) { SeekBarChangeEvent.ProgressChanged -> { // handle seek bar progress changed event } SeekBarChangeEvent.StartTracking -> { // handle seek bar start tracking event } SeekBarChangeEvent.StopTracking -> { // handle seek bar stop tracking event } } } .launchIn(uiScope)","title":"changeEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-seek-bar/progress-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.SeekBar / progressChanges progressChanges \u00b6 @CheckResult fun SeekBar .progressChanges(): InitialValueFlow< Int > Create a InitialValueFlow of progress changes on the SeekBar instance where the value emitted is the current progress. Note: Created flow keeps a strong reference to the SeekBar instance until the coroutine that launched the flow collector is cancelled. Example of usage: seekBar.progressChanges() .onEach { progress -> // handle progress } .launchIn(uiScope)","title":"Progress changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-seek-bar/progress-changes/#progresschanges","text":"@CheckResult fun SeekBar .progressChanges(): InitialValueFlow< Int > Create a InitialValueFlow of progress changes on the SeekBar instance where the value emitted is the current progress. Note: Created flow keeps a strong reference to the SeekBar instance until the coroutine that launched the flow collector is cancelled. Example of usage: seekBar.progressChanges() .onEach { progress -> // handle progress } .launchIn(uiScope)","title":"progressChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.TextView Extensions for android.widget.TextView \u00b6 Name Summary afterTextChanges Create a InitialValueFlow of after text change events on the TextView instance. fun TextView .afterTextChanges(): InitialValueFlow< AfterTextChangeEvent > beforeTextChanges Create a InitialValueFlow of before text change events on the TextView instance. fun TextView .beforeTextChanges(): InitialValueFlow< BeforeTextChangeEvent > editorActionEvents Create a Flow of editor action events on the TextView instance. fun TextView .editorActionEvents(handled: ( EditorActionEvent ) -> Boolean = { true }): Flow< EditorActionEvent > textChangeEvents Create a InitialValueFlow of text change events on the TextView instance. fun TextView .textChangeEvents(): InitialValueFlow< TextChangeEvent > textChanges Create a InitialValueFlow of text changes on the TextView instance where the value emitted is the current text. fun TextView .textChanges(): InitialValueFlow< CharSequence >","title":"Index"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/#extensions-for-androidwidgettextview","text":"Name Summary afterTextChanges Create a InitialValueFlow of after text change events on the TextView instance. fun TextView .afterTextChanges(): InitialValueFlow< AfterTextChangeEvent > beforeTextChanges Create a InitialValueFlow of before text change events on the TextView instance. fun TextView .beforeTextChanges(): InitialValueFlow< BeforeTextChangeEvent > editorActionEvents Create a Flow of editor action events on the TextView instance. fun TextView .editorActionEvents(handled: ( EditorActionEvent ) -> Boolean = { true }): Flow< EditorActionEvent > textChangeEvents Create a InitialValueFlow of text change events on the TextView instance. fun TextView .textChangeEvents(): InitialValueFlow< TextChangeEvent > textChanges Create a InitialValueFlow of text changes on the TextView instance where the value emitted is the current text. fun TextView .textChanges(): InitialValueFlow< CharSequence >","title":"Extensions for android.widget.TextView"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/after-text-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.TextView / afterTextChanges afterTextChanges \u00b6 @CheckResult fun TextView .afterTextChanges(): InitialValueFlow< AfterTextChangeEvent > Create a InitialValueFlow of after text change events on the TextView instance. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.afterTextChanges() .onEach { event -> // handle text view after text change event } .launchIn(uiScope)","title":"After text changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/after-text-changes/#aftertextchanges","text":"@CheckResult fun TextView .afterTextChanges(): InitialValueFlow< AfterTextChangeEvent > Create a InitialValueFlow of after text change events on the TextView instance. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.afterTextChanges() .onEach { event -> // handle text view after text change event } .launchIn(uiScope)","title":"afterTextChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/before-text-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.TextView / beforeTextChanges beforeTextChanges \u00b6 @CheckResult fun TextView .beforeTextChanges(): InitialValueFlow< BeforeTextChangeEvent > Create a InitialValueFlow of before text change events on the TextView instance. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.beforeTextChanges() .onEach { event -> // handle text view before text change event } .launchIn(uiScope)","title":"Before text changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/before-text-changes/#beforetextchanges","text":"@CheckResult fun TextView .beforeTextChanges(): InitialValueFlow< BeforeTextChangeEvent > Create a InitialValueFlow of before text change events on the TextView instance. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.beforeTextChanges() .onEach { event -> // handle text view before text change event } .launchIn(uiScope)","title":"beforeTextChanges"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/editor-action-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.TextView / editorActionEvents editorActionEvents \u00b6 @CheckResult fun TextView .editorActionEvents(handled: ( EditorActionEvent ) -> Boolean = { true }): Flow< EditorActionEvent > Create a Flow of editor action events on the TextView instance. Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying TextView.OnEditorActionListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.editorActionEvents { event.actionId == EditorInfo.IME_ACTION_GO } .onEach { event -> // handle text view editor action event } .launchIn(uiScope)","title":"Editor action events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/editor-action-events/#editoractionevents","text":"@CheckResult fun TextView .editorActionEvents(handled: ( EditorActionEvent ) -> Boolean = { true }): Flow< EditorActionEvent > Create a Flow of editor action events on the TextView instance.","title":"editorActionEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/editor-action-events/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying TextView.OnEditorActionListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.editorActionEvents { event.actionId == EditorInfo.IME_ACTION_GO } .onEach { event -> // handle text view editor action event } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/text-change-events/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.TextView / textChangeEvents textChangeEvents \u00b6 @CheckResult fun TextView .textChangeEvents(): InitialValueFlow< TextChangeEvent > Create a InitialValueFlow of text change events on the TextView instance. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.textChangeEvents() .onEach { event -> // handle text view text change event } .launchIn(uiScope)","title":"Text change events"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/text-change-events/#textchangeevents","text":"@CheckResult fun TextView .textChangeEvents(): InitialValueFlow< TextChangeEvent > Create a InitialValueFlow of text change events on the TextView instance. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.textChangeEvents() .onEach { event -> // handle text view text change event } .launchIn(uiScope)","title":"textChangeEvents"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/text-changes/","text":"flowbinding-android / reactivecircus.flowbinding.android.widget / android.widget.TextView / textChanges textChanges \u00b6 @CheckResult fun TextView .textChanges(): InitialValueFlow< CharSequence > Create a InitialValueFlow of text changes on the TextView instance where the value emitted is the current text. Note: Values emitted by this flow are mutable owned by the host TextView and thus are not safe to cache or delay reading (such as by observing on a different thread). If you want to cache or delay reading the items emitted then you must map values through a function which calls String.valueOf or CharSequence.toString to create a copy. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.textChanges() .onEach { text -> // handle text } .launchIn(uiScope)","title":"Text changes"},{"location":"api/flowbinding-android/reactivecircus.flowbinding.android.widget/android.widget.-text-view/text-changes/#textchanges","text":"@CheckResult fun TextView .textChanges(): InitialValueFlow< CharSequence > Create a InitialValueFlow of text changes on the TextView instance where the value emitted is the current text. Note: Values emitted by this flow are mutable owned by the host TextView and thus are not safe to cache or delay reading (such as by observing on a different thread). If you want to cache or delay reading the items emitted then you must map values through a function which calls String.valueOf or CharSequence.toString to create a copy. Note: Created flow keeps a strong reference to the TextView instance until the coroutine that launched the flow collector is cancelled. Example of usage: textView.textChanges() .onEach { text -> // handle text } .launchIn(uiScope)","title":"textChanges"},{"location":"api/flowbinding-appcompat/","text":"flowbinding-appcompat Packages \u00b6 Name Summary reactivecircus.flowbinding.appcompat Index \u00b6 All Types","title":"flowbinding-appcompat"},{"location":"api/flowbinding-appcompat/#packages","text":"Name Summary reactivecircus.flowbinding.appcompat","title":"Packages"},{"location":"api/flowbinding-appcompat/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-appcompat/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.appcompat) androidx.appcompat.widget.ActionMenuView \u00b6 | (extensions in package reactivecircus.flowbinding.appcompat) androidx.appcompat.widget.PopupMenu \u00b6 | reactivecircus.flowbinding.appcompat.QueryTextEvent \u00b6 | (extensions in package reactivecircus.flowbinding.appcompat) androidx.appcompat.widget.SearchView \u00b6 | (extensions in package reactivecircus.flowbinding.appcompat) androidx.appcompat.widget.Toolbar \u00b6","title":"Index"},{"location":"api/flowbinding-appcompat/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.appcompat)","title":"All Types"},{"location":"api/flowbinding-appcompat/alltypes/#androidxappcompatwidgetactionmenuview","text":"| (extensions in package reactivecircus.flowbinding.appcompat)","title":"androidx.appcompat.widget.ActionMenuView"},{"location":"api/flowbinding-appcompat/alltypes/#androidxappcompatwidgetpopupmenu","text":"|","title":"androidx.appcompat.widget.PopupMenu"},{"location":"api/flowbinding-appcompat/alltypes/#reactivecircusflowbindingappcompatquerytextevent","text":"| (extensions in package reactivecircus.flowbinding.appcompat)","title":"reactivecircus.flowbinding.appcompat.QueryTextEvent"},{"location":"api/flowbinding-appcompat/alltypes/#androidxappcompatwidgetsearchview","text":"| (extensions in package reactivecircus.flowbinding.appcompat)","title":"androidx.appcompat.widget.SearchView"},{"location":"api/flowbinding-appcompat/alltypes/#androidxappcompatwidgettoolbar","text":"","title":"androidx.appcompat.widget.Toolbar"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat Package reactivecircus.flowbinding.appcompat \u00b6 Types \u00b6 Name Summary QueryTextEvent sealed class QueryTextEvent Extensions for External Classes \u00b6 Name Summary androidx.appcompat.widget.ActionMenuView androidx.appcompat.widget.PopupMenu androidx.appcompat.widget.SearchView androidx.appcompat.widget.Toolbar","title":"Index"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/#package-reactivecircusflowbindingappcompat","text":"","title":"Package reactivecircus.flowbinding.appcompat"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/#types","text":"Name Summary QueryTextEvent sealed class QueryTextEvent","title":"Types"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/#extensions-for-external-classes","text":"Name Summary androidx.appcompat.widget.ActionMenuView androidx.appcompat.widget.PopupMenu androidx.appcompat.widget.SearchView androidx.appcompat.widget.Toolbar","title":"Extensions for External Classes"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent QueryTextEvent \u00b6 sealed class QueryTextEvent Types \u00b6 Name Summary QueryChanged class QueryChanged : QueryTextEvent QuerySubmitted class QuerySubmitted : QueryTextEvent Properties \u00b6 Name Summary queryText abstract val queryText: CharSequence view abstract val view: SearchView","title":"Index"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/#querytextevent","text":"sealed class QueryTextEvent","title":"QueryTextEvent"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/#types","text":"Name Summary QueryChanged class QueryChanged : QueryTextEvent QuerySubmitted class QuerySubmitted : QueryTextEvent","title":"Types"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/#properties","text":"Name Summary queryText abstract val queryText: CharSequence view abstract val view: SearchView","title":"Properties"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/query-text/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / queryText queryText \u00b6 abstract val queryText: CharSequence","title":"Query text"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/query-text/#querytext","text":"abstract val queryText: CharSequence","title":"queryText"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/view/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / view view \u00b6 abstract val view: SearchView","title":"View"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/view/#view","text":"abstract val view: SearchView","title":"view"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / QueryChanged QueryChanged \u00b6 class QueryChanged : QueryTextEvent Constructors \u00b6 Name Summary <init> QueryChanged(view: SearchView, queryText: CharSequence ) Properties \u00b6 Name Summary queryText val queryText: CharSequence view val view: SearchView","title":"Index"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/#querychanged","text":"class QueryChanged : QueryTextEvent","title":"QueryChanged"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/#constructors","text":"Name Summary <init> QueryChanged(view: SearchView, queryText: CharSequence )","title":"Constructors"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/#properties","text":"Name Summary queryText val queryText: CharSequence view val view: SearchView","title":"Properties"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/-init-/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / QueryChanged / <init> <init> \u00b6 QueryChanged(view: SearchView, queryText: CharSequence )","title":" init "},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/-init-/#init","text":"QueryChanged(view: SearchView, queryText: CharSequence )","title":"&lt;init&gt;"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/query-text/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / QueryChanged / queryText queryText \u00b6 val queryText: CharSequence","title":"Query text"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/query-text/#querytext","text":"val queryText: CharSequence","title":"queryText"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/view/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / QueryChanged / view view \u00b6 val view: SearchView","title":"View"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-changed/view/#view","text":"val view: SearchView","title":"view"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / QuerySubmitted QuerySubmitted \u00b6 class QuerySubmitted : QueryTextEvent Constructors \u00b6 Name Summary <init> QuerySubmitted(view: SearchView, queryText: CharSequence ) Properties \u00b6 Name Summary queryText val queryText: CharSequence view val view: SearchView","title":"Index"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/#querysubmitted","text":"class QuerySubmitted : QueryTextEvent","title":"QuerySubmitted"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/#constructors","text":"Name Summary <init> QuerySubmitted(view: SearchView, queryText: CharSequence )","title":"Constructors"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/#properties","text":"Name Summary queryText val queryText: CharSequence view val view: SearchView","title":"Properties"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/-init-/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / QuerySubmitted / <init> <init> \u00b6 QuerySubmitted(view: SearchView, queryText: CharSequence )","title":" init "},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/-init-/#init","text":"QuerySubmitted(view: SearchView, queryText: CharSequence )","title":"&lt;init&gt;"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/query-text/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / QuerySubmitted / queryText queryText \u00b6 val queryText: CharSequence","title":"Query text"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/query-text/#querytext","text":"val queryText: CharSequence","title":"queryText"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/view/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / QueryTextEvent / QuerySubmitted / view view \u00b6 val view: SearchView","title":"View"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/-query-text-event/-query-submitted/view/#view","text":"val view: SearchView","title":"view"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-action-menu-view/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.ActionMenuView Extensions for androidx.appcompat.widget.ActionMenuView \u00b6 Name Summary itemClicks Create a Flow of item clicked events on the ActionMenuView instance where the value emitted is the clicked menu item. fun ActionMenuView.itemClicks(): Flow< MenuItem >","title":"Index"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-action-menu-view/#extensions-for-androidxappcompatwidgetactionmenuview","text":"Name Summary itemClicks Create a Flow of item clicked events on the ActionMenuView instance where the value emitted is the clicked menu item. fun ActionMenuView.itemClicks(): Flow< MenuItem >","title":"Extensions for androidx.appcompat.widget.ActionMenuView"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-action-menu-view/item-clicks/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.ActionMenuView / itemClicks itemClicks \u00b6 @CheckResult fun ActionMenuView.itemClicks(): Flow< MenuItem > Create a Flow of item clicked events on the ActionMenuView instance where the value emitted is the clicked menu item. Note: Created flow keeps a strong reference to the ActionMenuView instance until the coroutine that launched the flow collector is cancelled. Example of usage: actionMenuView.itemClicks() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"Item clicks"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-action-menu-view/item-clicks/#itemclicks","text":"@CheckResult fun ActionMenuView.itemClicks(): Flow< MenuItem > Create a Flow of item clicked events on the ActionMenuView instance where the value emitted is the clicked menu item. Note: Created flow keeps a strong reference to the ActionMenuView instance until the coroutine that launched the flow collector is cancelled. Example of usage: actionMenuView.itemClicks() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"itemClicks"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-popup-menu/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.PopupMenu Extensions for androidx.appcompat.widget.PopupMenu \u00b6 Name Summary dismisses Create a Flow of dismiss events on the PopupMenu instance. fun PopupMenu.dismisses(): Flow< Unit > itemClicks Create a Flow of item clicked events on the PopupMenu instance where the value emitted is the clicked menu item. fun PopupMenu.itemClicks(): Flow< MenuItem >","title":"Index"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-popup-menu/#extensions-for-androidxappcompatwidgetpopupmenu","text":"Name Summary dismisses Create a Flow of dismiss events on the PopupMenu instance. fun PopupMenu.dismisses(): Flow< Unit > itemClicks Create a Flow of item clicked events on the PopupMenu instance where the value emitted is the clicked menu item. fun PopupMenu.itemClicks(): Flow< MenuItem >","title":"Extensions for androidx.appcompat.widget.PopupMenu"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-popup-menu/dismisses/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.PopupMenu / dismisses dismisses \u00b6 @CheckResult fun PopupMenu.dismisses(): Flow< Unit > Create a Flow of dismiss events on the PopupMenu instance. Note: Created flow keeps a strong reference to the PopupMenu instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.dismisses() .onEach { // handle popup menu dismiss event } .launchIn(uiScope)","title":"Dismisses"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-popup-menu/dismisses/#dismisses","text":"@CheckResult fun PopupMenu.dismisses(): Flow< Unit > Create a Flow of dismiss events on the PopupMenu instance. Note: Created flow keeps a strong reference to the PopupMenu instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.dismisses() .onEach { // handle popup menu dismiss event } .launchIn(uiScope)","title":"dismisses"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-popup-menu/item-clicks/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.PopupMenu / itemClicks itemClicks \u00b6 @CheckResult fun PopupMenu.itemClicks(): Flow< MenuItem > Create a Flow of item clicked events on the PopupMenu instance where the value emitted is the clicked menu item. Note: Created flow keeps a strong reference to the PopupMenu instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.itemClicks() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"Item clicks"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-popup-menu/item-clicks/#itemclicks","text":"@CheckResult fun PopupMenu.itemClicks(): Flow< MenuItem > Create a Flow of item clicked events on the PopupMenu instance where the value emitted is the clicked menu item. Note: Created flow keeps a strong reference to the PopupMenu instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.itemClicks() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"itemClicks"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-search-view/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.SearchView Extensions for androidx.appcompat.widget.SearchView \u00b6 Name Summary queryTextChanges Create a InitialValueFlow of query text changes on the SearchView instance where the value emitted is latest query text. fun SearchView.queryTextChanges(): InitialValueFlow< CharSequence > queryTextEvents Create a InitialValueFlow of query text events on the SearchView instance where the value emitted is one of the 2 event types: QueryTextEvent.QueryChanged , QueryTextEvent.QuerySubmitted fun SearchView.queryTextEvents(): InitialValueFlow< QueryTextEvent >","title":"Index"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-search-view/#extensions-for-androidxappcompatwidgetsearchview","text":"Name Summary queryTextChanges Create a InitialValueFlow of query text changes on the SearchView instance where the value emitted is latest query text. fun SearchView.queryTextChanges(): InitialValueFlow< CharSequence > queryTextEvents Create a InitialValueFlow of query text events on the SearchView instance where the value emitted is one of the 2 event types: QueryTextEvent.QueryChanged , QueryTextEvent.QuerySubmitted fun SearchView.queryTextEvents(): InitialValueFlow< QueryTextEvent >","title":"Extensions for androidx.appcompat.widget.SearchView"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-search-view/query-text-changes/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.SearchView / queryTextChanges queryTextChanges \u00b6 @CheckResult fun SearchView.queryTextChanges(): InitialValueFlow< CharSequence > Create a InitialValueFlow of query text changes on the SearchView instance where the value emitted is latest query text. Note: Created flow keeps a strong reference to the SearchView instance until the coroutine that launched the flow collector is cancelled. Example of usage: searchView.queryTextChanges() .onEach { queryText -> // handle queryText } .launchIn(uiScope)","title":"Query text changes"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-search-view/query-text-changes/#querytextchanges","text":"@CheckResult fun SearchView.queryTextChanges(): InitialValueFlow< CharSequence > Create a InitialValueFlow of query text changes on the SearchView instance where the value emitted is latest query text. Note: Created flow keeps a strong reference to the SearchView instance until the coroutine that launched the flow collector is cancelled. Example of usage: searchView.queryTextChanges() .onEach { queryText -> // handle queryText } .launchIn(uiScope)","title":"queryTextChanges"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-search-view/query-text-events/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.SearchView / queryTextEvents queryTextEvents \u00b6 @CheckResult fun SearchView.queryTextEvents(): InitialValueFlow< QueryTextEvent > Create a InitialValueFlow of query text events on the SearchView instance where the value emitted is one of the 2 event types: QueryTextEvent.QueryChanged , QueryTextEvent.QuerySubmitted Note: Created flow keeps a strong reference to the SearchView instance until the coroutine that launched the flow collector is cancelled. Example of usage: searchView.queryTextEvents() .onEach { queryTextEvent -> // handle search view query text cha } .launchIn(uiScope)","title":"Query text events"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-search-view/query-text-events/#querytextevents","text":"@CheckResult fun SearchView.queryTextEvents(): InitialValueFlow< QueryTextEvent > Create a InitialValueFlow of query text events on the SearchView instance where the value emitted is one of the 2 event types: QueryTextEvent.QueryChanged , QueryTextEvent.QuerySubmitted Note: Created flow keeps a strong reference to the SearchView instance until the coroutine that launched the flow collector is cancelled. Example of usage: searchView.queryTextEvents() .onEach { queryTextEvent -> // handle search view query text cha } .launchIn(uiScope)","title":"queryTextEvents"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-toolbar/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.Toolbar Extensions for androidx.appcompat.widget.Toolbar \u00b6 Name Summary itemClicks Create a Flow of item clicked events on the Toolbar instance where the value emitted is the clicked menu item. fun Toolbar.itemClicks(): Flow< MenuItem > navigationClicks Create a Flow of navigation click events on the Toolbar instance. fun Toolbar.navigationClicks(): Flow< Unit >","title":"Index"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-toolbar/#extensions-for-androidxappcompatwidgettoolbar","text":"Name Summary itemClicks Create a Flow of item clicked events on the Toolbar instance where the value emitted is the clicked menu item. fun Toolbar.itemClicks(): Flow< MenuItem > navigationClicks Create a Flow of navigation click events on the Toolbar instance. fun Toolbar.navigationClicks(): Flow< Unit >","title":"Extensions for androidx.appcompat.widget.Toolbar"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-toolbar/item-clicks/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.Toolbar / itemClicks itemClicks \u00b6 @CheckResult fun Toolbar.itemClicks(): Flow< MenuItem > Create a Flow of item clicked events on the Toolbar instance where the value emitted is the clicked menu item. Note: Created flow keeps a strong reference to the Toolbar instance until the coroutine that launched the flow collector is cancelled. Example of usage: toolbar.itemClicks() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"Item clicks"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-toolbar/item-clicks/#itemclicks","text":"@CheckResult fun Toolbar.itemClicks(): Flow< MenuItem > Create a Flow of item clicked events on the Toolbar instance where the value emitted is the clicked menu item. Note: Created flow keeps a strong reference to the Toolbar instance until the coroutine that launched the flow collector is cancelled. Example of usage: toolbar.itemClicks() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"itemClicks"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-toolbar/navigation-clicks/","text":"flowbinding-appcompat / reactivecircus.flowbinding.appcompat / androidx.appcompat.widget.Toolbar / navigationClicks navigationClicks \u00b6 @CheckResult fun Toolbar.navigationClicks(): Flow< Unit > Create a Flow of navigation click events on the Toolbar instance. Note: Created flow keeps a strong reference to the Toolbar instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.dismisses() .onEach { // handle toolbar navigation click event } .launchIn(uiScope)","title":"Navigation clicks"},{"location":"api/flowbinding-appcompat/reactivecircus.flowbinding.appcompat/androidx.appcompat.widget.-toolbar/navigation-clicks/#navigationclicks","text":"@CheckResult fun Toolbar.navigationClicks(): Flow< Unit > Create a Flow of navigation click events on the Toolbar instance. Note: Created flow keeps a strong reference to the Toolbar instance until the coroutine that launched the flow collector is cancelled. Example of usage: popupMenu.dismisses() .onEach { // handle toolbar navigation click event } .launchIn(uiScope)","title":"navigationClicks"},{"location":"api/flowbinding-common/","text":"flowbinding-common Packages \u00b6 Name Summary reactivecircus.flowbinding.common Index \u00b6 All Types","title":"flowbinding-common"},{"location":"api/flowbinding-common/#packages","text":"Name Summary reactivecircus.flowbinding.common","title":"Packages"},{"location":"api/flowbinding-common/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-common/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.common) kotlinx.coroutines.flow.Flow \u00b6 | reactivecircus.flowbinding.common.InitialValueFlow \u00b6 A Flow implementation that emits the current value of a widget immediately upon collection. | (extensions in package reactivecircus.flowbinding.common) kotlinx.coroutines.channels.SendChannel \u00b6","title":"Index"},{"location":"api/flowbinding-common/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.common)","title":"All Types"},{"location":"api/flowbinding-common/alltypes/#kotlinxcoroutinesflowflow","text":"|","title":"kotlinx.coroutines.flow.Flow"},{"location":"api/flowbinding-common/alltypes/#reactivecircusflowbindingcommoninitialvalueflow","text":"A Flow implementation that emits the current value of a widget immediately upon collection. | (extensions in package reactivecircus.flowbinding.common)","title":"reactivecircus.flowbinding.common.InitialValueFlow"},{"location":"api/flowbinding-common/alltypes/#kotlinxcoroutineschannelssendchannel","text":"","title":"kotlinx.coroutines.channels.SendChannel"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/","text":"flowbinding-common / reactivecircus.flowbinding.common Package reactivecircus.flowbinding.common \u00b6 Types \u00b6 Name Summary InitialValueFlow A Flow implementation that emits the current value of a widget immediately upon collection. class InitialValueFlow<T : Any > : Flow<T> Extensions for External Classes \u00b6 Name Summary kotlinx.coroutines.channels.SendChannel kotlinx.coroutines.flow.Flow Functions \u00b6 Name Summary checkMainThread fun checkMainThread(): Unit","title":"Index"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/#package-reactivecircusflowbindingcommon","text":"","title":"Package reactivecircus.flowbinding.common"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/#types","text":"Name Summary InitialValueFlow A Flow implementation that emits the current value of a widget immediately upon collection. class InitialValueFlow<T : Any > : Flow<T>","title":"Types"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/#extensions-for-external-classes","text":"Name Summary kotlinx.coroutines.channels.SendChannel kotlinx.coroutines.flow.Flow","title":"Extensions for External Classes"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/#functions","text":"Name Summary checkMainThread fun checkMainThread(): Unit","title":"Functions"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/check-main-thread/","text":"flowbinding-common / reactivecircus.flowbinding.common / checkMainThread checkMainThread \u00b6 fun checkMainThread(): Unit","title":"Check main thread"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/check-main-thread/#checkmainthread","text":"fun checkMainThread(): Unit","title":"checkMainThread"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/-initial-value-flow/","text":"flowbinding-common / reactivecircus.flowbinding.common / InitialValueFlow InitialValueFlow \u00b6 class InitialValueFlow<T : Any > : Flow<T> A Flow implementation that emits the current value of a widget immediately upon collection. Constructors \u00b6 Name Summary <init> A Flow implementation that emits the current value of a widget immediately upon collection. InitialValueFlow(flow: Flow<T>) Functions \u00b6 Name Summary skipInitialValue Returns a Flow that skips the initial emission of the current value. fun skipInitialValue(): Flow<T>","title":"Index"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/-initial-value-flow/#initialvalueflow","text":"class InitialValueFlow<T : Any > : Flow<T> A Flow implementation that emits the current value of a widget immediately upon collection.","title":"InitialValueFlow"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/-initial-value-flow/#constructors","text":"Name Summary <init> A Flow implementation that emits the current value of a widget immediately upon collection. InitialValueFlow(flow: Flow<T>)","title":"Constructors"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/-initial-value-flow/#functions","text":"Name Summary skipInitialValue Returns a Flow that skips the initial emission of the current value. fun skipInitialValue(): Flow<T>","title":"Functions"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/-initial-value-flow/-init-/","text":"flowbinding-common / reactivecircus.flowbinding.common / InitialValueFlow / <init> <init> \u00b6 InitialValueFlow(flow: Flow<T>) A Flow implementation that emits the current value of a widget immediately upon collection.","title":" init "},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/-initial-value-flow/-init-/#init","text":"InitialValueFlow(flow: Flow<T>) A Flow implementation that emits the current value of a widget immediately upon collection.","title":"&lt;init&gt;"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/-initial-value-flow/skip-initial-value/","text":"flowbinding-common / reactivecircus.flowbinding.common / InitialValueFlow / skipInitialValue skipInitialValue \u00b6 fun skipInitialValue(): Flow<T> Returns a Flow that skips the initial emission of the current value.","title":"Skip initial value"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/-initial-value-flow/skip-initial-value/#skipinitialvalue","text":"fun skipInitialValue(): Flow<T> Returns a Flow that skips the initial emission of the current value.","title":"skipInitialValue"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/kotlinx.coroutines.channels.-send-channel/","text":"flowbinding-common / reactivecircus.flowbinding.common / kotlinx.coroutines.channels.SendChannel Extensions for kotlinx.coroutines.channels.SendChannel \u00b6 Name Summary safeOffer fun <E> SendChannel<E>.safeOffer(value: E): Boolean","title":"Index"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/kotlinx.coroutines.channels.-send-channel/#extensions-for-kotlinxcoroutineschannelssendchannel","text":"Name Summary safeOffer fun <E> SendChannel<E>.safeOffer(value: E): Boolean","title":"Extensions for kotlinx.coroutines.channels.SendChannel"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/kotlinx.coroutines.channels.-send-channel/safe-offer/","text":"flowbinding-common / reactivecircus.flowbinding.common / kotlinx.coroutines.channels.SendChannel / safeOffer safeOffer \u00b6 fun <E> SendChannel<E>.safeOffer(value: E): Boolean","title":"Safe offer"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/kotlinx.coroutines.channels.-send-channel/safe-offer/#safeoffer","text":"fun <E> SendChannel<E>.safeOffer(value: E): Boolean","title":"safeOffer"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/kotlinx.coroutines.flow.-flow/","text":"flowbinding-common / reactivecircus.flowbinding.common / kotlinx.coroutines.flow.Flow Extensions for kotlinx.coroutines.flow.Flow \u00b6 Name Summary asInitialValueFlow Converts a Flow to an InitialValueFlow , taking an initialValue lambda for computing the initial value. fun <T : Any > Flow<T>.asInitialValueFlow(initialValue: () -> T): InitialValueFlow <T>","title":"Index"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/kotlinx.coroutines.flow.-flow/#extensions-for-kotlinxcoroutinesflowflow","text":"Name Summary asInitialValueFlow Converts a Flow to an InitialValueFlow , taking an initialValue lambda for computing the initial value. fun <T : Any > Flow<T>.asInitialValueFlow(initialValue: () -> T): InitialValueFlow <T>","title":"Extensions for kotlinx.coroutines.flow.Flow"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/kotlinx.coroutines.flow.-flow/as-initial-value-flow/","text":"flowbinding-common / reactivecircus.flowbinding.common / kotlinx.coroutines.flow.Flow / asInitialValueFlow asInitialValueFlow \u00b6 fun <T : Any > Flow<T>.asInitialValueFlow(initialValue: () -> T): InitialValueFlow <T> Converts a Flow to an InitialValueFlow , taking an initialValue lambda for computing the initial value.","title":"As initial value flow"},{"location":"api/flowbinding-common/reactivecircus.flowbinding.common/kotlinx.coroutines.flow.-flow/as-initial-value-flow/#asinitialvalueflow","text":"fun <T : Any > Flow<T>.asInitialValueFlow(initialValue: () -> T): InitialValueFlow <T> Converts a Flow to an InitialValueFlow , taking an initialValue lambda for computing the initial value.","title":"asInitialValueFlow"},{"location":"api/flowbinding-core/","text":"flowbinding-core Packages \u00b6 Name Summary reactivecircus.flowbinding.core Index \u00b6 All Types","title":"flowbinding-core"},{"location":"api/flowbinding-core/#packages","text":"Name Summary reactivecircus.flowbinding.core","title":"Packages"},{"location":"api/flowbinding-core/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-core/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.core) androidx.core.widget.NestedScrollView \u00b6 | reactivecircus.flowbinding.core.ScrollChangeEvent \u00b6","title":"Index"},{"location":"api/flowbinding-core/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.core)","title":"All Types"},{"location":"api/flowbinding-core/alltypes/#androidxcorewidgetnestedscrollview","text":"|","title":"androidx.core.widget.NestedScrollView"},{"location":"api/flowbinding-core/alltypes/#reactivecircusflowbindingcorescrollchangeevent","text":"","title":"reactivecircus.flowbinding.core.ScrollChangeEvent"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/","text":"flowbinding-core / reactivecircus.flowbinding.core Package reactivecircus.flowbinding.core \u00b6 Types \u00b6 Name Summary ScrollChangeEvent class ScrollChangeEvent Extensions for External Classes \u00b6 Name Summary androidx.core.widget.NestedScrollView","title":"Index"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/#package-reactivecircusflowbindingcore","text":"","title":"Package reactivecircus.flowbinding.core"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/#types","text":"Name Summary ScrollChangeEvent class ScrollChangeEvent","title":"Types"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/#extensions-for-external-classes","text":"Name Summary androidx.core.widget.NestedScrollView","title":"Extensions for External Classes"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/","text":"flowbinding-core / reactivecircus.flowbinding.core / ScrollChangeEvent ScrollChangeEvent \u00b6 class ScrollChangeEvent Constructors \u00b6 Name Summary <init> ScrollChangeEvent(view: View , scrollX: Int , scrollY: Int , oldScrollX: Int , oldScrollY: Int ) Properties \u00b6 Name Summary oldScrollX val oldScrollX: Int oldScrollY val oldScrollY: Int scrollX val scrollX: Int scrollY val scrollY: Int view val view: View","title":"Index"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/#scrollchangeevent","text":"class ScrollChangeEvent","title":"ScrollChangeEvent"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/#constructors","text":"Name Summary <init> ScrollChangeEvent(view: View , scrollX: Int , scrollY: Int , oldScrollX: Int , oldScrollY: Int )","title":"Constructors"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/#properties","text":"Name Summary oldScrollX val oldScrollX: Int oldScrollY val oldScrollY: Int scrollX val scrollX: Int scrollY val scrollY: Int view val view: View","title":"Properties"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/-init-/","text":"flowbinding-core / reactivecircus.flowbinding.core / ScrollChangeEvent / <init> <init> \u00b6 ScrollChangeEvent(view: View , scrollX: Int , scrollY: Int , oldScrollX: Int , oldScrollY: Int )","title":" init "},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/-init-/#init","text":"ScrollChangeEvent(view: View , scrollX: Int , scrollY: Int , oldScrollX: Int , oldScrollY: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/old-scroll-x/","text":"flowbinding-core / reactivecircus.flowbinding.core / ScrollChangeEvent / oldScrollX oldScrollX \u00b6 val oldScrollX: Int","title":"Old scroll x"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/old-scroll-x/#oldscrollx","text":"val oldScrollX: Int","title":"oldScrollX"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/old-scroll-y/","text":"flowbinding-core / reactivecircus.flowbinding.core / ScrollChangeEvent / oldScrollY oldScrollY \u00b6 val oldScrollY: Int","title":"Old scroll y"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/old-scroll-y/#oldscrolly","text":"val oldScrollY: Int","title":"oldScrollY"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/scroll-x/","text":"flowbinding-core / reactivecircus.flowbinding.core / ScrollChangeEvent / scrollX scrollX \u00b6 val scrollX: Int","title":"Scroll x"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/scroll-x/#scrollx","text":"val scrollX: Int","title":"scrollX"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/scroll-y/","text":"flowbinding-core / reactivecircus.flowbinding.core / ScrollChangeEvent / scrollY scrollY \u00b6 val scrollY: Int","title":"Scroll y"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/scroll-y/#scrolly","text":"val scrollY: Int","title":"scrollY"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/view/","text":"flowbinding-core / reactivecircus.flowbinding.core / ScrollChangeEvent / view view \u00b6 val view: View","title":"View"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/-scroll-change-event/view/#view","text":"val view: View","title":"view"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/androidx.core.widget.-nested-scroll-view/","text":"flowbinding-core / reactivecircus.flowbinding.core / androidx.core.widget.NestedScrollView Extensions for androidx.core.widget.NestedScrollView \u00b6 Name Summary scrollChangeEvents Create a Flow of scroll change events on the NestedScrollView instance. fun NestedScrollView.scrollChangeEvents(): Flow< ScrollChangeEvent >","title":"Index"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/androidx.core.widget.-nested-scroll-view/#extensions-for-androidxcorewidgetnestedscrollview","text":"Name Summary scrollChangeEvents Create a Flow of scroll change events on the NestedScrollView instance. fun NestedScrollView.scrollChangeEvents(): Flow< ScrollChangeEvent >","title":"Extensions for androidx.core.widget.NestedScrollView"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/androidx.core.widget.-nested-scroll-view/scroll-change-events/","text":"flowbinding-core / reactivecircus.flowbinding.core / androidx.core.widget.NestedScrollView / scrollChangeEvents scrollChangeEvents \u00b6 @CheckResult fun NestedScrollView.scrollChangeEvents(): Flow< ScrollChangeEvent > Create a Flow of scroll change events on the NestedScrollView instance. Note: Created flow keeps a strong reference to the NestedScrollView instance until the coroutine that launched the flow collector is cancelled. Example of usage: nestedScrollView.scrollChangeEvents() .onEach { event -> // handle scroll change event } .launchIn(uiScope)","title":"Scroll change events"},{"location":"api/flowbinding-core/reactivecircus.flowbinding.core/androidx.core.widget.-nested-scroll-view/scroll-change-events/#scrollchangeevents","text":"@CheckResult fun NestedScrollView.scrollChangeEvents(): Flow< ScrollChangeEvent > Create a Flow of scroll change events on the NestedScrollView instance. Note: Created flow keeps a strong reference to the NestedScrollView instance until the coroutine that launched the flow collector is cancelled. Example of usage: nestedScrollView.scrollChangeEvents() .onEach { event -> // handle scroll change event } .launchIn(uiScope)","title":"scrollChangeEvents"},{"location":"api/flowbinding-drawerlayout/","text":"flowbinding-drawerlayout Packages \u00b6 Name Summary reactivecircus.flowbinding.drawerlayout Index \u00b6 All Types","title":"flowbinding-drawerlayout"},{"location":"api/flowbinding-drawerlayout/#packages","text":"Name Summary reactivecircus.flowbinding.drawerlayout","title":"Packages"},{"location":"api/flowbinding-drawerlayout/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-drawerlayout/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.drawerlayout) androidx.drawerlayout.widget.DrawerLayout \u00b6","title":"Index"},{"location":"api/flowbinding-drawerlayout/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.drawerlayout)","title":"All Types"},{"location":"api/flowbinding-drawerlayout/alltypes/#androidxdrawerlayoutwidgetdrawerlayout","text":"","title":"androidx.drawerlayout.widget.DrawerLayout"},{"location":"api/flowbinding-drawerlayout/reactivecircus.flowbinding.drawerlayout/","text":"flowbinding-drawerlayout / reactivecircus.flowbinding.drawerlayout Package reactivecircus.flowbinding.drawerlayout \u00b6 Extensions for External Classes \u00b6 Name Summary androidx.drawerlayout.widget.DrawerLayout","title":"Index"},{"location":"api/flowbinding-drawerlayout/reactivecircus.flowbinding.drawerlayout/#package-reactivecircusflowbindingdrawerlayout","text":"","title":"Package reactivecircus.flowbinding.drawerlayout"},{"location":"api/flowbinding-drawerlayout/reactivecircus.flowbinding.drawerlayout/#extensions-for-external-classes","text":"Name Summary androidx.drawerlayout.widget.DrawerLayout","title":"Extensions for External Classes"},{"location":"api/flowbinding-drawerlayout/reactivecircus.flowbinding.drawerlayout/androidx.drawerlayout.widget.-drawer-layout/","text":"flowbinding-drawerlayout / reactivecircus.flowbinding.drawerlayout / androidx.drawerlayout.widget.DrawerLayout Extensions for androidx.drawerlayout.widget.DrawerLayout \u00b6 Name Summary drawerStateChanges Create a InitialValueFlow of drawer state change events on the DrawerLayout instance where the value emitted is a boolean representing whether the drawer is opened or closed. fun DrawerLayout.drawerStateChanges(gravity: Int ): InitialValueFlow< Boolean >","title":"Index"},{"location":"api/flowbinding-drawerlayout/reactivecircus.flowbinding.drawerlayout/androidx.drawerlayout.widget.-drawer-layout/#extensions-for-androidxdrawerlayoutwidgetdrawerlayout","text":"Name Summary drawerStateChanges Create a InitialValueFlow of drawer state change events on the DrawerLayout instance where the value emitted is a boolean representing whether the drawer is opened or closed. fun DrawerLayout.drawerStateChanges(gravity: Int ): InitialValueFlow< Boolean >","title":"Extensions for androidx.drawerlayout.widget.DrawerLayout"},{"location":"api/flowbinding-drawerlayout/reactivecircus.flowbinding.drawerlayout/androidx.drawerlayout.widget.-drawer-layout/drawer-state-changes/","text":"flowbinding-drawerlayout / reactivecircus.flowbinding.drawerlayout / androidx.drawerlayout.widget.DrawerLayout / drawerStateChanges drawerStateChanges \u00b6 @CheckResult fun DrawerLayout.drawerStateChanges(gravity: Int ): InitialValueFlow< Boolean > Create a InitialValueFlow of drawer state change events on the DrawerLayout instance where the value emitted is a boolean representing whether the drawer is opened or closed. Parameters \u00b6 gravity - the gravity of the DrawerLayout to observer. Note: Created flow keeps a strong reference to the DrawerLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: drawerLayout.drawerStateChanges() .onEach { sate -> // handle drawer opened / closed } .launchIn(uiScope)","title":"Drawer state changes"},{"location":"api/flowbinding-drawerlayout/reactivecircus.flowbinding.drawerlayout/androidx.drawerlayout.widget.-drawer-layout/drawer-state-changes/#drawerstatechanges","text":"@CheckResult fun DrawerLayout.drawerStateChanges(gravity: Int ): InitialValueFlow< Boolean > Create a InitialValueFlow of drawer state change events on the DrawerLayout instance where the value emitted is a boolean representing whether the drawer is opened or closed.","title":"drawerStateChanges"},{"location":"api/flowbinding-drawerlayout/reactivecircus.flowbinding.drawerlayout/androidx.drawerlayout.widget.-drawer-layout/drawer-state-changes/#parameters","text":"gravity - the gravity of the DrawerLayout to observer. Note: Created flow keeps a strong reference to the DrawerLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: drawerLayout.drawerStateChanges() .onEach { sate -> // handle drawer opened / closed } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-lifecycle/","text":"flowbinding-lifecycle Packages \u00b6 Name Summary reactivecircus.flowbinding.lifecycle Index \u00b6 All Types","title":"flowbinding-lifecycle"},{"location":"api/flowbinding-lifecycle/#packages","text":"Name Summary reactivecircus.flowbinding.lifecycle","title":"Packages"},{"location":"api/flowbinding-lifecycle/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-lifecycle/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.lifecycle) androidx.lifecycle.Lifecycle \u00b6","title":"Index"},{"location":"api/flowbinding-lifecycle/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.lifecycle)","title":"All Types"},{"location":"api/flowbinding-lifecycle/alltypes/#androidxlifecyclelifecycle","text":"","title":"androidx.lifecycle.Lifecycle"},{"location":"api/flowbinding-lifecycle/reactivecircus.flowbinding.lifecycle/","text":"flowbinding-lifecycle / reactivecircus.flowbinding.lifecycle Package reactivecircus.flowbinding.lifecycle \u00b6 Extensions for External Classes \u00b6 Name Summary androidx.lifecycle.Lifecycle","title":"Index"},{"location":"api/flowbinding-lifecycle/reactivecircus.flowbinding.lifecycle/#package-reactivecircusflowbindinglifecycle","text":"","title":"Package reactivecircus.flowbinding.lifecycle"},{"location":"api/flowbinding-lifecycle/reactivecircus.flowbinding.lifecycle/#extensions-for-external-classes","text":"Name Summary androidx.lifecycle.Lifecycle","title":"Extensions for External Classes"},{"location":"api/flowbinding-lifecycle/reactivecircus.flowbinding.lifecycle/androidx.lifecycle.-lifecycle/","text":"flowbinding-lifecycle / reactivecircus.flowbinding.lifecycle / androidx.lifecycle.Lifecycle Extensions for androidx.lifecycle.Lifecycle \u00b6 Name Summary events Create a Flow of Lifecycle.Event s on the Lifecycle instance. fun Lifecycle.events(): Flow<Event>","title":"Index"},{"location":"api/flowbinding-lifecycle/reactivecircus.flowbinding.lifecycle/androidx.lifecycle.-lifecycle/#extensions-for-androidxlifecyclelifecycle","text":"Name Summary events Create a Flow of Lifecycle.Event s on the Lifecycle instance. fun Lifecycle.events(): Flow<Event>","title":"Extensions for androidx.lifecycle.Lifecycle"},{"location":"api/flowbinding-lifecycle/reactivecircus.flowbinding.lifecycle/androidx.lifecycle.-lifecycle/events/","text":"flowbinding-lifecycle / reactivecircus.flowbinding.lifecycle / androidx.lifecycle.Lifecycle / events events \u00b6 @CheckResult fun Lifecycle.events(): Flow<Event> Create a Flow of Lifecycle.Event s on the Lifecycle instance. Note: Created flow keeps a strong reference to the Lifecycle instance until the coroutine that launched the flow collector is cancelled. Example of usage: lifecycle.events() .filter { it == Lifecycle.Event.ON_CREATE } .onEach { event -> // handle Lifecycle.Event.ON_CREATE event } .launchIn(uiScope)","title":"Events"},{"location":"api/flowbinding-lifecycle/reactivecircus.flowbinding.lifecycle/androidx.lifecycle.-lifecycle/events/#events","text":"@CheckResult fun Lifecycle.events(): Flow<Event> Create a Flow of Lifecycle.Event s on the Lifecycle instance. Note: Created flow keeps a strong reference to the Lifecycle instance until the coroutine that launched the flow collector is cancelled. Example of usage: lifecycle.events() .filter { it == Lifecycle.Event.ON_CREATE } .onEach { event -> // handle Lifecycle.Event.ON_CREATE event } .launchIn(uiScope)","title":"events"},{"location":"api/flowbinding-material/","text":"flowbinding-material Packages \u00b6 Name Summary reactivecircus.flowbinding.material Index \u00b6 All Types","title":"flowbinding-material"},{"location":"api/flowbinding-material/#packages","text":"Name Summary reactivecircus.flowbinding.material","title":"Packages"},{"location":"api/flowbinding-material/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-material/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.material) com.google.android.material.appbar.AppBarLayout \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.bottomnavigation.BottomNavigationView \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.chip.Chip \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.chip.ChipGroup \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.button.MaterialButton \u00b6 | reactivecircus.flowbinding.material.MaterialButtonCheckedChangedEvent \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.button.MaterialButtonToggleGroup \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.card.MaterialCardView \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.datepicker.MaterialDatePicker \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.navigation.NavigationView \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.slider.RangeSlider \u00b6 | reactivecircus.flowbinding.material.RangeSliderChangeEvent \u00b6 | reactivecircus.flowbinding.material.RangeSliderTouchEvent \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.slider.Slider \u00b6 | reactivecircus.flowbinding.material.SliderChangeEvent \u00b6 | reactivecircus.flowbinding.material.SliderTouchEvent \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.snackbar.Snackbar \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.tabs.TabLayout \u00b6 | reactivecircus.flowbinding.material.TabLayoutSelectionEvent \u00b6 | (extensions in package reactivecircus.flowbinding.material) com.google.android.material.textfield.TextInputLayout \u00b6 | (extensions in package reactivecircus.flowbinding.material) android.view.View \u00b6","title":"Index"},{"location":"api/flowbinding-material/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.material)","title":"All Types"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialappbarappbarlayout","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.appbar.AppBarLayout"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialbottomnavigationbottomnavigationview","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.bottomnavigation.BottomNavigationView"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialchipchip","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.chip.Chip"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialchipchipgroup","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.chip.ChipGroup"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialbuttonmaterialbutton","text":"|","title":"com.google.android.material.button.MaterialButton"},{"location":"api/flowbinding-material/alltypes/#reactivecircusflowbindingmaterialmaterialbuttoncheckedchangedevent","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"reactivecircus.flowbinding.material.MaterialButtonCheckedChangedEvent"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialbuttonmaterialbuttontogglegroup","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.button.MaterialButtonToggleGroup"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialcardmaterialcardview","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.card.MaterialCardView"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialdatepickermaterialdatepicker","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.datepicker.MaterialDatePicker"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialnavigationnavigationview","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.navigation.NavigationView"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialsliderrangeslider","text":"|","title":"com.google.android.material.slider.RangeSlider"},{"location":"api/flowbinding-material/alltypes/#reactivecircusflowbindingmaterialrangesliderchangeevent","text":"|","title":"reactivecircus.flowbinding.material.RangeSliderChangeEvent"},{"location":"api/flowbinding-material/alltypes/#reactivecircusflowbindingmaterialrangeslidertouchevent","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"reactivecircus.flowbinding.material.RangeSliderTouchEvent"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialsliderslider","text":"|","title":"com.google.android.material.slider.Slider"},{"location":"api/flowbinding-material/alltypes/#reactivecircusflowbindingmaterialsliderchangeevent","text":"|","title":"reactivecircus.flowbinding.material.SliderChangeEvent"},{"location":"api/flowbinding-material/alltypes/#reactivecircusflowbindingmaterialslidertouchevent","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"reactivecircus.flowbinding.material.SliderTouchEvent"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialsnackbarsnackbar","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.snackbar.Snackbar"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialtabstablayout","text":"|","title":"com.google.android.material.tabs.TabLayout"},{"location":"api/flowbinding-material/alltypes/#reactivecircusflowbindingmaterialtablayoutselectionevent","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"reactivecircus.flowbinding.material.TabLayoutSelectionEvent"},{"location":"api/flowbinding-material/alltypes/#comgoogleandroidmaterialtextfieldtextinputlayout","text":"| (extensions in package reactivecircus.flowbinding.material)","title":"com.google.android.material.textfield.TextInputLayout"},{"location":"api/flowbinding-material/alltypes/#androidviewview","text":"","title":"android.view.View"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/","text":"flowbinding-material / reactivecircus.flowbinding.material Package reactivecircus.flowbinding.material \u00b6 Types \u00b6 Name Summary MaterialButtonCheckedChangedEvent class MaterialButtonCheckedChangedEvent RangeSliderChangeEvent class RangeSliderChangeEvent RangeSliderTouchEvent sealed class RangeSliderTouchEvent SliderChangeEvent class SliderChangeEvent SliderTouchEvent sealed class SliderTouchEvent TabLayoutSelectionEvent sealed class TabLayoutSelectionEvent Extensions for External Classes \u00b6 Name Summary android.view.View com.google.android.material.appbar.AppBarLayout com.google.android.material.bottomnavigation.BottomNavigationView com.google.android.material.button.MaterialButton com.google.android.material.button.MaterialButtonToggleGroup com.google.android.material.card.MaterialCardView com.google.android.material.chip.Chip com.google.android.material.chip.ChipGroup com.google.android.material.datepicker.MaterialDatePicker com.google.android.material.navigation.NavigationView com.google.android.material.slider.RangeSlider com.google.android.material.slider.Slider com.google.android.material.snackbar.Snackbar com.google.android.material.tabs.TabLayout com.google.android.material.textfield.TextInputLayout","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/#package-reactivecircusflowbindingmaterial","text":"","title":"Package reactivecircus.flowbinding.material"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/#types","text":"Name Summary MaterialButtonCheckedChangedEvent class MaterialButtonCheckedChangedEvent RangeSliderChangeEvent class RangeSliderChangeEvent RangeSliderTouchEvent sealed class RangeSliderTouchEvent SliderChangeEvent class SliderChangeEvent SliderTouchEvent sealed class SliderTouchEvent TabLayoutSelectionEvent sealed class TabLayoutSelectionEvent","title":"Types"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/#extensions-for-external-classes","text":"Name Summary android.view.View com.google.android.material.appbar.AppBarLayout com.google.android.material.bottomnavigation.BottomNavigationView com.google.android.material.button.MaterialButton com.google.android.material.button.MaterialButtonToggleGroup com.google.android.material.card.MaterialCardView com.google.android.material.chip.Chip com.google.android.material.chip.ChipGroup com.google.android.material.datepicker.MaterialDatePicker com.google.android.material.navigation.NavigationView com.google.android.material.slider.RangeSlider com.google.android.material.slider.Slider com.google.android.material.snackbar.Snackbar com.google.android.material.tabs.TabLayout com.google.android.material.textfield.TextInputLayout","title":"Extensions for External Classes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/","text":"flowbinding-material / reactivecircus.flowbinding.material / MaterialButtonCheckedChangedEvent MaterialButtonCheckedChangedEvent \u00b6 class MaterialButtonCheckedChangedEvent Constructors \u00b6 Name Summary <init> MaterialButtonCheckedChangedEvent(checkedId: Int , checked: Boolean ) Properties \u00b6 Name Summary checked val checked: Boolean checkedId val checkedId: Int","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/#materialbuttoncheckedchangedevent","text":"class MaterialButtonCheckedChangedEvent","title":"MaterialButtonCheckedChangedEvent"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/#constructors","text":"Name Summary <init> MaterialButtonCheckedChangedEvent(checkedId: Int , checked: Boolean )","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/#properties","text":"Name Summary checked val checked: Boolean checkedId val checkedId: Int","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / MaterialButtonCheckedChangedEvent / <init> <init> \u00b6 MaterialButtonCheckedChangedEvent(@IdRes checkedId: Int , checked: Boolean )","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/-init-/#init","text":"MaterialButtonCheckedChangedEvent(@IdRes checkedId: Int , checked: Boolean )","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/checked-id/","text":"flowbinding-material / reactivecircus.flowbinding.material / MaterialButtonCheckedChangedEvent / checkedId checkedId \u00b6 val checkedId: Int","title":"Checked id"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/checked-id/#checkedid","text":"val checkedId: Int","title":"checkedId"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/checked/","text":"flowbinding-material / reactivecircus.flowbinding.material / MaterialButtonCheckedChangedEvent / checked checked \u00b6 val checked: Boolean","title":"Checked"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-material-button-checked-changed-event/checked/#checked","text":"val checked: Boolean","title":"checked"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderChangeEvent RangeSliderChangeEvent \u00b6 class RangeSliderChangeEvent Constructors \u00b6 Name Summary <init> RangeSliderChangeEvent(rangeSlider: RangeSlider, values: List < Float >, fromUser: Boolean ) Properties \u00b6 Name Summary fromUser val fromUser: Boolean rangeSlider val rangeSlider: RangeSlider values val values: List < Float >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/#rangesliderchangeevent","text":"class RangeSliderChangeEvent","title":"RangeSliderChangeEvent"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/#constructors","text":"Name Summary <init> RangeSliderChangeEvent(rangeSlider: RangeSlider, values: List < Float >, fromUser: Boolean )","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/#properties","text":"Name Summary fromUser val fromUser: Boolean rangeSlider val rangeSlider: RangeSlider values val values: List < Float >","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderChangeEvent / <init> <init> \u00b6 RangeSliderChangeEvent(rangeSlider: RangeSlider, values: List < Float >, fromUser: Boolean )","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/-init-/#init","text":"RangeSliderChangeEvent(rangeSlider: RangeSlider, values: List < Float >, fromUser: Boolean )","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/from-user/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderChangeEvent / fromUser fromUser \u00b6 val fromUser: Boolean","title":"From user"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/from-user/#fromuser","text":"val fromUser: Boolean","title":"fromUser"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/range-slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderChangeEvent / rangeSlider rangeSlider \u00b6 val rangeSlider: RangeSlider","title":"Range slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/range-slider/#rangeslider","text":"val rangeSlider: RangeSlider","title":"rangeSlider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/values/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderChangeEvent / values values \u00b6 val values: List < Float >","title":"Values"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-change-event/values/#values","text":"val values: List < Float >","title":"values"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderTouchEvent RangeSliderTouchEvent \u00b6 sealed class RangeSliderTouchEvent Types \u00b6 Name Summary StartTracking class StartTracking : RangeSliderTouchEvent StopTracking class StopTracking : RangeSliderTouchEvent Properties \u00b6 Name Summary rangeSlider abstract val rangeSlider: RangeSlider","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/#rangeslidertouchevent","text":"sealed class RangeSliderTouchEvent","title":"RangeSliderTouchEvent"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/#types","text":"Name Summary StartTracking class StartTracking : RangeSliderTouchEvent StopTracking class StopTracking : RangeSliderTouchEvent","title":"Types"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/#properties","text":"Name Summary rangeSlider abstract val rangeSlider: RangeSlider","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/range-slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderTouchEvent / rangeSlider rangeSlider \u00b6 abstract val rangeSlider: RangeSlider","title":"Range slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/range-slider/#rangeslider","text":"abstract val rangeSlider: RangeSlider","title":"rangeSlider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-start-tracking/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderTouchEvent / StartTracking StartTracking \u00b6 class StartTracking : RangeSliderTouchEvent Constructors \u00b6 Name Summary <init> StartTracking(rangeSlider: RangeSlider) Properties \u00b6 Name Summary rangeSlider val rangeSlider: RangeSlider","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-start-tracking/#starttracking","text":"class StartTracking : RangeSliderTouchEvent","title":"StartTracking"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-start-tracking/#constructors","text":"Name Summary <init> StartTracking(rangeSlider: RangeSlider)","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-start-tracking/#properties","text":"Name Summary rangeSlider val rangeSlider: RangeSlider","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-start-tracking/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderTouchEvent / StartTracking / <init> <init> \u00b6 StartTracking(rangeSlider: RangeSlider)","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-start-tracking/-init-/#init","text":"StartTracking(rangeSlider: RangeSlider)","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-start-tracking/range-slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderTouchEvent / StartTracking / rangeSlider rangeSlider \u00b6 val rangeSlider: RangeSlider","title":"Range slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-start-tracking/range-slider/#rangeslider","text":"val rangeSlider: RangeSlider","title":"rangeSlider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-stop-tracking/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderTouchEvent / StopTracking StopTracking \u00b6 class StopTracking : RangeSliderTouchEvent Constructors \u00b6 Name Summary <init> StopTracking(rangeSlider: RangeSlider) Properties \u00b6 Name Summary rangeSlider val rangeSlider: RangeSlider","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-stop-tracking/#stoptracking","text":"class StopTracking : RangeSliderTouchEvent","title":"StopTracking"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-stop-tracking/#constructors","text":"Name Summary <init> StopTracking(rangeSlider: RangeSlider)","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-stop-tracking/#properties","text":"Name Summary rangeSlider val rangeSlider: RangeSlider","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-stop-tracking/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderTouchEvent / StopTracking / <init> <init> \u00b6 StopTracking(rangeSlider: RangeSlider)","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-stop-tracking/-init-/#init","text":"StopTracking(rangeSlider: RangeSlider)","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-stop-tracking/range-slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / RangeSliderTouchEvent / StopTracking / rangeSlider rangeSlider \u00b6 val rangeSlider: RangeSlider","title":"Range slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-range-slider-touch-event/-stop-tracking/range-slider/#rangeslider","text":"val rangeSlider: RangeSlider","title":"rangeSlider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderChangeEvent SliderChangeEvent \u00b6 class SliderChangeEvent Constructors \u00b6 Name Summary <init> SliderChangeEvent(slider: Slider, value: Float , fromUser: Boolean ) Properties \u00b6 Name Summary fromUser val fromUser: Boolean slider val slider: Slider value val value: Float","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/#sliderchangeevent","text":"class SliderChangeEvent","title":"SliderChangeEvent"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/#constructors","text":"Name Summary <init> SliderChangeEvent(slider: Slider, value: Float , fromUser: Boolean )","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/#properties","text":"Name Summary fromUser val fromUser: Boolean slider val slider: Slider value val value: Float","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderChangeEvent / <init> <init> \u00b6 SliderChangeEvent(slider: Slider, value: Float , fromUser: Boolean )","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/-init-/#init","text":"SliderChangeEvent(slider: Slider, value: Float , fromUser: Boolean )","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/from-user/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderChangeEvent / fromUser fromUser \u00b6 val fromUser: Boolean","title":"From user"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/from-user/#fromuser","text":"val fromUser: Boolean","title":"fromUser"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderChangeEvent / slider slider \u00b6 val slider: Slider","title":"Slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/slider/#slider","text":"val slider: Slider","title":"slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/value/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderChangeEvent / value value \u00b6 val value: Float","title":"Value"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-change-event/value/#value","text":"val value: Float","title":"value"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderTouchEvent SliderTouchEvent \u00b6 sealed class SliderTouchEvent Types \u00b6 Name Summary StartTracking class StartTracking : SliderTouchEvent StopTracking class StopTracking : SliderTouchEvent Properties \u00b6 Name Summary slider abstract val slider: Slider","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/#slidertouchevent","text":"sealed class SliderTouchEvent","title":"SliderTouchEvent"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/#types","text":"Name Summary StartTracking class StartTracking : SliderTouchEvent StopTracking class StopTracking : SliderTouchEvent","title":"Types"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/#properties","text":"Name Summary slider abstract val slider: Slider","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderTouchEvent / slider slider \u00b6 abstract val slider: Slider","title":"Slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/slider/#slider","text":"abstract val slider: Slider","title":"slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-start-tracking/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderTouchEvent / StartTracking StartTracking \u00b6 class StartTracking : SliderTouchEvent Constructors \u00b6 Name Summary <init> StartTracking(slider: Slider) Properties \u00b6 Name Summary slider val slider: Slider","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-start-tracking/#starttracking","text":"class StartTracking : SliderTouchEvent","title":"StartTracking"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-start-tracking/#constructors","text":"Name Summary <init> StartTracking(slider: Slider)","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-start-tracking/#properties","text":"Name Summary slider val slider: Slider","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-start-tracking/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderTouchEvent / StartTracking / <init> <init> \u00b6 StartTracking(slider: Slider)","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-start-tracking/-init-/#init","text":"StartTracking(slider: Slider)","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-start-tracking/slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderTouchEvent / StartTracking / slider slider \u00b6 val slider: Slider","title":"Slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-start-tracking/slider/#slider","text":"val slider: Slider","title":"slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-stop-tracking/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderTouchEvent / StopTracking StopTracking \u00b6 class StopTracking : SliderTouchEvent Constructors \u00b6 Name Summary <init> StopTracking(slider: Slider) Properties \u00b6 Name Summary slider val slider: Slider","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-stop-tracking/#stoptracking","text":"class StopTracking : SliderTouchEvent","title":"StopTracking"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-stop-tracking/#constructors","text":"Name Summary <init> StopTracking(slider: Slider)","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-stop-tracking/#properties","text":"Name Summary slider val slider: Slider","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-stop-tracking/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderTouchEvent / StopTracking / <init> <init> \u00b6 StopTracking(slider: Slider)","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-stop-tracking/-init-/#init","text":"StopTracking(slider: Slider)","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-stop-tracking/slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / SliderTouchEvent / StopTracking / slider slider \u00b6 val slider: Slider","title":"Slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-slider-touch-event/-stop-tracking/slider/#slider","text":"val slider: Slider","title":"slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent TabLayoutSelectionEvent \u00b6 sealed class TabLayoutSelectionEvent Types \u00b6 Name Summary TabReselected class TabReselected : TabLayoutSelectionEvent TabSelected class TabSelected : TabLayoutSelectionEvent TabUnselected class TabUnselected : TabLayoutSelectionEvent Properties \u00b6 Name Summary tab abstract val tab: Tab tabLayout abstract val tabLayout: TabLayout","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/#tablayoutselectionevent","text":"sealed class TabLayoutSelectionEvent","title":"TabLayoutSelectionEvent"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/#types","text":"Name Summary TabReselected class TabReselected : TabLayoutSelectionEvent TabSelected class TabSelected : TabLayoutSelectionEvent TabUnselected class TabUnselected : TabLayoutSelectionEvent","title":"Types"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/#properties","text":"Name Summary tab abstract val tab: Tab tabLayout abstract val tabLayout: TabLayout","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/tab-layout/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / tabLayout tabLayout \u00b6 abstract val tabLayout: TabLayout","title":"Tab layout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/tab-layout/#tablayout","text":"abstract val tabLayout: TabLayout","title":"tabLayout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/tab/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / tab tab \u00b6 abstract val tab: Tab","title":"Tab"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/tab/#tab","text":"abstract val tab: Tab","title":"tab"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabReselected TabReselected \u00b6 class TabReselected : TabLayoutSelectionEvent Constructors \u00b6 Name Summary <init> TabReselected(tabLayout: TabLayout, tab: Tab) Properties \u00b6 Name Summary tab val tab: Tab tabLayout val tabLayout: TabLayout","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/#tabreselected","text":"class TabReselected : TabLayoutSelectionEvent","title":"TabReselected"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/#constructors","text":"Name Summary <init> TabReselected(tabLayout: TabLayout, tab: Tab)","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/#properties","text":"Name Summary tab val tab: Tab tabLayout val tabLayout: TabLayout","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabReselected / <init> <init> \u00b6 TabReselected(tabLayout: TabLayout, tab: Tab)","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/-init-/#init","text":"TabReselected(tabLayout: TabLayout, tab: Tab)","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/tab-layout/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabReselected / tabLayout tabLayout \u00b6 val tabLayout: TabLayout","title":"Tab layout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/tab-layout/#tablayout","text":"val tabLayout: TabLayout","title":"tabLayout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/tab/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabReselected / tab tab \u00b6 val tab: Tab","title":"Tab"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-reselected/tab/#tab","text":"val tab: Tab","title":"tab"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabSelected TabSelected \u00b6 class TabSelected : TabLayoutSelectionEvent Constructors \u00b6 Name Summary <init> TabSelected(tabLayout: TabLayout, tab: Tab) Properties \u00b6 Name Summary tab val tab: Tab tabLayout val tabLayout: TabLayout","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/#tabselected","text":"class TabSelected : TabLayoutSelectionEvent","title":"TabSelected"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/#constructors","text":"Name Summary <init> TabSelected(tabLayout: TabLayout, tab: Tab)","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/#properties","text":"Name Summary tab val tab: Tab tabLayout val tabLayout: TabLayout","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabSelected / <init> <init> \u00b6 TabSelected(tabLayout: TabLayout, tab: Tab)","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/-init-/#init","text":"TabSelected(tabLayout: TabLayout, tab: Tab)","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/tab-layout/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabSelected / tabLayout tabLayout \u00b6 val tabLayout: TabLayout","title":"Tab layout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/tab-layout/#tablayout","text":"val tabLayout: TabLayout","title":"tabLayout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/tab/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabSelected / tab tab \u00b6 val tab: Tab","title":"Tab"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-selected/tab/#tab","text":"val tab: Tab","title":"tab"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabUnselected TabUnselected \u00b6 class TabUnselected : TabLayoutSelectionEvent Constructors \u00b6 Name Summary <init> TabUnselected(tabLayout: TabLayout, tab: Tab) Properties \u00b6 Name Summary tab val tab: Tab tabLayout val tabLayout: TabLayout","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/#tabunselected","text":"class TabUnselected : TabLayoutSelectionEvent","title":"TabUnselected"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/#constructors","text":"Name Summary <init> TabUnselected(tabLayout: TabLayout, tab: Tab)","title":"Constructors"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/#properties","text":"Name Summary tab val tab: Tab tabLayout val tabLayout: TabLayout","title":"Properties"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/-init-/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabUnselected / <init> <init> \u00b6 TabUnselected(tabLayout: TabLayout, tab: Tab)","title":" init "},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/-init-/#init","text":"TabUnselected(tabLayout: TabLayout, tab: Tab)","title":"&lt;init&gt;"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/tab-layout/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabUnselected / tabLayout tabLayout \u00b6 val tabLayout: TabLayout","title":"Tab layout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/tab-layout/#tablayout","text":"val tabLayout: TabLayout","title":"tabLayout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/tab/","text":"flowbinding-material / reactivecircus.flowbinding.material / TabLayoutSelectionEvent / TabUnselected / tab tab \u00b6 val tab: Tab","title":"Tab"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/-tab-layout-selection-event/-tab-unselected/tab/#tab","text":"val tab: Tab","title":"tab"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/","text":"flowbinding-material / reactivecircus.flowbinding.material / android.view.View Extensions for android.view.View \u00b6 Name Summary bottomSheetSlides Create a Flow of bottom sheet slided events on the View instance with a BottomSheetBehavior where the value emitted is the slide offset. fun View .bottomSheetSlides(): Flow< Float > bottomSheetStateChanges Create a Flow of bottom sheet state change events on the View instance with a BottomSheetBehavior where the value emitted can be one of STATE_DRAGGING , STATE_SETTLING }, STATE_EXPANDED , STATE_COLLAPSED , STATE_HIDDEN or STATE_HALF_EXPANDED . fun View .bottomSheetStateChanges(): Flow< Int > dismisses Create a Flow of dismissed events on the View instance with a SwipeDismissBehavior where the value emitted is the view dismissed. The View \u2018s layoutParams must be of the type CoordinatorLayout.LayoutParams , and the layoutParams\u2019s behavior must be a SwipeDismissBehavior . fun View .dismisses(): Flow< View > swipeDismissDragStateChanges Create a Flow of drag state change events on the View instance with a SwipeDismissBehavior where the value emitted can be one of STATE_IDLE , STATE_DRAGGING } or STATE_SETTLING . fun View .swipeDismissDragStateChanges(): Flow< Int >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/#extensions-for-androidviewview","text":"Name Summary bottomSheetSlides Create a Flow of bottom sheet slided events on the View instance with a BottomSheetBehavior where the value emitted is the slide offset. fun View .bottomSheetSlides(): Flow< Float > bottomSheetStateChanges Create a Flow of bottom sheet state change events on the View instance with a BottomSheetBehavior where the value emitted can be one of STATE_DRAGGING , STATE_SETTLING }, STATE_EXPANDED , STATE_COLLAPSED , STATE_HIDDEN or STATE_HALF_EXPANDED . fun View .bottomSheetStateChanges(): Flow< Int > dismisses Create a Flow of dismissed events on the View instance with a SwipeDismissBehavior where the value emitted is the view dismissed. The View \u2018s layoutParams must be of the type CoordinatorLayout.LayoutParams , and the layoutParams\u2019s behavior must be a SwipeDismissBehavior . fun View .dismisses(): Flow< View > swipeDismissDragStateChanges Create a Flow of drag state change events on the View instance with a SwipeDismissBehavior where the value emitted can be one of STATE_IDLE , STATE_DRAGGING } or STATE_SETTLING . fun View .swipeDismissDragStateChanges(): Flow< Int >","title":"Extensions for android.view.View"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/bottom-sheet-slides/","text":"flowbinding-material / reactivecircus.flowbinding.material / android.view.View / bottomSheetSlides bottomSheetSlides \u00b6 @CheckResult fun View .bottomSheetSlides(): Flow< Float > Create a Flow of bottom sheet slided events on the View instance with a BottomSheetBehavior where the value emitted is the slide offset. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.bottomSheetSlides() .onEach { state -> // handle state } .launchIn(uiScope)","title":"Bottom sheet slides"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/bottom-sheet-slides/#bottomsheetslides","text":"@CheckResult fun View .bottomSheetSlides(): Flow< Float > Create a Flow of bottom sheet slided events on the View instance with a BottomSheetBehavior where the value emitted is the slide offset. Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.bottomSheetSlides() .onEach { state -> // handle state } .launchIn(uiScope)","title":"bottomSheetSlides"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/bottom-sheet-state-changes/","text":"flowbinding-material / reactivecircus.flowbinding.material / android.view.View / bottomSheetStateChanges bottomSheetStateChanges \u00b6 @CheckResult fun View .bottomSheetStateChanges(): Flow< Int > Create a Flow of bottom sheet state change events on the View instance with a BottomSheetBehavior where the value emitted can be one of STATE_DRAGGING , STATE_SETTLING }, STATE_EXPANDED , STATE_COLLAPSED , STATE_HIDDEN or STATE_HALF_EXPANDED . Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.bottomSheetStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"Bottom sheet state changes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/bottom-sheet-state-changes/#bottomsheetstatechanges","text":"@CheckResult fun View .bottomSheetStateChanges(): Flow< Int > Create a Flow of bottom sheet state change events on the View instance with a BottomSheetBehavior where the value emitted can be one of STATE_DRAGGING , STATE_SETTLING }, STATE_EXPANDED , STATE_COLLAPSED , STATE_HIDDEN or STATE_HALF_EXPANDED . Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.bottomSheetStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"bottomSheetStateChanges"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/dismisses/","text":"flowbinding-material / reactivecircus.flowbinding.material / android.view.View / dismisses dismisses \u00b6 @CheckResult fun View .dismisses(): Flow< View > Create a Flow of dismissed events on the View instance with a SwipeDismissBehavior where the value emitted is the view dismissed. The View \u2018s layoutParams must be of the type CoordinatorLayout.LayoutParams , and the layoutParams\u2019s behavior must be a SwipeDismissBehavior . Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.dismisses() .onEach { dismissedView -> // handle dismissedView } .launchIn(uiScope)","title":"Dismisses"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/dismisses/#dismisses","text":"@CheckResult fun View .dismisses(): Flow< View > Create a Flow of dismissed events on the View instance with a SwipeDismissBehavior where the value emitted is the view dismissed. The View \u2018s layoutParams must be of the type CoordinatorLayout.LayoutParams , and the layoutParams\u2019s behavior must be a SwipeDismissBehavior . Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.dismisses() .onEach { dismissedView -> // handle dismissedView } .launchIn(uiScope)","title":"dismisses"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/swipe-dismiss-drag-state-changes/","text":"flowbinding-material / reactivecircus.flowbinding.material / android.view.View / swipeDismissDragStateChanges swipeDismissDragStateChanges \u00b6 @CheckResult fun View .swipeDismissDragStateChanges(): Flow< Int > Create a Flow of drag state change events on the View instance with a SwipeDismissBehavior where the value emitted can be one of STATE_IDLE , STATE_DRAGGING } or STATE_SETTLING . Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.dragStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"Swipe dismiss drag state changes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/android.view.-view/swipe-dismiss-drag-state-changes/#swipedismissdragstatechanges","text":"@CheckResult fun View .swipeDismissDragStateChanges(): Flow< Int > Create a Flow of drag state change events on the View instance with a SwipeDismissBehavior where the value emitted can be one of STATE_IDLE , STATE_DRAGGING } or STATE_SETTLING . Note: Created flow keeps a strong reference to the View instance until the coroutine that launched the flow collector is cancelled. Example of usage: view.dragStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"swipeDismissDragStateChanges"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.appbar.-app-bar-layout/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.appbar.AppBarLayout Extensions for com.google.android.material.appbar.AppBarLayout \u00b6 Name Summary offsetChanges Create a Flow of offset changed events on the AppBarLayout instance where the value emitted is the verticalOffset of the AppBarLayout . fun AppBarLayout.offsetChanges(): Flow< Int >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.appbar.-app-bar-layout/#extensions-for-comgoogleandroidmaterialappbarappbarlayout","text":"Name Summary offsetChanges Create a Flow of offset changed events on the AppBarLayout instance where the value emitted is the verticalOffset of the AppBarLayout . fun AppBarLayout.offsetChanges(): Flow< Int >","title":"Extensions for com.google.android.material.appbar.AppBarLayout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.appbar.-app-bar-layout/offset-changes/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.appbar.AppBarLayout / offsetChanges offsetChanges \u00b6 @CheckResult fun AppBarLayout.offsetChanges(): Flow< Int > Create a Flow of offset changed events on the AppBarLayout instance where the value emitted is the verticalOffset of the AppBarLayout . Note: Created flow keeps a strong reference to the AppBarLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: snackbar.offsetChanges() .onEach { verticalOffset -> // handle verticalOffset } .launchIn(uiScope)","title":"Offset changes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.appbar.-app-bar-layout/offset-changes/#offsetchanges","text":"@CheckResult fun AppBarLayout.offsetChanges(): Flow< Int > Create a Flow of offset changed events on the AppBarLayout instance where the value emitted is the verticalOffset of the AppBarLayout . Note: Created flow keeps a strong reference to the AppBarLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: snackbar.offsetChanges() .onEach { verticalOffset -> // handle verticalOffset } .launchIn(uiScope)","title":"offsetChanges"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.bottomnavigation.-bottom-navigation-view/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.bottomnavigation.BottomNavigationView Extensions for com.google.android.material.bottomnavigation.BottomNavigationView \u00b6 Name Summary itemReselections Create a Flow of item reselected events on the BottomNavigationView instance where the value emitted is the currently selected menu item. fun BottomNavigationView.itemReselections(): Flow< MenuItem > itemSelections Create a Flow of item selected events on the BottomNavigationView instance where the value emitted is the currently selected menu item. fun BottomNavigationView.itemSelections(): Flow< MenuItem >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.bottomnavigation.-bottom-navigation-view/#extensions-for-comgoogleandroidmaterialbottomnavigationbottomnavigationview","text":"Name Summary itemReselections Create a Flow of item reselected events on the BottomNavigationView instance where the value emitted is the currently selected menu item. fun BottomNavigationView.itemReselections(): Flow< MenuItem > itemSelections Create a Flow of item selected events on the BottomNavigationView instance where the value emitted is the currently selected menu item. fun BottomNavigationView.itemSelections(): Flow< MenuItem >","title":"Extensions for com.google.android.material.bottomnavigation.BottomNavigationView"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.bottomnavigation.-bottom-navigation-view/item-reselections/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.bottomnavigation.BottomNavigationView / itemReselections itemReselections \u00b6 @CheckResult fun BottomNavigationView.itemReselections(): Flow< MenuItem > Create a Flow of item reselected events on the BottomNavigationView instance where the value emitted is the currently selected menu item. Note: Created flow keeps a strong reference to the BottomNavigationView instance until the coroutine that launched the flow collector is cancelled. Example of usage: bottomNavigationView.itemReselections() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"Item reselections"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.bottomnavigation.-bottom-navigation-view/item-reselections/#itemreselections","text":"@CheckResult fun BottomNavigationView.itemReselections(): Flow< MenuItem > Create a Flow of item reselected events on the BottomNavigationView instance where the value emitted is the currently selected menu item. Note: Created flow keeps a strong reference to the BottomNavigationView instance until the coroutine that launched the flow collector is cancelled. Example of usage: bottomNavigationView.itemReselections() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"itemReselections"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.bottomnavigation.-bottom-navigation-view/item-selections/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.bottomnavigation.BottomNavigationView / itemSelections itemSelections \u00b6 @CheckResult fun BottomNavigationView.itemSelections(): Flow< MenuItem > Create a Flow of item selected events on the BottomNavigationView instance where the value emitted is the currently selected menu item. Note: if a MenuItem is already selected, it will be emitted immediately upon collection. Note: Created flow keeps a strong reference to the BottomNavigationView instance until the coroutine that launched the flow collector is cancelled. Example of usage: bottomNavigationView.itemSelections() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"Item selections"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.bottomnavigation.-bottom-navigation-view/item-selections/#itemselections","text":"@CheckResult fun BottomNavigationView.itemSelections(): Flow< MenuItem > Create a Flow of item selected events on the BottomNavigationView instance where the value emitted is the currently selected menu item. Note: if a MenuItem is already selected, it will be emitted immediately upon collection. Note: Created flow keeps a strong reference to the BottomNavigationView instance until the coroutine that launched the flow collector is cancelled. Example of usage: bottomNavigationView.itemSelections() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"itemSelections"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.button.-material-button/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.button.MaterialButton Extensions for com.google.android.material.button.MaterialButton \u00b6 Name Summary checkedChanges Create a Flow of material button checked state change events on the MaterialButton instance where the value emitted is whether the button is currently checked. fun MaterialButton.checkedChanges(): Flow< Boolean >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.button.-material-button/#extensions-for-comgoogleandroidmaterialbuttonmaterialbutton","text":"Name Summary checkedChanges Create a Flow of material button checked state change events on the MaterialButton instance where the value emitted is whether the button is currently checked. fun MaterialButton.checkedChanges(): Flow< Boolean >","title":"Extensions for com.google.android.material.button.MaterialButton"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.button.-material-button/checked-changes/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.button.MaterialButton / checkedChanges checkedChanges \u00b6 @CheckResult fun MaterialButton.checkedChanges(): Flow< Boolean > Create a Flow of material button checked state change events on the MaterialButton instance where the value emitted is whether the button is currently checked. Note: Created flow keeps a strong reference to the MaterialButton instance until the coroutine that launched the flow collector is cancelled. Example of usage: materialButton.checkedChanges() .onEach { isChecked -> // handle isChecked } .launchIn(uiScope)","title":"Checked changes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.button.-material-button/checked-changes/#checkedchanges","text":"@CheckResult fun MaterialButton.checkedChanges(): Flow< Boolean > Create a Flow of material button checked state change events on the MaterialButton instance where the value emitted is whether the button is currently checked. Note: Created flow keeps a strong reference to the MaterialButton instance until the coroutine that launched the flow collector is cancelled. Example of usage: materialButton.checkedChanges() .onEach { isChecked -> // handle isChecked } .launchIn(uiScope)","title":"checkedChanges"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.button.-material-button-toggle-group/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.button.MaterialButtonToggleGroup Extensions for com.google.android.material.button.MaterialButtonToggleGroup \u00b6 Name Summary buttonCheckedChanges Create a Flow of material button checked state change events on the MaterialButtonToggleGroup instance. fun MaterialButtonToggleGroup.buttonCheckedChanges(): Flow< MaterialButtonCheckedChangedEvent >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.button.-material-button-toggle-group/#extensions-for-comgoogleandroidmaterialbuttonmaterialbuttontogglegroup","text":"Name Summary buttonCheckedChanges Create a Flow of material button checked state change events on the MaterialButtonToggleGroup instance. fun MaterialButtonToggleGroup.buttonCheckedChanges(): Flow< MaterialButtonCheckedChangedEvent >","title":"Extensions for com.google.android.material.button.MaterialButtonToggleGroup"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.button.-material-button-toggle-group/button-checked-changes/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.button.MaterialButtonToggleGroup / buttonCheckedChanges buttonCheckedChanges \u00b6 @CheckResult fun MaterialButtonToggleGroup.buttonCheckedChanges(): Flow< MaterialButtonCheckedChangedEvent > Create a Flow of material button checked state change events on the MaterialButtonToggleGroup instance. Note: Created flow keeps a strong reference to the MaterialButtonToggleGroup instance until the coroutine that launched the flow collector is cancelled. Example of usage: materialButtonToggleGroup.buttonCheckedChanges() .onEach { event -> // handle button checked event } .launchIn(uiScope)","title":"Button checked changes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.button.-material-button-toggle-group/button-checked-changes/#buttoncheckedchanges","text":"@CheckResult fun MaterialButtonToggleGroup.buttonCheckedChanges(): Flow< MaterialButtonCheckedChangedEvent > Create a Flow of material button checked state change events on the MaterialButtonToggleGroup instance. Note: Created flow keeps a strong reference to the MaterialButtonToggleGroup instance until the coroutine that launched the flow collector is cancelled. Example of usage: materialButtonToggleGroup.buttonCheckedChanges() .onEach { event -> // handle button checked event } .launchIn(uiScope)","title":"buttonCheckedChanges"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.card.-material-card-view/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.card.MaterialCardView Extensions for com.google.android.material.card.MaterialCardView \u00b6 Name Summary checkedChanges Create a InitialValueFlow of checked state changes on the MaterialCardView instance where the value emitted is whether the MaterialCardView is currently checked. fun MaterialCardView.checkedChanges(): InitialValueFlow< Boolean >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.card.-material-card-view/#extensions-for-comgoogleandroidmaterialcardmaterialcardview","text":"Name Summary checkedChanges Create a InitialValueFlow of checked state changes on the MaterialCardView instance where the value emitted is whether the MaterialCardView is currently checked. fun MaterialCardView.checkedChanges(): InitialValueFlow< Boolean >","title":"Extensions for com.google.android.material.card.MaterialCardView"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.card.-material-card-view/checked-changes/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.card.MaterialCardView / checkedChanges checkedChanges \u00b6 @CheckResult fun MaterialCardView.checkedChanges(): InitialValueFlow< Boolean > Create a InitialValueFlow of checked state changes on the MaterialCardView instance where the value emitted is whether the MaterialCardView is currently checked. Note: Created flow keeps a strong reference to the MaterialCardView instance until the coroutine that launched the flow collector is cancelled. Example of usage: materialCardView.checkedChanges() .onEach { isChecked -> // handle isChecked } .launchIn(uiScope)","title":"Checked changes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.card.-material-card-view/checked-changes/#checkedchanges","text":"@CheckResult fun MaterialCardView.checkedChanges(): InitialValueFlow< Boolean > Create a InitialValueFlow of checked state changes on the MaterialCardView instance where the value emitted is whether the MaterialCardView is currently checked. Note: Created flow keeps a strong reference to the MaterialCardView instance until the coroutine that launched the flow collector is cancelled. Example of usage: materialCardView.checkedChanges() .onEach { isChecked -> // handle isChecked } .launchIn(uiScope)","title":"checkedChanges"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.chip.-chip/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.chip.Chip Extensions for com.google.android.material.chip.Chip \u00b6 Name Summary closeIconClicks Create a Flow of close icon click events on the Chip instance. fun Chip.closeIconClicks(): Flow< Unit >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.chip.-chip/#extensions-for-comgoogleandroidmaterialchipchip","text":"Name Summary closeIconClicks Create a Flow of close icon click events on the Chip instance. fun Chip.closeIconClicks(): Flow< Unit >","title":"Extensions for com.google.android.material.chip.Chip"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.chip.-chip/close-icon-clicks/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.chip.Chip / closeIconClicks closeIconClicks \u00b6 @CheckResult fun Chip.closeIconClicks(): Flow< Unit > Create a Flow of close icon click events on the Chip instance. Note: Created flow keeps a strong reference to the Chip instance until the coroutine that launched the flow collector is cancelled. Example of usage: chip.closeIconClicks() .onEach { // handle close icon clicked } .launchIn(uiScope)","title":"Close icon clicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.chip.-chip/close-icon-clicks/#closeiconclicks","text":"@CheckResult fun Chip.closeIconClicks(): Flow< Unit > Create a Flow of close icon click events on the Chip instance. Note: Created flow keeps a strong reference to the Chip instance until the coroutine that launched the flow collector is cancelled. Example of usage: chip.closeIconClicks() .onEach { // handle close icon clicked } .launchIn(uiScope)","title":"closeIconClicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.chip.-chip-group/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.chip.ChipGroup Extensions for com.google.android.material.chip.ChipGroup \u00b6 Name Summary chipCheckedChanges Create a InitialValueFlow of chip checked state change events on the ChipGroup instance where the value emitted is the currently checked chip id, or View#NO_ID when selection is cleared. fun ChipGroup.chipCheckedChanges(): InitialValueFlow< Int >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.chip.-chip-group/#extensions-for-comgoogleandroidmaterialchipchipgroup","text":"Name Summary chipCheckedChanges Create a InitialValueFlow of chip checked state change events on the ChipGroup instance where the value emitted is the currently checked chip id, or View#NO_ID when selection is cleared. fun ChipGroup.chipCheckedChanges(): InitialValueFlow< Int >","title":"Extensions for com.google.android.material.chip.ChipGroup"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.chip.-chip-group/chip-checked-changes/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.chip.ChipGroup / chipCheckedChanges chipCheckedChanges \u00b6 @CheckResult fun ChipGroup.chipCheckedChanges(): InitialValueFlow< Int > Create a InitialValueFlow of chip checked state change events on the ChipGroup instance where the value emitted is the currently checked chip id, or View#NO_ID when selection is cleared. Note: Created flow keeps a strong reference to the ChipGroup instance until the coroutine that launched the flow collector is cancelled. Example of usage: chipGroup.chipCheckedChanges() .onEach { checkedId -> // handle checkedId } .launchIn(uiScope)","title":"Chip checked changes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.chip.-chip-group/chip-checked-changes/#chipcheckedchanges","text":"@CheckResult fun ChipGroup.chipCheckedChanges(): InitialValueFlow< Int > Create a InitialValueFlow of chip checked state change events on the ChipGroup instance where the value emitted is the currently checked chip id, or View#NO_ID when selection is cleared. Note: Created flow keeps a strong reference to the ChipGroup instance until the coroutine that launched the flow collector is cancelled. Example of usage: chipGroup.chipCheckedChanges() .onEach { checkedId -> // handle checkedId } .launchIn(uiScope)","title":"chipCheckedChanges"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.datepicker.MaterialDatePicker Extensions for com.google.android.material.datepicker.MaterialDatePicker \u00b6 Name Summary cancels Create a Flow of cancel events on the MaterialDatePicker instance. This emits when the user cancels the picker via back button or a touch outside the view. It does not emit when the user clicks the cancel button. To get a Flow of using clicking the cancel button, use the MaterialDatePicker.negativeButtonClicks binding. fun <S> MaterialDatePicker<S>.cancels(): Flow< Unit > dismisses Create a Flow of dismiss events on the MaterialDatePicker instance. This emits whenever the underlying DialogFragment is dismissed, no matter how it is dismissed. fun <S> MaterialDatePicker<S>.dismisses(): Flow< Unit > negativeButtonClicks Create a Flow of negative button click events on the MaterialDatePicker instance when the user clicks the cancel button. fun <S> MaterialDatePicker<S>.negativeButtonClicks(): Flow< Unit > positiveButtonClicks Create a Flow of positive button click events on the MaterialDatePicker instance when the user confirms a valid selection, where the value emitted is the selection made. fun <S> MaterialDatePicker<S>.positiveButtonClicks(): Flow<S>","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/#extensions-for-comgoogleandroidmaterialdatepickermaterialdatepicker","text":"Name Summary cancels Create a Flow of cancel events on the MaterialDatePicker instance. This emits when the user cancels the picker via back button or a touch outside the view. It does not emit when the user clicks the cancel button. To get a Flow of using clicking the cancel button, use the MaterialDatePicker.negativeButtonClicks binding. fun <S> MaterialDatePicker<S>.cancels(): Flow< Unit > dismisses Create a Flow of dismiss events on the MaterialDatePicker instance. This emits whenever the underlying DialogFragment is dismissed, no matter how it is dismissed. fun <S> MaterialDatePicker<S>.dismisses(): Flow< Unit > negativeButtonClicks Create a Flow of negative button click events on the MaterialDatePicker instance when the user clicks the cancel button. fun <S> MaterialDatePicker<S>.negativeButtonClicks(): Flow< Unit > positiveButtonClicks Create a Flow of positive button click events on the MaterialDatePicker instance when the user confirms a valid selection, where the value emitted is the selection made. fun <S> MaterialDatePicker<S>.positiveButtonClicks(): Flow<S>","title":"Extensions for com.google.android.material.datepicker.MaterialDatePicker"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/cancels/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.datepicker.MaterialDatePicker / cancels cancels \u00b6 @CheckResult fun <S> MaterialDatePicker<S>.cancels(): Flow< Unit > Create a Flow of cancel events on the MaterialDatePicker instance. This emits when the user cancels the picker via back button or a touch outside the view. It does not emit when the user clicks the cancel button. To get a Flow of using clicking the cancel button, use the MaterialDatePicker.negativeButtonClicks binding. Note: Created flow keeps a strong reference to the MaterialDatePicker instance until the coroutine that launched the flow collector is cancelled. Example of usage: datePicker.cancels() .onEach { // handle canceled } .launchIn(uiScope)","title":"Cancels"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/cancels/#cancels","text":"@CheckResult fun <S> MaterialDatePicker<S>.cancels(): Flow< Unit > Create a Flow of cancel events on the MaterialDatePicker instance. This emits when the user cancels the picker via back button or a touch outside the view. It does not emit when the user clicks the cancel button. To get a Flow of using clicking the cancel button, use the MaterialDatePicker.negativeButtonClicks binding. Note: Created flow keeps a strong reference to the MaterialDatePicker instance until the coroutine that launched the flow collector is cancelled. Example of usage: datePicker.cancels() .onEach { // handle canceled } .launchIn(uiScope)","title":"cancels"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/dismisses/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.datepicker.MaterialDatePicker / dismisses dismisses \u00b6 @CheckResult fun <S> MaterialDatePicker<S>.dismisses(): Flow< Unit > Create a Flow of dismiss events on the MaterialDatePicker instance. This emits whenever the underlying DialogFragment is dismissed, no matter how it is dismissed. Note: Created flow keeps a strong reference to the MaterialDatePicker instance until the coroutine that launched the flow collector is cancelled. Example of usage: datePicker.dismisses() .onEach { // handle dismissed } .launchIn(uiScope)","title":"Dismisses"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/dismisses/#dismisses","text":"@CheckResult fun <S> MaterialDatePicker<S>.dismisses(): Flow< Unit > Create a Flow of dismiss events on the MaterialDatePicker instance. This emits whenever the underlying DialogFragment is dismissed, no matter how it is dismissed. Note: Created flow keeps a strong reference to the MaterialDatePicker instance until the coroutine that launched the flow collector is cancelled. Example of usage: datePicker.dismisses() .onEach { // handle dismissed } .launchIn(uiScope)","title":"dismisses"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/negative-button-clicks/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.datepicker.MaterialDatePicker / negativeButtonClicks negativeButtonClicks \u00b6 @CheckResult fun <S> MaterialDatePicker<S>.negativeButtonClicks(): Flow< Unit > Create a Flow of negative button click events on the MaterialDatePicker instance when the user clicks the cancel button. Note: Created flow keeps a strong reference to the MaterialDatePicker instance until the coroutine that launched the flow collector is cancelled. Example of usage: datePicker.negativeButtonClicks() .onEach { // handle negative button click } .launchIn(uiScope)","title":"Negative button clicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/negative-button-clicks/#negativebuttonclicks","text":"@CheckResult fun <S> MaterialDatePicker<S>.negativeButtonClicks(): Flow< Unit > Create a Flow of negative button click events on the MaterialDatePicker instance when the user clicks the cancel button. Note: Created flow keeps a strong reference to the MaterialDatePicker instance until the coroutine that launched the flow collector is cancelled. Example of usage: datePicker.negativeButtonClicks() .onEach { // handle negative button click } .launchIn(uiScope)","title":"negativeButtonClicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/positive-button-clicks/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.datepicker.MaterialDatePicker / positiveButtonClicks positiveButtonClicks \u00b6 @CheckResult fun <S> MaterialDatePicker<S>.positiveButtonClicks(): Flow<S> Create a Flow of positive button click events on the MaterialDatePicker instance when the user confirms a valid selection, where the value emitted is the selection made. Note: Created flow keeps a strong reference to the MaterialDatePicker instance until the coroutine that launched the flow collector is cancelled. Example of usage: datePicker.positiveButtonClicks() .onEach { selection -> // handle selection (as a result of positive button click) } .launchIn(uiScope)","title":"Positive button clicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.datepicker.-material-date-picker/positive-button-clicks/#positivebuttonclicks","text":"@CheckResult fun <S> MaterialDatePicker<S>.positiveButtonClicks(): Flow<S> Create a Flow of positive button click events on the MaterialDatePicker instance when the user confirms a valid selection, where the value emitted is the selection made. Note: Created flow keeps a strong reference to the MaterialDatePicker instance until the coroutine that launched the flow collector is cancelled. Example of usage: datePicker.positiveButtonClicks() .onEach { selection -> // handle selection (as a result of positive button click) } .launchIn(uiScope)","title":"positiveButtonClicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.navigation.-navigation-view/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.navigation.NavigationView Extensions for com.google.android.material.navigation.NavigationView \u00b6 Name Summary itemSelections Create a Flow of item selected events on the NavigationView instance where the value emitted is the currently selected menu item. fun NavigationView.itemSelections(): Flow< MenuItem >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.navigation.-navigation-view/#extensions-for-comgoogleandroidmaterialnavigationnavigationview","text":"Name Summary itemSelections Create a Flow of item selected events on the NavigationView instance where the value emitted is the currently selected menu item. fun NavigationView.itemSelections(): Flow< MenuItem >","title":"Extensions for com.google.android.material.navigation.NavigationView"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.navigation.-navigation-view/item-selections/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.navigation.NavigationView / itemSelections itemSelections \u00b6 @CheckResult fun NavigationView.itemSelections(): Flow< MenuItem > Create a Flow of item selected events on the NavigationView instance where the value emitted is the currently selected menu item. Note: if a MenuItem is already selected, it will be emitted immediately upon collection. Note: Created flow keeps a strong reference to the NavigationView instance until the coroutine that launched the flow collector is cancelled. Example of usage: navigationView.itemSelections() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"Item selections"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.navigation.-navigation-view/item-selections/#itemselections","text":"@CheckResult fun NavigationView.itemSelections(): Flow< MenuItem > Create a Flow of item selected events on the NavigationView instance where the value emitted is the currently selected menu item. Note: if a MenuItem is already selected, it will be emitted immediately upon collection. Note: Created flow keeps a strong reference to the NavigationView instance until the coroutine that launched the flow collector is cancelled. Example of usage: navigationView.itemSelections() .onEach { menuItem -> // handle menuItem } .launchIn(uiScope)","title":"itemSelections"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-range-slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.slider.RangeSlider Extensions for com.google.android.material.slider.RangeSlider \u00b6 Name Summary changeEvents Create a InitialValueFlow of change events on the RangeSlider instance. fun RangeSlider.changeEvents(): InitialValueFlow< RangeSliderChangeEvent > touchEvents Create a Flow of touch events on the RangeSlider instance. fun RangeSlider.touchEvents(): Flow< RangeSliderTouchEvent > valuesChanges Create a InitialValueFlow of values change events on the RangeSlider instance where the value emitted is the current value of the RangeSlider . fun RangeSlider.valuesChanges(): InitialValueFlow< List < Float >>","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-range-slider/#extensions-for-comgoogleandroidmaterialsliderrangeslider","text":"Name Summary changeEvents Create a InitialValueFlow of change events on the RangeSlider instance. fun RangeSlider.changeEvents(): InitialValueFlow< RangeSliderChangeEvent > touchEvents Create a Flow of touch events on the RangeSlider instance. fun RangeSlider.touchEvents(): Flow< RangeSliderTouchEvent > valuesChanges Create a InitialValueFlow of values change events on the RangeSlider instance where the value emitted is the current value of the RangeSlider . fun RangeSlider.valuesChanges(): InitialValueFlow< List < Float >>","title":"Extensions for com.google.android.material.slider.RangeSlider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-range-slider/change-events/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.slider.RangeSlider / changeEvents changeEvents \u00b6 @CheckResult fun RangeSlider.changeEvents(): InitialValueFlow< RangeSliderChangeEvent > Create a InitialValueFlow of change events on the RangeSlider instance. Note: Created flow keeps a strong reference to the RangeSlider instance until the coroutine that launched the flow collector is cancelled. Example of usage: rangeSlider.changeEvents() .onEach { event -> // handle event } .launchIn(uiScope)","title":"Change events"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-range-slider/change-events/#changeevents","text":"@CheckResult fun RangeSlider.changeEvents(): InitialValueFlow< RangeSliderChangeEvent > Create a InitialValueFlow of change events on the RangeSlider instance. Note: Created flow keeps a strong reference to the RangeSlider instance until the coroutine that launched the flow collector is cancelled. Example of usage: rangeSlider.changeEvents() .onEach { event -> // handle event } .launchIn(uiScope)","title":"changeEvents"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-range-slider/touch-events/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.slider.RangeSlider / touchEvents touchEvents \u00b6 @CheckResult fun RangeSlider.touchEvents(): Flow< RangeSliderTouchEvent > Create a Flow of touch events on the RangeSlider instance. Note: Created flow keeps a strong reference to the RangeSlider instance until the coroutine that launched the flow collector is cancelled. Example of usage: rangeSlider.touchEvents() .onEach { event -> // handle event } .launchIn(uiScope)","title":"Touch events"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-range-slider/touch-events/#touchevents","text":"@CheckResult fun RangeSlider.touchEvents(): Flow< RangeSliderTouchEvent > Create a Flow of touch events on the RangeSlider instance. Note: Created flow keeps a strong reference to the RangeSlider instance until the coroutine that launched the flow collector is cancelled. Example of usage: rangeSlider.touchEvents() .onEach { event -> // handle event } .launchIn(uiScope)","title":"touchEvents"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-range-slider/values-changes/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.slider.RangeSlider / valuesChanges valuesChanges \u00b6 @CheckResult fun RangeSlider.valuesChanges(): InitialValueFlow< List < Float >> Create a InitialValueFlow of values change events on the RangeSlider instance where the value emitted is the current value of the RangeSlider . Note: Created flow keeps a strong reference to the RangeSlider instance until the coroutine that launched the flow collector is cancelled. Example of usage: rangeSlider.valuesChanges() .onEach { values -> // handle values } .launchIn(uiScope)","title":"Values changes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-range-slider/values-changes/#valueschanges","text":"@CheckResult fun RangeSlider.valuesChanges(): InitialValueFlow< List < Float >> Create a InitialValueFlow of values change events on the RangeSlider instance where the value emitted is the current value of the RangeSlider . Note: Created flow keeps a strong reference to the RangeSlider instance until the coroutine that launched the flow collector is cancelled. Example of usage: rangeSlider.valuesChanges() .onEach { values -> // handle values } .launchIn(uiScope)","title":"valuesChanges"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-slider/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.slider.Slider Extensions for com.google.android.material.slider.Slider \u00b6 Name Summary changeEvents Create a InitialValueFlow of change events on the Slider instance. fun Slider.changeEvents(): InitialValueFlow< SliderChangeEvent > touchEvents Create a Flow of touch events on the Slider instance. fun Slider.touchEvents(): Flow< SliderTouchEvent > valueChanges Create a InitialValueFlow of value change events on the Slider instance where the value emitted is the current value of the Slider . fun Slider.valueChanges(): InitialValueFlow< Float >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-slider/#extensions-for-comgoogleandroidmaterialsliderslider","text":"Name Summary changeEvents Create a InitialValueFlow of change events on the Slider instance. fun Slider.changeEvents(): InitialValueFlow< SliderChangeEvent > touchEvents Create a Flow of touch events on the Slider instance. fun Slider.touchEvents(): Flow< SliderTouchEvent > valueChanges Create a InitialValueFlow of value change events on the Slider instance where the value emitted is the current value of the Slider . fun Slider.valueChanges(): InitialValueFlow< Float >","title":"Extensions for com.google.android.material.slider.Slider"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-slider/change-events/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.slider.Slider / changeEvents changeEvents \u00b6 @CheckResult fun Slider.changeEvents(): InitialValueFlow< SliderChangeEvent > Create a InitialValueFlow of change events on the Slider instance. Note: Created flow keeps a strong reference to the Slider instance until the coroutine that launched the flow collector is cancelled. Example of usage: slider.changeEvents() .onEach { event -> // handle event } .launchIn(uiScope)","title":"Change events"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-slider/change-events/#changeevents","text":"@CheckResult fun Slider.changeEvents(): InitialValueFlow< SliderChangeEvent > Create a InitialValueFlow of change events on the Slider instance. Note: Created flow keeps a strong reference to the Slider instance until the coroutine that launched the flow collector is cancelled. Example of usage: slider.changeEvents() .onEach { event -> // handle event } .launchIn(uiScope)","title":"changeEvents"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-slider/touch-events/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.slider.Slider / touchEvents touchEvents \u00b6 @CheckResult fun Slider.touchEvents(): Flow< SliderTouchEvent > Create a Flow of touch events on the Slider instance. Note: Created flow keeps a strong reference to the Slider instance until the coroutine that launched the flow collector is cancelled. Example of usage: slider.touchEvents() .onEach { event -> // handle event } .launchIn(uiScope)","title":"Touch events"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-slider/touch-events/#touchevents","text":"@CheckResult fun Slider.touchEvents(): Flow< SliderTouchEvent > Create a Flow of touch events on the Slider instance. Note: Created flow keeps a strong reference to the Slider instance until the coroutine that launched the flow collector is cancelled. Example of usage: slider.touchEvents() .onEach { event -> // handle event } .launchIn(uiScope)","title":"touchEvents"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-slider/value-changes/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.slider.Slider / valueChanges valueChanges \u00b6 @CheckResult fun Slider.valueChanges(): InitialValueFlow< Float > Create a InitialValueFlow of value change events on the Slider instance where the value emitted is the current value of the Slider . Note: Created flow keeps a strong reference to the Slider instance until the coroutine that launched the flow collector is cancelled. Example of usage: slider.valueChanges() .onEach { value -> // handle value } .launchIn(uiScope)","title":"Value changes"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.slider.-slider/value-changes/#valuechanges","text":"@CheckResult fun Slider.valueChanges(): InitialValueFlow< Float > Create a InitialValueFlow of value change events on the Slider instance where the value emitted is the current value of the Slider . Note: Created flow keeps a strong reference to the Slider instance until the coroutine that launched the flow collector is cancelled. Example of usage: slider.valueChanges() .onEach { value -> // handle value } .launchIn(uiScope)","title":"valueChanges"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.snackbar.-snackbar/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.snackbar.Snackbar Extensions for com.google.android.material.snackbar.Snackbar \u00b6 Name Summary dismissEvents Create a Flow of dismiss events on the Snackbar instance where the value emitted can be one of the DISMISS_EVENT_* events from com.google.android.material.snackbar.Snackbar.Callback . fun Snackbar.dismissEvents(): Flow< Int > shownEvents Create a Flow of shown events on the Snackbar instance. fun Snackbar.shownEvents(): Flow< Unit >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.snackbar.-snackbar/#extensions-for-comgoogleandroidmaterialsnackbarsnackbar","text":"Name Summary dismissEvents Create a Flow of dismiss events on the Snackbar instance where the value emitted can be one of the DISMISS_EVENT_* events from com.google.android.material.snackbar.Snackbar.Callback . fun Snackbar.dismissEvents(): Flow< Int > shownEvents Create a Flow of shown events on the Snackbar instance. fun Snackbar.shownEvents(): Flow< Unit >","title":"Extensions for com.google.android.material.snackbar.Snackbar"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.snackbar.-snackbar/dismiss-events/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.snackbar.Snackbar / dismissEvents dismissEvents \u00b6 @CheckResult fun Snackbar.dismissEvents(): Flow< Int > Create a Flow of dismiss events on the Snackbar instance where the value emitted can be one of the DISMISS_EVENT_* events from com.google.android.material.snackbar.Snackbar.Callback . Note: Created flow keeps a strong reference to the Snackbar instance until the coroutine that launched the flow collector is cancelled. Example of usage: snackbar.dismissEvents() .onEach { event -> // handle dismiss event } .launchIn(uiScope)","title":"Dismiss events"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.snackbar.-snackbar/dismiss-events/#dismissevents","text":"@CheckResult fun Snackbar.dismissEvents(): Flow< Int > Create a Flow of dismiss events on the Snackbar instance where the value emitted can be one of the DISMISS_EVENT_* events from com.google.android.material.snackbar.Snackbar.Callback . Note: Created flow keeps a strong reference to the Snackbar instance until the coroutine that launched the flow collector is cancelled. Example of usage: snackbar.dismissEvents() .onEach { event -> // handle dismiss event } .launchIn(uiScope)","title":"dismissEvents"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.snackbar.-snackbar/shown-events/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.snackbar.Snackbar / shownEvents shownEvents \u00b6 @CheckResult fun Snackbar.shownEvents(): Flow< Unit > Create a Flow of shown events on the Snackbar instance. Note: Created flow keeps a strong reference to the Snackbar instance until the coroutine that launched the flow collector is cancelled. Example of usage: snackbar.shownEvents() .onEach { // handle shown event } .launchIn(uiScope)","title":"Shown events"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.snackbar.-snackbar/shown-events/#shownevents","text":"@CheckResult fun Snackbar.shownEvents(): Flow< Unit > Create a Flow of shown events on the Snackbar instance. Note: Created flow keeps a strong reference to the Snackbar instance until the coroutine that launched the flow collector is cancelled. Example of usage: snackbar.shownEvents() .onEach { // handle shown event } .launchIn(uiScope)","title":"shownEvents"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.tabs.-tab-layout/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.tabs.TabLayout Extensions for com.google.android.material.tabs.TabLayout \u00b6 Name Summary tabSelectionEvents Create a Flow of tab selection events on the TabLayout instance where the value emitted is one of the 3 event types: TabLayoutSelectionEvent.TabSelected , TabLayoutSelectionEvent.TabReselected , TabLayoutSelectionEvent.TabUnselected fun TabLayout.tabSelectionEvents(): Flow< TabLayoutSelectionEvent >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.tabs.-tab-layout/#extensions-for-comgoogleandroidmaterialtabstablayout","text":"Name Summary tabSelectionEvents Create a Flow of tab selection events on the TabLayout instance where the value emitted is one of the 3 event types: TabLayoutSelectionEvent.TabSelected , TabLayoutSelectionEvent.TabReselected , TabLayoutSelectionEvent.TabUnselected fun TabLayout.tabSelectionEvents(): Flow< TabLayoutSelectionEvent >","title":"Extensions for com.google.android.material.tabs.TabLayout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.tabs.-tab-layout/tab-selection-events/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.tabs.TabLayout / tabSelectionEvents tabSelectionEvents \u00b6 @CheckResult fun TabLayout.tabSelectionEvents(): Flow< TabLayoutSelectionEvent > Create a Flow of tab selection events on the TabLayout instance where the value emitted is one of the 3 event types: TabLayoutSelectionEvent.TabSelected , TabLayoutSelectionEvent.TabReselected , TabLayoutSelectionEvent.TabUnselected Note: if a a tab is already selected, TabLayoutSelectionEvent.TabSelected will be emitted immediately upon collection. Note: Created flow keeps a strong reference to the TabLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: // observe all 3 types of events tabLayout.tabSelectionEvents() .onEach { event -> when(event) { is TabLayoutSelectionEvent.TabSelected -> { // handle selected event } is TabLayoutSelectionEvent.TabReselected -> { // handle reselected event } is TabLayoutSelectionEvent.TabUnselected -> { // handle unselected event } } } .launchIn(uiScope) // only observe 1 type of events tabLayout.tabSelectionEvents() .filterIsInstance<TabLayoutSelectionEvent.TabSelected>() .onEach { event -> // handle selected event } .launchIn(uiScope)","title":"Tab selection events"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.tabs.-tab-layout/tab-selection-events/#tabselectionevents","text":"@CheckResult fun TabLayout.tabSelectionEvents(): Flow< TabLayoutSelectionEvent > Create a Flow of tab selection events on the TabLayout instance where the value emitted is one of the 3 event types: TabLayoutSelectionEvent.TabSelected , TabLayoutSelectionEvent.TabReselected , TabLayoutSelectionEvent.TabUnselected Note: if a a tab is already selected, TabLayoutSelectionEvent.TabSelected will be emitted immediately upon collection. Note: Created flow keeps a strong reference to the TabLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: // observe all 3 types of events tabLayout.tabSelectionEvents() .onEach { event -> when(event) { is TabLayoutSelectionEvent.TabSelected -> { // handle selected event } is TabLayoutSelectionEvent.TabReselected -> { // handle reselected event } is TabLayoutSelectionEvent.TabUnselected -> { // handle unselected event } } } .launchIn(uiScope) // only observe 1 type of events tabLayout.tabSelectionEvents() .filterIsInstance<TabLayoutSelectionEvent.TabSelected>() .onEach { event -> // handle selected event } .launchIn(uiScope)","title":"tabSelectionEvents"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.textfield.TextInputLayout Extensions for com.google.android.material.textfield.TextInputLayout \u00b6 Name Summary endIconClicks Create a Flow of clicked events on the TextInputLayout instance\u2019s end icon. fun TextInputLayout.endIconClicks(): Flow< Unit > endIconLongClicks Create a Flow of long clicked events on the TextInputLayout instance\u2019s end icon. fun TextInputLayout.endIconLongClicks(): Flow< Unit > errorIconClicks Create a Flow of clicked events on the TextInputLayout instance\u2019s error icon. fun TextInputLayout.errorIconClicks(): Flow< Unit > errorIconLongClicks Create a Flow of long clicked events on the TextInputLayout instance\u2019s error icon. fun TextInputLayout.errorIconLongClicks(): Flow< Unit > startIconClicks Create a Flow of clicked events on the TextInputLayout instance\u2019s start icon. fun TextInputLayout.startIconClicks(): Flow< Unit > startIconLongClicks Create a Flow of long clicked events on the TextInputLayout instance\u2019s start icon. fun TextInputLayout.startIconLongClicks(): Flow< Unit >","title":"Index"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/#extensions-for-comgoogleandroidmaterialtextfieldtextinputlayout","text":"Name Summary endIconClicks Create a Flow of clicked events on the TextInputLayout instance\u2019s end icon. fun TextInputLayout.endIconClicks(): Flow< Unit > endIconLongClicks Create a Flow of long clicked events on the TextInputLayout instance\u2019s end icon. fun TextInputLayout.endIconLongClicks(): Flow< Unit > errorIconClicks Create a Flow of clicked events on the TextInputLayout instance\u2019s error icon. fun TextInputLayout.errorIconClicks(): Flow< Unit > errorIconLongClicks Create a Flow of long clicked events on the TextInputLayout instance\u2019s error icon. fun TextInputLayout.errorIconLongClicks(): Flow< Unit > startIconClicks Create a Flow of clicked events on the TextInputLayout instance\u2019s start icon. fun TextInputLayout.startIconClicks(): Flow< Unit > startIconLongClicks Create a Flow of long clicked events on the TextInputLayout instance\u2019s start icon. fun TextInputLayout.startIconLongClicks(): Flow< Unit >","title":"Extensions for com.google.android.material.textfield.TextInputLayout"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/end-icon-clicks/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.textfield.TextInputLayout / endIconClicks endIconClicks \u00b6 @CheckResult fun TextInputLayout.endIconClicks(): Flow< Unit > Create a Flow of clicked events on the TextInputLayout instance\u2019s end icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.endIconClicks() .onEach { // handle end icon clicked } .launchIn(uiScope)","title":"End icon clicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/end-icon-clicks/#endiconclicks","text":"@CheckResult fun TextInputLayout.endIconClicks(): Flow< Unit > Create a Flow of clicked events on the TextInputLayout instance\u2019s end icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.endIconClicks() .onEach { // handle end icon clicked } .launchIn(uiScope)","title":"endIconClicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/end-icon-long-clicks/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.textfield.TextInputLayout / endIconLongClicks endIconLongClicks \u00b6 @CheckResult fun TextInputLayout.endIconLongClicks(): Flow< Unit > Create a Flow of long clicked events on the TextInputLayout instance\u2019s end icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.endIconLongClicks() .onEach { // handle end icon long clicked } .launchIn(uiScope)","title":"End icon long clicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/end-icon-long-clicks/#endiconlongclicks","text":"@CheckResult fun TextInputLayout.endIconLongClicks(): Flow< Unit > Create a Flow of long clicked events on the TextInputLayout instance\u2019s end icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.endIconLongClicks() .onEach { // handle end icon long clicked } .launchIn(uiScope)","title":"endIconLongClicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/error-icon-clicks/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.textfield.TextInputLayout / errorIconClicks errorIconClicks \u00b6 @CheckResult fun TextInputLayout.errorIconClicks(): Flow< Unit > Create a Flow of clicked events on the TextInputLayout instance\u2019s error icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.errorIconClicks() .onEach { // handle error icon clicked } .launchIn(uiScope)","title":"Error icon clicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/error-icon-clicks/#erroriconclicks","text":"@CheckResult fun TextInputLayout.errorIconClicks(): Flow< Unit > Create a Flow of clicked events on the TextInputLayout instance\u2019s error icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.errorIconClicks() .onEach { // handle error icon clicked } .launchIn(uiScope)","title":"errorIconClicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/error-icon-long-clicks/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.textfield.TextInputLayout / errorIconLongClicks errorIconLongClicks \u00b6 @CheckResult fun TextInputLayout.errorIconLongClicks(): Flow< Unit > Create a Flow of long clicked events on the TextInputLayout instance\u2019s error icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.errorIconLongClicks() .onEach { // handle error icon long clicked } .launchIn(uiScope)","title":"Error icon long clicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/error-icon-long-clicks/#erroriconlongclicks","text":"@CheckResult fun TextInputLayout.errorIconLongClicks(): Flow< Unit > Create a Flow of long clicked events on the TextInputLayout instance\u2019s error icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.errorIconLongClicks() .onEach { // handle error icon long clicked } .launchIn(uiScope)","title":"errorIconLongClicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/start-icon-clicks/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.textfield.TextInputLayout / startIconClicks startIconClicks \u00b6 @CheckResult fun TextInputLayout.startIconClicks(): Flow< Unit > Create a Flow of clicked events on the TextInputLayout instance\u2019s start icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.startIconClicks() .onEach { // handle start icon clicked } .launchIn(uiScope)","title":"Start icon clicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/start-icon-clicks/#starticonclicks","text":"@CheckResult fun TextInputLayout.startIconClicks(): Flow< Unit > Create a Flow of clicked events on the TextInputLayout instance\u2019s start icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.startIconClicks() .onEach { // handle start icon clicked } .launchIn(uiScope)","title":"startIconClicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/start-icon-long-clicks/","text":"flowbinding-material / reactivecircus.flowbinding.material / com.google.android.material.textfield.TextInputLayout / startIconLongClicks startIconLongClicks \u00b6 @CheckResult fun TextInputLayout.startIconLongClicks(): Flow< Unit > Create a Flow of long clicked events on the TextInputLayout instance\u2019s start icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.startIconLongClicks() .onEach { // handle start icon long clicked } .launchIn(uiScope)","title":"Start icon long clicks"},{"location":"api/flowbinding-material/reactivecircus.flowbinding.material/com.google.android.material.textfield.-text-input-layout/start-icon-long-clicks/#starticonlongclicks","text":"@CheckResult fun TextInputLayout.startIconLongClicks(): Flow< Unit > Create a Flow of long clicked events on the TextInputLayout instance\u2019s start icon. Note: Created flow keeps a strong reference to the TextInputLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: textInputLayout.startIconLongClicks() .onEach { // handle start icon long clicked } .launchIn(uiScope)","title":"startIconLongClicks"},{"location":"api/flowbinding-navigation/","text":"flowbinding-navigation Packages \u00b6 Name Summary reactivecircus.flowbinding.navigation Index \u00b6 All Types","title":"flowbinding-navigation"},{"location":"api/flowbinding-navigation/#packages","text":"Name Summary reactivecircus.flowbinding.navigation","title":"Packages"},{"location":"api/flowbinding-navigation/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-navigation/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.flowbinding.navigation.DestinationChangeEvent \u00b6 | (extensions in package reactivecircus.flowbinding.navigation) androidx.navigation.NavController \u00b6","title":"Index"},{"location":"api/flowbinding-navigation/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/flowbinding-navigation/alltypes/#reactivecircusflowbindingnavigationdestinationchangeevent","text":"| (extensions in package reactivecircus.flowbinding.navigation)","title":"reactivecircus.flowbinding.navigation.DestinationChangeEvent"},{"location":"api/flowbinding-navigation/alltypes/#androidxnavigationnavcontroller","text":"","title":"androidx.navigation.NavController"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/","text":"flowbinding-navigation / reactivecircus.flowbinding.navigation Package reactivecircus.flowbinding.navigation \u00b6 Types \u00b6 Name Summary DestinationChangeEvent class DestinationChangeEvent Extensions for External Classes \u00b6 Name Summary androidx.navigation.NavController","title":"Index"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/#package-reactivecircusflowbindingnavigation","text":"","title":"Package reactivecircus.flowbinding.navigation"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/#types","text":"Name Summary DestinationChangeEvent class DestinationChangeEvent","title":"Types"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/#extensions-for-external-classes","text":"Name Summary androidx.navigation.NavController","title":"Extensions for External Classes"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/","text":"flowbinding-navigation / reactivecircus.flowbinding.navigation / DestinationChangeEvent DestinationChangeEvent \u00b6 class DestinationChangeEvent Constructors \u00b6 Name Summary <init> DestinationChangeEvent(navController: NavController, destination: NavDestination, arguments: Bundle ?) Properties \u00b6 Name Summary arguments val arguments: Bundle ? destination val destination: NavDestination navController val navController: NavController","title":"Index"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/#destinationchangeevent","text":"class DestinationChangeEvent","title":"DestinationChangeEvent"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/#constructors","text":"Name Summary <init> DestinationChangeEvent(navController: NavController, destination: NavDestination, arguments: Bundle ?)","title":"Constructors"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/#properties","text":"Name Summary arguments val arguments: Bundle ? destination val destination: NavDestination navController val navController: NavController","title":"Properties"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/-init-/","text":"flowbinding-navigation / reactivecircus.flowbinding.navigation / DestinationChangeEvent / <init> <init> \u00b6 DestinationChangeEvent(navController: NavController, destination: NavDestination, arguments: Bundle ?)","title":" init "},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/-init-/#init","text":"DestinationChangeEvent(navController: NavController, destination: NavDestination, arguments: Bundle ?)","title":"&lt;init&gt;"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/arguments/","text":"flowbinding-navigation / reactivecircus.flowbinding.navigation / DestinationChangeEvent / arguments arguments \u00b6 val arguments: Bundle ?","title":"Arguments"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/arguments/#arguments","text":"val arguments: Bundle ?","title":"arguments"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/destination/","text":"flowbinding-navigation / reactivecircus.flowbinding.navigation / DestinationChangeEvent / destination destination \u00b6 val destination: NavDestination","title":"Destination"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/destination/#destination","text":"val destination: NavDestination","title":"destination"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/nav-controller/","text":"flowbinding-navigation / reactivecircus.flowbinding.navigation / DestinationChangeEvent / navController navController \u00b6 val navController: NavController","title":"Nav controller"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/-destination-change-event/nav-controller/#navcontroller","text":"val navController: NavController","title":"navController"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/androidx.navigation.-nav-controller/","text":"flowbinding-navigation / reactivecircus.flowbinding.navigation / androidx.navigation.NavController Extensions for androidx.navigation.NavController \u00b6 Name Summary destinationChangeEvents Create a Flow of destination change events on the NavController instance. fun NavController.destinationChangeEvents(): Flow< DestinationChangeEvent >","title":"Index"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/androidx.navigation.-nav-controller/#extensions-for-androidxnavigationnavcontroller","text":"Name Summary destinationChangeEvents Create a Flow of destination change events on the NavController instance. fun NavController.destinationChangeEvents(): Flow< DestinationChangeEvent >","title":"Extensions for androidx.navigation.NavController"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/androidx.navigation.-nav-controller/destination-change-events/","text":"flowbinding-navigation / reactivecircus.flowbinding.navigation / androidx.navigation.NavController / destinationChangeEvents destinationChangeEvents \u00b6 @CheckResult fun NavController.destinationChangeEvents(): Flow< DestinationChangeEvent > Create a Flow of destination change events on the NavController instance. Note: Created flow keeps a strong reference to the NavController instance until the coroutine that launched the flow collector is cancelled. Example of usage: navController.destinationChangeEvents() .onEach { event -> // handle destination change event } .launchIn(uiScope)","title":"Destination change events"},{"location":"api/flowbinding-navigation/reactivecircus.flowbinding.navigation/androidx.navigation.-nav-controller/destination-change-events/#destinationchangeevents","text":"@CheckResult fun NavController.destinationChangeEvents(): Flow< DestinationChangeEvent > Create a Flow of destination change events on the NavController instance. Note: Created flow keeps a strong reference to the NavController instance until the coroutine that launched the flow collector is cancelled. Example of usage: navController.destinationChangeEvents() .onEach { event -> // handle destination change event } .launchIn(uiScope)","title":"destinationChangeEvents"},{"location":"api/flowbinding-preference/","text":"flowbinding-preference Packages \u00b6 Name Summary reactivecircus.flowbinding.preference Index \u00b6 All Types","title":"flowbinding-preference"},{"location":"api/flowbinding-preference/#packages","text":"Name Summary reactivecircus.flowbinding.preference","title":"Packages"},{"location":"api/flowbinding-preference/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-preference/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.flowbinding.preference.EditTextBindEvent \u00b6 | (extensions in package reactivecircus.flowbinding.preference) androidx.preference.EditTextPreference \u00b6 | (extensions in package reactivecircus.flowbinding.preference) androidx.preference.Preference \u00b6","title":"Index"},{"location":"api/flowbinding-preference/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/flowbinding-preference/alltypes/#reactivecircusflowbindingpreferenceedittextbindevent","text":"| (extensions in package reactivecircus.flowbinding.preference)","title":"reactivecircus.flowbinding.preference.EditTextBindEvent"},{"location":"api/flowbinding-preference/alltypes/#androidxpreferenceedittextpreference","text":"| (extensions in package reactivecircus.flowbinding.preference)","title":"androidx.preference.EditTextPreference"},{"location":"api/flowbinding-preference/alltypes/#androidxpreferencepreference","text":"","title":"androidx.preference.Preference"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/","text":"flowbinding-preference / reactivecircus.flowbinding.preference Package reactivecircus.flowbinding.preference \u00b6 Types \u00b6 Name Summary EditTextBindEvent class EditTextBindEvent Extensions for External Classes \u00b6 Name Summary androidx.preference.EditTextPreference androidx.preference.Preference","title":"Index"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/#package-reactivecircusflowbindingpreference","text":"","title":"Package reactivecircus.flowbinding.preference"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/#types","text":"Name Summary EditTextBindEvent class EditTextBindEvent","title":"Types"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/#extensions-for-external-classes","text":"Name Summary androidx.preference.EditTextPreference androidx.preference.Preference","title":"Extensions for External Classes"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/-edit-text-bind-event/","text":"flowbinding-preference / reactivecircus.flowbinding.preference / EditTextBindEvent EditTextBindEvent \u00b6 class EditTextBindEvent Constructors \u00b6 Name Summary <init> EditTextBindEvent(editText: EditText ) Properties \u00b6 Name Summary editText val editText: EditText","title":"Index"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/-edit-text-bind-event/#edittextbindevent","text":"class EditTextBindEvent","title":"EditTextBindEvent"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/-edit-text-bind-event/#constructors","text":"Name Summary <init> EditTextBindEvent(editText: EditText )","title":"Constructors"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/-edit-text-bind-event/#properties","text":"Name Summary editText val editText: EditText","title":"Properties"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/-edit-text-bind-event/-init-/","text":"flowbinding-preference / reactivecircus.flowbinding.preference / EditTextBindEvent / <init> <init> \u00b6 EditTextBindEvent(editText: EditText )","title":" init "},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/-edit-text-bind-event/-init-/#init","text":"EditTextBindEvent(editText: EditText )","title":"&lt;init&gt;"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/-edit-text-bind-event/edit-text/","text":"flowbinding-preference / reactivecircus.flowbinding.preference / EditTextBindEvent / editText editText \u00b6 val editText: EditText","title":"Edit text"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/-edit-text-bind-event/edit-text/#edittext","text":"val editText: EditText","title":"editText"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-edit-text-preference/","text":"flowbinding-preference / reactivecircus.flowbinding.preference / androidx.preference.EditTextPreference Extensions for androidx.preference.EditTextPreference \u00b6 Name Summary editTextBindEvents Create a Flow of bind events on the EditTextPreference instance. fun EditTextPreference.editTextBindEvents(): Flow< EditTextBindEvent >","title":"Index"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-edit-text-preference/#extensions-for-androidxpreferenceedittextpreference","text":"Name Summary editTextBindEvents Create a Flow of bind events on the EditTextPreference instance. fun EditTextPreference.editTextBindEvents(): Flow< EditTextBindEvent >","title":"Extensions for androidx.preference.EditTextPreference"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-edit-text-preference/edit-text-bind-events/","text":"flowbinding-preference / reactivecircus.flowbinding.preference / androidx.preference.EditTextPreference / editTextBindEvents editTextBindEvents \u00b6 @CheckResult fun EditTextPreference.editTextBindEvents(): Flow< EditTextBindEvent > Create a Flow of bind events on the EditTextPreference instance. Note: Created flow keeps a strong reference to the EditTextPreference instance until the coroutine that launched the flow collector is cancelled. Example of usage: editTextPreference.editTextBindEvents() .onEach { event -> // handle edit text preference bind event } .launchIn(uiScope)","title":"Edit text bind events"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-edit-text-preference/edit-text-bind-events/#edittextbindevents","text":"@CheckResult fun EditTextPreference.editTextBindEvents(): Flow< EditTextBindEvent > Create a Flow of bind events on the EditTextPreference instance. Note: Created flow keeps a strong reference to the EditTextPreference instance until the coroutine that launched the flow collector is cancelled. Example of usage: editTextPreference.editTextBindEvents() .onEach { event -> // handle edit text preference bind event } .launchIn(uiScope)","title":"editTextBindEvents"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-preference/","text":"flowbinding-preference / reactivecircus.flowbinding.preference / androidx.preference.Preference Extensions for androidx.preference.Preference \u00b6 Name Summary preferenceChanges Create a Flow of change events on the Preference instance where the value emitted is the new value of the Preference . fun Preference.preferenceChanges(): Flow< Any > preferenceClicks Create a Flow of click events on the Preference instance. fun Preference.preferenceClicks(): Flow< Unit >","title":"Index"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-preference/#extensions-for-androidxpreferencepreference","text":"Name Summary preferenceChanges Create a Flow of change events on the Preference instance where the value emitted is the new value of the Preference . fun Preference.preferenceChanges(): Flow< Any > preferenceClicks Create a Flow of click events on the Preference instance. fun Preference.preferenceClicks(): Flow< Unit >","title":"Extensions for androidx.preference.Preference"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-preference/preference-changes/","text":"flowbinding-preference / reactivecircus.flowbinding.preference / androidx.preference.Preference / preferenceChanges preferenceChanges \u00b6 @CheckResult fun Preference.preferenceChanges(): Flow< Any > Create a Flow of change events on the Preference instance where the value emitted is the new value of the Preference . Note: Created flow keeps a strong reference to the Preference instance until the coroutine that launched the flow collector is cancelled. Example of usage: preference.preferenceClicks() .onEach { value -> // handle value } .launchIn(uiScope)","title":"Preference changes"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-preference/preference-changes/#preferencechanges","text":"@CheckResult fun Preference.preferenceChanges(): Flow< Any > Create a Flow of change events on the Preference instance where the value emitted is the new value of the Preference . Note: Created flow keeps a strong reference to the Preference instance until the coroutine that launched the flow collector is cancelled. Example of usage: preference.preferenceClicks() .onEach { value -> // handle value } .launchIn(uiScope)","title":"preferenceChanges"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-preference/preference-clicks/","text":"flowbinding-preference / reactivecircus.flowbinding.preference / androidx.preference.Preference / preferenceClicks preferenceClicks \u00b6 @CheckResult fun Preference.preferenceClicks(): Flow< Unit > Create a Flow of click events on the Preference instance. Note: Created flow keeps a strong reference to the Preference instance until the coroutine that launched the flow collector is cancelled. Example of usage: preference.preferenceClicks() .onEach { // handle preference click event } .launchIn(uiScope)","title":"Preference clicks"},{"location":"api/flowbinding-preference/reactivecircus.flowbinding.preference/androidx.preference.-preference/preference-clicks/#preferenceclicks","text":"@CheckResult fun Preference.preferenceClicks(): Flow< Unit > Create a Flow of click events on the Preference instance. Note: Created flow keeps a strong reference to the Preference instance until the coroutine that launched the flow collector is cancelled. Example of usage: preference.preferenceClicks() .onEach { // handle preference click event } .launchIn(uiScope)","title":"preferenceClicks"},{"location":"api/flowbinding-recyclerview/","text":"flowbinding-recyclerview Packages \u00b6 Name Summary reactivecircus.flowbinding.recyclerview Index \u00b6 All Types","title":"flowbinding-recyclerview"},{"location":"api/flowbinding-recyclerview/#packages","text":"Name Summary reactivecircus.flowbinding.recyclerview","title":"Packages"},{"location":"api/flowbinding-recyclerview/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-recyclerview/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.flowbinding.recyclerview.FlingEvent \u00b6 | (extensions in package reactivecircus.flowbinding.recyclerview) androidx.recyclerview.widget.RecyclerView \u00b6 | reactivecircus.flowbinding.recyclerview.RecyclerViewChildAttachStateChangeEvent \u00b6 | reactivecircus.flowbinding.recyclerview.RecyclerViewScrollEvent \u00b6","title":"Index"},{"location":"api/flowbinding-recyclerview/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/flowbinding-recyclerview/alltypes/#reactivecircusflowbindingrecyclerviewflingevent","text":"| (extensions in package reactivecircus.flowbinding.recyclerview)","title":"reactivecircus.flowbinding.recyclerview.FlingEvent"},{"location":"api/flowbinding-recyclerview/alltypes/#androidxrecyclerviewwidgetrecyclerview","text":"|","title":"androidx.recyclerview.widget.RecyclerView"},{"location":"api/flowbinding-recyclerview/alltypes/#reactivecircusflowbindingrecyclerviewrecyclerviewchildattachstatechangeevent","text":"|","title":"reactivecircus.flowbinding.recyclerview.RecyclerViewChildAttachStateChangeEvent"},{"location":"api/flowbinding-recyclerview/alltypes/#reactivecircusflowbindingrecyclerviewrecyclerviewscrollevent","text":"","title":"reactivecircus.flowbinding.recyclerview.RecyclerViewScrollEvent"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview Package reactivecircus.flowbinding.recyclerview \u00b6 Types \u00b6 Name Summary FlingEvent class FlingEvent RecyclerViewChildAttachStateChangeEvent sealed class RecyclerViewChildAttachStateChangeEvent RecyclerViewScrollEvent class RecyclerViewScrollEvent Extensions for External Classes \u00b6 Name Summary androidx.recyclerview.widget.RecyclerView Functions \u00b6 Name Summary dataChanges Create a InitialValueFlow of data change events on the RecyclerView.Adapter instance. fun <T : Adapter<out ViewHolder>> T.dataChanges(): InitialValueFlow<T>","title":"Index"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/#package-reactivecircusflowbindingrecyclerview","text":"","title":"Package reactivecircus.flowbinding.recyclerview"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/#types","text":"Name Summary FlingEvent class FlingEvent RecyclerViewChildAttachStateChangeEvent sealed class RecyclerViewChildAttachStateChangeEvent RecyclerViewScrollEvent class RecyclerViewScrollEvent","title":"Types"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/#extensions-for-external-classes","text":"Name Summary androidx.recyclerview.widget.RecyclerView","title":"Extensions for External Classes"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/#functions","text":"Name Summary dataChanges Create a InitialValueFlow of data change events on the RecyclerView.Adapter instance. fun <T : Adapter<out ViewHolder>> T.dataChanges(): InitialValueFlow<T>","title":"Functions"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/data-changes/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / dataChanges dataChanges \u00b6 @CheckResult fun <T : Adapter<out ViewHolder>> T.dataChanges(): InitialValueFlow<T> Create a InitialValueFlow of data change events on the RecyclerView.Adapter instance. Note: Created flow keeps a strong reference to the RecyclerView.Adapter instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapter.dataChanges() .onEach { adapter -> // handle data changed } .launchIn(uiScope)","title":"Data changes"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/data-changes/#datachanges","text":"@CheckResult fun <T : Adapter<out ViewHolder>> T.dataChanges(): InitialValueFlow<T> Create a InitialValueFlow of data change events on the RecyclerView.Adapter instance. Note: Created flow keeps a strong reference to the RecyclerView.Adapter instance until the coroutine that launched the flow collector is cancelled. Example of usage: adapter.dataChanges() .onEach { adapter -> // handle data changed } .launchIn(uiScope)","title":"dataChanges"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / FlingEvent FlingEvent \u00b6 class FlingEvent Constructors \u00b6 Name Summary <init> FlingEvent(view: RecyclerView, velocityX: Int , velocityY: Int ) Properties \u00b6 Name Summary velocityX val velocityX: Int velocityY val velocityY: Int view val view: RecyclerView","title":"Index"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/#flingevent","text":"class FlingEvent","title":"FlingEvent"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/#constructors","text":"Name Summary <init> FlingEvent(view: RecyclerView, velocityX: Int , velocityY: Int )","title":"Constructors"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/#properties","text":"Name Summary velocityX val velocityX: Int velocityY val velocityY: Int view val view: RecyclerView","title":"Properties"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/-init-/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / FlingEvent / <init> <init> \u00b6 FlingEvent(view: RecyclerView, velocityX: Int , velocityY: Int )","title":" init "},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/-init-/#init","text":"FlingEvent(view: RecyclerView, velocityX: Int , velocityY: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/velocity-x/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / FlingEvent / velocityX velocityX \u00b6 val velocityX: Int","title":"Velocity x"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/velocity-x/#velocityx","text":"val velocityX: Int","title":"velocityX"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/velocity-y/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / FlingEvent / velocityY velocityY \u00b6 val velocityY: Int","title":"Velocity y"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/velocity-y/#velocityy","text":"val velocityY: Int","title":"velocityY"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/view/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / FlingEvent / view view \u00b6 val view: RecyclerView","title":"View"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-fling-event/view/#view","text":"val view: RecyclerView","title":"view"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent RecyclerViewChildAttachStateChangeEvent \u00b6 sealed class RecyclerViewChildAttachStateChangeEvent Types \u00b6 Name Summary Attached class Attached : RecyclerViewChildAttachStateChangeEvent Detached class Detached : RecyclerViewChildAttachStateChangeEvent Properties \u00b6 Name Summary child abstract val child: View view abstract val view: RecyclerView","title":"Index"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/#recyclerviewchildattachstatechangeevent","text":"sealed class RecyclerViewChildAttachStateChangeEvent","title":"RecyclerViewChildAttachStateChangeEvent"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/#types","text":"Name Summary Attached class Attached : RecyclerViewChildAttachStateChangeEvent Detached class Detached : RecyclerViewChildAttachStateChangeEvent","title":"Types"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/#properties","text":"Name Summary child abstract val child: View view abstract val view: RecyclerView","title":"Properties"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/child/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / child child \u00b6 abstract val child: View","title":"Child"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/child/#child","text":"abstract val child: View","title":"child"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/view/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / view view \u00b6 abstract val view: RecyclerView","title":"View"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/view/#view","text":"abstract val view: RecyclerView","title":"view"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / Attached Attached \u00b6 class Attached : RecyclerViewChildAttachStateChangeEvent Constructors \u00b6 Name Summary <init> Attached(view: RecyclerView, child: View ) Properties \u00b6 Name Summary child val child: View view val view: RecyclerView","title":"Index"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/#attached","text":"class Attached : RecyclerViewChildAttachStateChangeEvent","title":"Attached"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/#constructors","text":"Name Summary <init> Attached(view: RecyclerView, child: View )","title":"Constructors"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/#properties","text":"Name Summary child val child: View view val view: RecyclerView","title":"Properties"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/-init-/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / Attached / <init> <init> \u00b6 Attached(view: RecyclerView, child: View )","title":" init "},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/-init-/#init","text":"Attached(view: RecyclerView, child: View )","title":"&lt;init&gt;"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/child/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / Attached / child child \u00b6 val child: View","title":"Child"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/child/#child","text":"val child: View","title":"child"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/view/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / Attached / view view \u00b6 val view: RecyclerView","title":"View"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-attached/view/#view","text":"val view: RecyclerView","title":"view"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / Detached Detached \u00b6 class Detached : RecyclerViewChildAttachStateChangeEvent Constructors \u00b6 Name Summary <init> Detached(view: RecyclerView, child: View ) Properties \u00b6 Name Summary child val child: View view val view: RecyclerView","title":"Index"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/#detached","text":"class Detached : RecyclerViewChildAttachStateChangeEvent","title":"Detached"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/#constructors","text":"Name Summary <init> Detached(view: RecyclerView, child: View )","title":"Constructors"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/#properties","text":"Name Summary child val child: View view val view: RecyclerView","title":"Properties"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/-init-/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / Detached / <init> <init> \u00b6 Detached(view: RecyclerView, child: View )","title":" init "},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/-init-/#init","text":"Detached(view: RecyclerView, child: View )","title":"&lt;init&gt;"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/child/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / Detached / child child \u00b6 val child: View","title":"Child"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/child/#child","text":"val child: View","title":"child"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/view/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewChildAttachStateChangeEvent / Detached / view view \u00b6 val view: RecyclerView","title":"View"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-child-attach-state-change-event/-detached/view/#view","text":"val view: RecyclerView","title":"view"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewScrollEvent RecyclerViewScrollEvent \u00b6 class RecyclerViewScrollEvent Constructors \u00b6 Name Summary <init> RecyclerViewScrollEvent(view: RecyclerView, dx: Int , dy: Int ) Properties \u00b6 Name Summary dx val dx: Int dy val dy: Int view val view: RecyclerView","title":"Index"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/#recyclerviewscrollevent","text":"class RecyclerViewScrollEvent","title":"RecyclerViewScrollEvent"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/#constructors","text":"Name Summary <init> RecyclerViewScrollEvent(view: RecyclerView, dx: Int , dy: Int )","title":"Constructors"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/#properties","text":"Name Summary dx val dx: Int dy val dy: Int view val view: RecyclerView","title":"Properties"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/-init-/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewScrollEvent / <init> <init> \u00b6 RecyclerViewScrollEvent(view: RecyclerView, dx: Int , dy: Int )","title":" init "},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/-init-/#init","text":"RecyclerViewScrollEvent(view: RecyclerView, dx: Int , dy: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/dx/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewScrollEvent / dx dx \u00b6 val dx: Int","title":"Dx"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/dx/#dx","text":"val dx: Int","title":"dx"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/dy/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewScrollEvent / dy dy \u00b6 val dy: Int","title":"Dy"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/dy/#dy","text":"val dy: Int","title":"dy"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/view/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / RecyclerViewScrollEvent / view view \u00b6 val view: RecyclerView","title":"View"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/-recycler-view-scroll-event/view/#view","text":"val view: RecyclerView","title":"view"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / androidx.recyclerview.widget.RecyclerView Extensions for androidx.recyclerview.widget.RecyclerView \u00b6 Name Summary childAttachStateChangeEvents Create a Flow of child attach state change events on the RecyclerView instance where the value emitted is one of the 2 event types: RecyclerViewChildAttachStateChangeEvent.Attached , RecyclerViewChildAttachStateChangeEvent.Detached fun RecyclerView.childAttachStateChangeEvents(): Flow< RecyclerViewChildAttachStateChangeEvent > flingEvents Create a Flow of fling events on the RecyclerView instance. fun RecyclerView.flingEvents(handled: ( FlingEvent ) -> Boolean = { true }): Flow< FlingEvent > scrollEvents Create a Flow of scroll events on the RecyclerView instance. fun RecyclerView.scrollEvents(): Flow< RecyclerViewScrollEvent > scrollStateChanges Create a Flow of scroll state change events on the RecyclerView instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . fun RecyclerView.scrollStateChanges(): Flow< Int >","title":"Index"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/#extensions-for-androidxrecyclerviewwidgetrecyclerview","text":"Name Summary childAttachStateChangeEvents Create a Flow of child attach state change events on the RecyclerView instance where the value emitted is one of the 2 event types: RecyclerViewChildAttachStateChangeEvent.Attached , RecyclerViewChildAttachStateChangeEvent.Detached fun RecyclerView.childAttachStateChangeEvents(): Flow< RecyclerViewChildAttachStateChangeEvent > flingEvents Create a Flow of fling events on the RecyclerView instance. fun RecyclerView.flingEvents(handled: ( FlingEvent ) -> Boolean = { true }): Flow< FlingEvent > scrollEvents Create a Flow of scroll events on the RecyclerView instance. fun RecyclerView.scrollEvents(): Flow< RecyclerViewScrollEvent > scrollStateChanges Create a Flow of scroll state change events on the RecyclerView instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . fun RecyclerView.scrollStateChanges(): Flow< Int >","title":"Extensions for androidx.recyclerview.widget.RecyclerView"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/child-attach-state-change-events/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / androidx.recyclerview.widget.RecyclerView / childAttachStateChangeEvents childAttachStateChangeEvents \u00b6 @CheckResult fun RecyclerView.childAttachStateChangeEvents(): Flow< RecyclerViewChildAttachStateChangeEvent > Create a Flow of child attach state change events on the RecyclerView instance where the value emitted is one of the 2 event types: RecyclerViewChildAttachStateChangeEvent.Attached , RecyclerViewChildAttachStateChangeEvent.Detached Note: Created flow keeps a strong reference to the RecyclerView instance until the coroutine that launched the flow collector is cancelled. Example of usage: recyclerView.childAttachStateChangeEvents() .onEach { event -> when(event) { is RecyclerViewChildAttachStateChangeEvent.Attached -> { // handle attached event } is RecyclerViewChildAttachStateChangeEvent.Detached -> { // handle detached event } } } .launchIn(uiScope)","title":"Child attach state change events"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/child-attach-state-change-events/#childattachstatechangeevents","text":"@CheckResult fun RecyclerView.childAttachStateChangeEvents(): Flow< RecyclerViewChildAttachStateChangeEvent > Create a Flow of child attach state change events on the RecyclerView instance where the value emitted is one of the 2 event types: RecyclerViewChildAttachStateChangeEvent.Attached , RecyclerViewChildAttachStateChangeEvent.Detached Note: Created flow keeps a strong reference to the RecyclerView instance until the coroutine that launched the flow collector is cancelled. Example of usage: recyclerView.childAttachStateChangeEvents() .onEach { event -> when(event) { is RecyclerViewChildAttachStateChangeEvent.Attached -> { // handle attached event } is RecyclerViewChildAttachStateChangeEvent.Detached -> { // handle detached event } } } .launchIn(uiScope)","title":"childAttachStateChangeEvents"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/fling-events/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / androidx.recyclerview.widget.RecyclerView / flingEvents flingEvents \u00b6 @CheckResult fun RecyclerView.flingEvents(handled: ( FlingEvent ) -> Boolean = { true }): Flow< FlingEvent > Create a Flow of fling events on the RecyclerView instance. Parameters \u00b6 handled - function to be invoked with each value to determine the return value of the underlying RecyclerView.OnFlingListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the RecyclerView instance until the coroutine that launched the flow collector is cancelled. Example of usage: recyclerView.flingEvents { it.velocityX != 0 } .onEach { event -> // handle fling event } .launchIn(uiScope)","title":"Fling events"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/fling-events/#flingevents","text":"@CheckResult fun RecyclerView.flingEvents(handled: ( FlingEvent ) -> Boolean = { true }): Flow< FlingEvent > Create a Flow of fling events on the RecyclerView instance.","title":"flingEvents"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/fling-events/#parameters","text":"handled - function to be invoked with each value to determine the return value of the underlying RecyclerView.OnFlingListener . Note that the Flow will only emit when this function evaluates to true. Note: Created flow keeps a strong reference to the RecyclerView instance until the coroutine that launched the flow collector is cancelled. Example of usage: recyclerView.flingEvents { it.velocityX != 0 } .onEach { event -> // handle fling event } .launchIn(uiScope)","title":"Parameters"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/scroll-events/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / androidx.recyclerview.widget.RecyclerView / scrollEvents scrollEvents \u00b6 @CheckResult fun RecyclerView.scrollEvents(): Flow< RecyclerViewScrollEvent > Create a Flow of scroll events on the RecyclerView instance. Note: Created flow keeps a strong reference to the RecyclerView instance until the coroutine that launched the flow collector is cancelled. Example of usage: recyclerView.scrollEvents() .onEach { event -> // handle recycler view scroll event } .launchIn(uiScope)","title":"Scroll events"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/scroll-events/#scrollevents","text":"@CheckResult fun RecyclerView.scrollEvents(): Flow< RecyclerViewScrollEvent > Create a Flow of scroll events on the RecyclerView instance. Note: Created flow keeps a strong reference to the RecyclerView instance until the coroutine that launched the flow collector is cancelled. Example of usage: recyclerView.scrollEvents() .onEach { event -> // handle recycler view scroll event } .launchIn(uiScope)","title":"scrollEvents"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/scroll-state-changes/","text":"flowbinding-recyclerview / reactivecircus.flowbinding.recyclerview / androidx.recyclerview.widget.RecyclerView / scrollStateChanges scrollStateChanges \u00b6 @CheckResult fun RecyclerView.scrollStateChanges(): Flow< Int > Create a Flow of scroll state change events on the RecyclerView instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . Note: Created flow keeps a strong reference to the RecyclerView instance until the coroutine that launched the flow collector is cancelled. Example of usage: recyclerView.scrollStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"Scroll state changes"},{"location":"api/flowbinding-recyclerview/reactivecircus.flowbinding.recyclerview/androidx.recyclerview.widget.-recycler-view/scroll-state-changes/#scrollstatechanges","text":"@CheckResult fun RecyclerView.scrollStateChanges(): Flow< Int > Create a Flow of scroll state change events on the RecyclerView instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . Note: Created flow keeps a strong reference to the RecyclerView instance until the coroutine that launched the flow collector is cancelled. Example of usage: recyclerView.scrollStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"scrollStateChanges"},{"location":"api/flowbinding-swiperefreshlayout/","text":"flowbinding-swiperefreshlayout Packages \u00b6 Name Summary reactivecircus.flowbinding.swiperefreshlayout Index \u00b6 All Types","title":"flowbinding-swiperefreshlayout"},{"location":"api/flowbinding-swiperefreshlayout/#packages","text":"Name Summary reactivecircus.flowbinding.swiperefreshlayout","title":"Packages"},{"location":"api/flowbinding-swiperefreshlayout/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-swiperefreshlayout/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.swiperefreshlayout) androidx.swiperefreshlayout.widget.SwipeRefreshLayout \u00b6","title":"Index"},{"location":"api/flowbinding-swiperefreshlayout/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.swiperefreshlayout)","title":"All Types"},{"location":"api/flowbinding-swiperefreshlayout/alltypes/#androidxswiperefreshlayoutwidgetswiperefreshlayout","text":"","title":"androidx.swiperefreshlayout.widget.SwipeRefreshLayout"},{"location":"api/flowbinding-swiperefreshlayout/reactivecircus.flowbinding.swiperefreshlayout/","text":"flowbinding-swiperefreshlayout / reactivecircus.flowbinding.swiperefreshlayout Package reactivecircus.flowbinding.swiperefreshlayout \u00b6 Extensions for External Classes \u00b6 Name Summary androidx.swiperefreshlayout.widget.SwipeRefreshLayout","title":"Index"},{"location":"api/flowbinding-swiperefreshlayout/reactivecircus.flowbinding.swiperefreshlayout/#package-reactivecircusflowbindingswiperefreshlayout","text":"","title":"Package reactivecircus.flowbinding.swiperefreshlayout"},{"location":"api/flowbinding-swiperefreshlayout/reactivecircus.flowbinding.swiperefreshlayout/#extensions-for-external-classes","text":"Name Summary androidx.swiperefreshlayout.widget.SwipeRefreshLayout","title":"Extensions for External Classes"},{"location":"api/flowbinding-swiperefreshlayout/reactivecircus.flowbinding.swiperefreshlayout/androidx.swiperefreshlayout.widget.-swipe-refresh-layout/","text":"flowbinding-swiperefreshlayout / reactivecircus.flowbinding.swiperefreshlayout / androidx.swiperefreshlayout.widget.SwipeRefreshLayout Extensions for androidx.swiperefreshlayout.widget.SwipeRefreshLayout \u00b6 Name Summary refreshes Create a Flow of refresh events on the SwipeRefreshLayout instance. fun SwipeRefreshLayout.refreshes(): Flow< Unit >","title":"Index"},{"location":"api/flowbinding-swiperefreshlayout/reactivecircus.flowbinding.swiperefreshlayout/androidx.swiperefreshlayout.widget.-swipe-refresh-layout/#extensions-for-androidxswiperefreshlayoutwidgetswiperefreshlayout","text":"Name Summary refreshes Create a Flow of refresh events on the SwipeRefreshLayout instance. fun SwipeRefreshLayout.refreshes(): Flow< Unit >","title":"Extensions for androidx.swiperefreshlayout.widget.SwipeRefreshLayout"},{"location":"api/flowbinding-swiperefreshlayout/reactivecircus.flowbinding.swiperefreshlayout/androidx.swiperefreshlayout.widget.-swipe-refresh-layout/refreshes/","text":"flowbinding-swiperefreshlayout / reactivecircus.flowbinding.swiperefreshlayout / androidx.swiperefreshlayout.widget.SwipeRefreshLayout / refreshes refreshes \u00b6 @CheckResult fun SwipeRefreshLayout.refreshes(): Flow< Unit > Create a Flow of refresh events on the SwipeRefreshLayout instance. Note: Created flow keeps a strong reference to the SwipeRefreshLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: swipeRefreshLayout.refreshes() .onEach { // handle refreshed } .launchIn(uiScope)","title":"Refreshes"},{"location":"api/flowbinding-swiperefreshlayout/reactivecircus.flowbinding.swiperefreshlayout/androidx.swiperefreshlayout.widget.-swipe-refresh-layout/refreshes/#refreshes","text":"@CheckResult fun SwipeRefreshLayout.refreshes(): Flow< Unit > Create a Flow of refresh events on the SwipeRefreshLayout instance. Note: Created flow keeps a strong reference to the SwipeRefreshLayout instance until the coroutine that launched the flow collector is cancelled. Example of usage: swipeRefreshLayout.refreshes() .onEach { // handle refreshed } .launchIn(uiScope)","title":"refreshes"},{"location":"api/flowbinding-viewpager/","text":"flowbinding-viewpager Packages \u00b6 Name Summary reactivecircus.flowbinding.viewpager Index \u00b6 All Types","title":"Index"},{"location":"api/flowbinding-viewpager/#packages","text":"Name Summary reactivecircus.flowbinding.viewpager","title":"Packages"},{"location":"api/flowbinding-viewpager/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-viewpager/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.viewpager) androidx.viewpager.widget.ViewPager \u00b6 | reactivecircus.flowbinding.viewpager.ViewPagerPageScrollEvent \u00b6","title":"Index"},{"location":"api/flowbinding-viewpager/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.viewpager)","title":"All Types"},{"location":"api/flowbinding-viewpager/alltypes/#androidxviewpagerwidgetviewpager","text":"|","title":"androidx.viewpager.widget.ViewPager"},{"location":"api/flowbinding-viewpager/alltypes/#reactivecircusflowbindingviewpagerviewpagerpagescrollevent","text":"","title":"reactivecircus.flowbinding.viewpager.ViewPagerPageScrollEvent"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager Package reactivecircus.flowbinding.viewpager \u00b6 Types \u00b6 Name Summary ViewPagerPageScrollEvent class ViewPagerPageScrollEvent Extensions for External Classes \u00b6 Name Summary androidx.viewpager.widget.ViewPager","title":"Index"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/#package-reactivecircusflowbindingviewpager","text":"","title":"Package reactivecircus.flowbinding.viewpager"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/#types","text":"Name Summary ViewPagerPageScrollEvent class ViewPagerPageScrollEvent","title":"Types"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/#extensions-for-external-classes","text":"Name Summary androidx.viewpager.widget.ViewPager","title":"Extensions for External Classes"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / ViewPagerPageScrollEvent ViewPagerPageScrollEvent \u00b6 class ViewPagerPageScrollEvent Constructors \u00b6 Name Summary <init> ViewPagerPageScrollEvent(view: ViewPager, position: Int , positionOffset: Float , positionOffsetPixel: Int ) Properties \u00b6 Name Summary position val position: Int positionOffset val positionOffset: Float positionOffsetPixel val positionOffsetPixel: Int view val view: ViewPager","title":"Index"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/#viewpagerpagescrollevent","text":"class ViewPagerPageScrollEvent","title":"ViewPagerPageScrollEvent"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/#constructors","text":"Name Summary <init> ViewPagerPageScrollEvent(view: ViewPager, position: Int , positionOffset: Float , positionOffsetPixel: Int )","title":"Constructors"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/#properties","text":"Name Summary position val position: Int positionOffset val positionOffset: Float positionOffsetPixel val positionOffsetPixel: Int view val view: ViewPager","title":"Properties"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/-init-/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / ViewPagerPageScrollEvent / <init> <init> \u00b6 ViewPagerPageScrollEvent(view: ViewPager, position: Int , positionOffset: Float , positionOffsetPixel: Int )","title":" init "},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/-init-/#init","text":"ViewPagerPageScrollEvent(view: ViewPager, position: Int , positionOffset: Float , positionOffsetPixel: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/position-offset-pixel/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / ViewPagerPageScrollEvent / positionOffsetPixel positionOffsetPixel \u00b6 val positionOffsetPixel: Int","title":"Position offset pixel"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/position-offset-pixel/#positionoffsetpixel","text":"val positionOffsetPixel: Int","title":"positionOffsetPixel"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/position-offset/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / ViewPagerPageScrollEvent / positionOffset positionOffset \u00b6 val positionOffset: Float","title":"Position offset"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/position-offset/#positionoffset","text":"val positionOffset: Float","title":"positionOffset"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/position/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / ViewPagerPageScrollEvent / position position \u00b6 val position: Int","title":"Position"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/position/#position","text":"val position: Int","title":"position"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/view/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / ViewPagerPageScrollEvent / view view \u00b6 val view: ViewPager","title":"View"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/-view-pager-page-scroll-event/view/#view","text":"val view: ViewPager","title":"view"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/androidx.viewpager.widget.-view-pager/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / androidx.viewpager.widget.ViewPager Extensions for androidx.viewpager.widget.ViewPager \u00b6 Name Summary pageScrollEvents Create a Flow of page scroll events on the ViewPager instance. fun ViewPager.pageScrollEvents(): Flow< ViewPagerPageScrollEvent > pageScrollStateChanges Create a Flow of page scroll state change events on the ViewPager instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . fun ViewPager.pageScrollStateChanges(): Flow< Int > pageSelections Create a InitialValueFlow of page selected events on the ViewPager instance where the value emitted is the position index of the new selected page. fun ViewPager.pageSelections(): InitialValueFlow< Int >","title":"Index"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/androidx.viewpager.widget.-view-pager/#extensions-for-androidxviewpagerwidgetviewpager","text":"Name Summary pageScrollEvents Create a Flow of page scroll events on the ViewPager instance. fun ViewPager.pageScrollEvents(): Flow< ViewPagerPageScrollEvent > pageScrollStateChanges Create a Flow of page scroll state change events on the ViewPager instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . fun ViewPager.pageScrollStateChanges(): Flow< Int > pageSelections Create a InitialValueFlow of page selected events on the ViewPager instance where the value emitted is the position index of the new selected page. fun ViewPager.pageSelections(): InitialValueFlow< Int >","title":"Extensions for androidx.viewpager.widget.ViewPager"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/androidx.viewpager.widget.-view-pager/page-scroll-events/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / androidx.viewpager.widget.ViewPager / pageScrollEvents pageScrollEvents \u00b6 @CheckResult fun ViewPager.pageScrollEvents(): Flow< ViewPagerPageScrollEvent > Create a Flow of page scroll events on the ViewPager instance. Note: Created flow keeps a strong reference to the ViewPager instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager.pageScrollEvents() .onEach { event -> // handle page scroll event } .launchIn(uiScope)","title":"Page scroll events"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/androidx.viewpager.widget.-view-pager/page-scroll-events/#pagescrollevents","text":"@CheckResult fun ViewPager.pageScrollEvents(): Flow< ViewPagerPageScrollEvent > Create a Flow of page scroll events on the ViewPager instance. Note: Created flow keeps a strong reference to the ViewPager instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager.pageScrollEvents() .onEach { event -> // handle page scroll event } .launchIn(uiScope)","title":"pageScrollEvents"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/androidx.viewpager.widget.-view-pager/page-scroll-state-changes/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / androidx.viewpager.widget.ViewPager / pageScrollStateChanges pageScrollStateChanges \u00b6 @CheckResult fun ViewPager.pageScrollStateChanges(): Flow< Int > Create a Flow of page scroll state change events on the ViewPager instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . Note: Created flow keeps a strong reference to the ViewPager instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager.pageScrollStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"Page scroll state changes"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/androidx.viewpager.widget.-view-pager/page-scroll-state-changes/#pagescrollstatechanges","text":"@CheckResult fun ViewPager.pageScrollStateChanges(): Flow< Int > Create a Flow of page scroll state change events on the ViewPager instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . Note: Created flow keeps a strong reference to the ViewPager instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager.pageScrollStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"pageScrollStateChanges"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/androidx.viewpager.widget.-view-pager/page-selections/","text":"flowbinding-viewpager / reactivecircus.flowbinding.viewpager / androidx.viewpager.widget.ViewPager / pageSelections pageSelections \u00b6 @CheckResult fun ViewPager.pageSelections(): InitialValueFlow< Int > Create a InitialValueFlow of page selected events on the ViewPager instance where the value emitted is the position index of the new selected page. Note: Created flow keeps a strong reference to the ViewPager instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager.pageSelections() .onEach { position -> // handle position } .launchIn(uiScope)","title":"Page selections"},{"location":"api/flowbinding-viewpager/reactivecircus.flowbinding.viewpager/androidx.viewpager.widget.-view-pager/page-selections/#pageselections","text":"@CheckResult fun ViewPager.pageSelections(): InitialValueFlow< Int > Create a InitialValueFlow of page selected events on the ViewPager instance where the value emitted is the position index of the new selected page. Note: Created flow keeps a strong reference to the ViewPager instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager.pageSelections() .onEach { position -> // handle position } .launchIn(uiScope)","title":"pageSelections"},{"location":"api/flowbinding-viewpager2/","text":"flowbinding-viewpager2 Packages \u00b6 Name Summary reactivecircus.flowbinding.viewpager2 Index \u00b6 All Types","title":"flowbinding-viewpager2"},{"location":"api/flowbinding-viewpager2/#packages","text":"Name Summary reactivecircus.flowbinding.viewpager2","title":"Packages"},{"location":"api/flowbinding-viewpager2/#index","text":"All Types","title":"Index"},{"location":"api/flowbinding-viewpager2/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.flowbinding.viewpager2) androidx.viewpager2.widget.ViewPager2 \u00b6 | reactivecircus.flowbinding.viewpager2.ViewPager2PageScrollEvent \u00b6","title":"Index"},{"location":"api/flowbinding-viewpager2/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.flowbinding.viewpager2)","title":"All Types"},{"location":"api/flowbinding-viewpager2/alltypes/#androidxviewpager2widgetviewpager2","text":"|","title":"androidx.viewpager2.widget.ViewPager2"},{"location":"api/flowbinding-viewpager2/alltypes/#reactivecircusflowbindingviewpager2viewpager2pagescrollevent","text":"","title":"reactivecircus.flowbinding.viewpager2.ViewPager2PageScrollEvent"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 Package reactivecircus.flowbinding.viewpager2 \u00b6 Types \u00b6 Name Summary ViewPager2PageScrollEvent class ViewPager2PageScrollEvent Extensions for External Classes \u00b6 Name Summary androidx.viewpager2.widget.ViewPager2","title":"Index"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/#package-reactivecircusflowbindingviewpager2","text":"","title":"Package reactivecircus.flowbinding.viewpager2"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/#types","text":"Name Summary ViewPager2PageScrollEvent class ViewPager2PageScrollEvent","title":"Types"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/#extensions-for-external-classes","text":"Name Summary androidx.viewpager2.widget.ViewPager2","title":"Extensions for External Classes"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / ViewPager2PageScrollEvent ViewPager2PageScrollEvent \u00b6 class ViewPager2PageScrollEvent Constructors \u00b6 Name Summary <init> ViewPager2PageScrollEvent(view: ViewPager2, position: Int , positionOffset: Float , positionOffsetPixel: Int ) Properties \u00b6 Name Summary position val position: Int positionOffset val positionOffset: Float positionOffsetPixel val positionOffsetPixel: Int view val view: ViewPager2","title":"Index"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/#viewpager2pagescrollevent","text":"class ViewPager2PageScrollEvent","title":"ViewPager2PageScrollEvent"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/#constructors","text":"Name Summary <init> ViewPager2PageScrollEvent(view: ViewPager2, position: Int , positionOffset: Float , positionOffsetPixel: Int )","title":"Constructors"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/#properties","text":"Name Summary position val position: Int positionOffset val positionOffset: Float positionOffsetPixel val positionOffsetPixel: Int view val view: ViewPager2","title":"Properties"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/-init-/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / ViewPager2PageScrollEvent / <init> <init> \u00b6 ViewPager2PageScrollEvent(view: ViewPager2, position: Int , positionOffset: Float , positionOffsetPixel: Int )","title":" init "},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/-init-/#init","text":"ViewPager2PageScrollEvent(view: ViewPager2, position: Int , positionOffset: Float , positionOffsetPixel: Int )","title":"&lt;init&gt;"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/position-offset-pixel/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / ViewPager2PageScrollEvent / positionOffsetPixel positionOffsetPixel \u00b6 val positionOffsetPixel: Int","title":"Position offset pixel"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/position-offset-pixel/#positionoffsetpixel","text":"val positionOffsetPixel: Int","title":"positionOffsetPixel"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/position-offset/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / ViewPager2PageScrollEvent / positionOffset positionOffset \u00b6 val positionOffset: Float","title":"Position offset"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/position-offset/#positionoffset","text":"val positionOffset: Float","title":"positionOffset"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/position/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / ViewPager2PageScrollEvent / position position \u00b6 val position: Int","title":"Position"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/position/#position","text":"val position: Int","title":"position"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/view/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / ViewPager2PageScrollEvent / view view \u00b6 val view: ViewPager2","title":"View"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/-view-pager2-page-scroll-event/view/#view","text":"val view: ViewPager2","title":"view"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/androidx.viewpager2.widget.-view-pager2/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / androidx.viewpager2.widget.ViewPager2 Extensions for androidx.viewpager2.widget.ViewPager2 \u00b6 Name Summary pageScrollEvents Create a Flow of page scroll events on the ViewPager2 instance. fun ViewPager2.pageScrollEvents(): Flow< ViewPager2PageScrollEvent > pageScrollStateChanges Create a Flow of page scroll state change events on the ViewPager2 instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . fun ViewPager2.pageScrollStateChanges(): Flow< Int > pageSelections Create a InitialValueFlow of page selected events on the ViewPager2 instance where the value emitted is the position index of the new selected page. fun ViewPager2.pageSelections(): InitialValueFlow< Int >","title":"Index"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/androidx.viewpager2.widget.-view-pager2/#extensions-for-androidxviewpager2widgetviewpager2","text":"Name Summary pageScrollEvents Create a Flow of page scroll events on the ViewPager2 instance. fun ViewPager2.pageScrollEvents(): Flow< ViewPager2PageScrollEvent > pageScrollStateChanges Create a Flow of page scroll state change events on the ViewPager2 instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . fun ViewPager2.pageScrollStateChanges(): Flow< Int > pageSelections Create a InitialValueFlow of page selected events on the ViewPager2 instance where the value emitted is the position index of the new selected page. fun ViewPager2.pageSelections(): InitialValueFlow< Int >","title":"Extensions for androidx.viewpager2.widget.ViewPager2"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/androidx.viewpager2.widget.-view-pager2/page-scroll-events/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / androidx.viewpager2.widget.ViewPager2 / pageScrollEvents pageScrollEvents \u00b6 @CheckResult fun ViewPager2.pageScrollEvents(): Flow< ViewPager2PageScrollEvent > Create a Flow of page scroll events on the ViewPager2 instance. Note: Created flow keeps a strong reference to the ViewPager2 instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager2.pageScrollEvents() .onEach { event -> // handle page scroll event } .launchIn(uiScope)","title":"Page scroll events"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/androidx.viewpager2.widget.-view-pager2/page-scroll-events/#pagescrollevents","text":"@CheckResult fun ViewPager2.pageScrollEvents(): Flow< ViewPager2PageScrollEvent > Create a Flow of page scroll events on the ViewPager2 instance. Note: Created flow keeps a strong reference to the ViewPager2 instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager2.pageScrollEvents() .onEach { event -> // handle page scroll event } .launchIn(uiScope)","title":"pageScrollEvents"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/androidx.viewpager2.widget.-view-pager2/page-scroll-state-changes/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / androidx.viewpager2.widget.ViewPager2 / pageScrollStateChanges pageScrollStateChanges \u00b6 @CheckResult fun ViewPager2.pageScrollStateChanges(): Flow< Int > Create a Flow of page scroll state change events on the ViewPager2 instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . Note: Created flow keeps a strong reference to the ViewPager2 instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager2.pageScrollStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"Page scroll state changes"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/androidx.viewpager2.widget.-view-pager2/page-scroll-state-changes/#pagescrollstatechanges","text":"@CheckResult fun ViewPager2.pageScrollStateChanges(): Flow< Int > Create a Flow of page scroll state change events on the ViewPager2 instance where the value emitted can be one of SCROLL_STATE_IDLE , SCROLL_STATE_DRAGGING } or SCROLL_STATE_SETTLING . Note: Created flow keeps a strong reference to the ViewPager2 instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager2.pageScrollStateChanges() .onEach { state -> // handle state } .launchIn(uiScope)","title":"pageScrollStateChanges"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/androidx.viewpager2.widget.-view-pager2/page-selections/","text":"flowbinding-viewpager2 / reactivecircus.flowbinding.viewpager2 / androidx.viewpager2.widget.ViewPager2 / pageSelections pageSelections \u00b6 @CheckResult fun ViewPager2.pageSelections(): InitialValueFlow< Int > Create a InitialValueFlow of page selected events on the ViewPager2 instance where the value emitted is the position index of the new selected page. Note: Created flow keeps a strong reference to the ViewPager2 instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager2.pageSelections() .onEach { position -> // handle position } .launchIn(uiScope)","title":"Page selections"},{"location":"api/flowbinding-viewpager2/reactivecircus.flowbinding.viewpager2/androidx.viewpager2.widget.-view-pager2/page-selections/#pageselections","text":"@CheckResult fun ViewPager2.pageSelections(): InitialValueFlow< Int > Create a InitialValueFlow of page selected events on the ViewPager2 instance where the value emitted is the position index of the new selected page. Note: Created flow keeps a strong reference to the ViewPager2 instance until the coroutine that launched the flow collector is cancelled. Example of usage: viewPager2.pageSelections() .onEach { position -> // handle position } .launchIn(uiScope)","title":"pageSelections"},{"location":"flowbinding-activity/","text":"FlowBinding Activity \u00b6 This module provides bindings for the AndroidX Activity library. Transitive Dependency \u00b6 androidx.activity:activity-ktx Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-activity:${flowbinding_version}\" Available Bindings \u00b6 fun OnBackPressedDispatcher . backPresses ( enabled : Boolean ): Flow < Unit >","title":"AndroidX Activity Bindings"},{"location":"flowbinding-activity/#flowbinding-activity","text":"This module provides bindings for the AndroidX Activity library.","title":"FlowBinding Activity"},{"location":"flowbinding-activity/#transitive-dependency","text":"androidx.activity:activity-ktx","title":"Transitive Dependency"},{"location":"flowbinding-activity/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-activity:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-activity/#available-bindings","text":"fun OnBackPressedDispatcher . backPresses ( enabled : Boolean ): Flow < Unit >","title":"Available Bindings"},{"location":"flowbinding-android/","text":"FlowBinding Android \u00b6 This module provides bindings for the Android platform APIs. Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-android:${flowbinding_version}\" Available Bindings \u00b6 // MenuItem fun MenuItem . actionViewEvents ( handled : ( MenuItemActionViewEvent ) -> Boolean ): Flow < MenuItemActionViewEvent > fun MenuItem . clicks ( handled : ( MenuItem ) -> Boolean ): Flow < Unit > // View fun View . attachEvents (): Flow < ViewAttachEvent > fun View . clicks (): Flow < Unit > fun View . drags ( handled : ( DragEvent ) -> Boolean = { true }): Flow < DragEvent > fun View . draws (): Flow < Unit > fun View . focusChanges (): InitialValueFlow < Boolean > fun View . globalLayouts (): Flow < Unit > fun ViewGroup . hierarchyChangeEvents (): Flow < HierarchyChangeEvent > fun View . hovers ( handled : ( MotionEvent ) -> Boolean = { true }): Flow < MotionEvent > fun View . keys ( handled : ( KeyEvent ) -> Boolean = { true }): Flow < KeyEvent > fun View . layoutChangeEvents (): Flow < LayoutChangeEvent > fun View . layoutChanges (): Flow < Unit > fun View . longClicks (): Flow < Unit > fun View . preDraws ( proceedDrawingPass : () -> Boolean ): Flow < Unit > fun View . scrollChangeEvents (): Flow < ScrollChangeEvent > fun View . systemUiVisibilityChanges (): Flow < Int > fun View . touches ( handled : ( MotionEvent ) -> Boolean = { true }): Flow < MotionEvent > // AbsListView fun AbsListView . scrollEvents (): Flow < ScrollEvent > // Adapter fun Adapter . dataChanges (): InitialValueFlow < Adapter > // AdapterView fun < T : Adapter > AdapterView < T >. itemClickEvents (): Flow < AdapterViewItemClickEvent > fun < T : Adapter > AdapterView < T >. itemClicks (): Flow < Int > fun < T : Adapter > AdapterView < T >. itemLongClickEvents ( handled : ( AdapterViewItemLongClickEvent ) -> Boolean = { true }): Flow < AdapterViewItemLongClickEvent > fun < T : Adapter > AdapterView < T >. itemLongClicks ( handled : () -> Boolean = { true }): Flow < Int > fun < T : Adapter > AdapterView < T >. itemSelections (): InitialValueFlow < Int > fun < T : Adapter > AdapterView < T >. selectionEvents (): InitialValueFlow < AdapterViewSelectionEvent > // AutoCompleteTextView fun AutoCompleteTextView . dismisses (): Flow < Unit > fun AutoCompleteTextView . itemClickEvents (): Flow < AdapterViewItemClickEvent > // CompoundButton fun CompoundButton . checkedChanges (): InitialValueFlow < Boolean > // PopupMenu fun PopupMenu . dismisses (): Flow < Unit > fun PopupMenu . itemClicks (): Flow < MenuItem > // RadioGroup fun RadioGroup . checkedChanges (): InitialValueFlow < Int > // RatingBar fun RatingBar . ratingChangeEvents (): InitialValueFlow < RatingChangeEvent > fun RatingBar . ratingChanges (): InitialValueFlow < Float > // SearchView fun SearchView . queryTextChanges (): InitialValueFlow < CharSequence > fun SearchView . queryTextEvents (): InitialValueFlow < QueryTextEvent > // SeekBar fun SeekBar . changeEvents (): InitialValueFlow < SeekBarChangeEvent > fun SeekBar . progressChanges (): InitialValueFlow < Int > // TextView fun TextView . afterTextChanges (): InitialValueFlow < AfterTextChangeEvent > fun TextView . beforeTextChanges (): InitialValueFlow < BeforeTextChangeEvent > fun TextView . editorActionEvents ( handled : ( EditorActionEvent ) -> Boolean = { true }): Flow < EditorActionEvent > fun TextView . textChangeEvents (): InitialValueFlow < TextChangeEvent > fun TextView . textChanges (): InitialValueFlow < CharSequence >","title":"Platform Bindings"},{"location":"flowbinding-android/#flowbinding-android","text":"This module provides bindings for the Android platform APIs.","title":"FlowBinding Android"},{"location":"flowbinding-android/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-android:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-android/#available-bindings","text":"// MenuItem fun MenuItem . actionViewEvents ( handled : ( MenuItemActionViewEvent ) -> Boolean ): Flow < MenuItemActionViewEvent > fun MenuItem . clicks ( handled : ( MenuItem ) -> Boolean ): Flow < Unit > // View fun View . attachEvents (): Flow < ViewAttachEvent > fun View . clicks (): Flow < Unit > fun View . drags ( handled : ( DragEvent ) -> Boolean = { true }): Flow < DragEvent > fun View . draws (): Flow < Unit > fun View . focusChanges (): InitialValueFlow < Boolean > fun View . globalLayouts (): Flow < Unit > fun ViewGroup . hierarchyChangeEvents (): Flow < HierarchyChangeEvent > fun View . hovers ( handled : ( MotionEvent ) -> Boolean = { true }): Flow < MotionEvent > fun View . keys ( handled : ( KeyEvent ) -> Boolean = { true }): Flow < KeyEvent > fun View . layoutChangeEvents (): Flow < LayoutChangeEvent > fun View . layoutChanges (): Flow < Unit > fun View . longClicks (): Flow < Unit > fun View . preDraws ( proceedDrawingPass : () -> Boolean ): Flow < Unit > fun View . scrollChangeEvents (): Flow < ScrollChangeEvent > fun View . systemUiVisibilityChanges (): Flow < Int > fun View . touches ( handled : ( MotionEvent ) -> Boolean = { true }): Flow < MotionEvent > // AbsListView fun AbsListView . scrollEvents (): Flow < ScrollEvent > // Adapter fun Adapter . dataChanges (): InitialValueFlow < Adapter > // AdapterView fun < T : Adapter > AdapterView < T >. itemClickEvents (): Flow < AdapterViewItemClickEvent > fun < T : Adapter > AdapterView < T >. itemClicks (): Flow < Int > fun < T : Adapter > AdapterView < T >. itemLongClickEvents ( handled : ( AdapterViewItemLongClickEvent ) -> Boolean = { true }): Flow < AdapterViewItemLongClickEvent > fun < T : Adapter > AdapterView < T >. itemLongClicks ( handled : () -> Boolean = { true }): Flow < Int > fun < T : Adapter > AdapterView < T >. itemSelections (): InitialValueFlow < Int > fun < T : Adapter > AdapterView < T >. selectionEvents (): InitialValueFlow < AdapterViewSelectionEvent > // AutoCompleteTextView fun AutoCompleteTextView . dismisses (): Flow < Unit > fun AutoCompleteTextView . itemClickEvents (): Flow < AdapterViewItemClickEvent > // CompoundButton fun CompoundButton . checkedChanges (): InitialValueFlow < Boolean > // PopupMenu fun PopupMenu . dismisses (): Flow < Unit > fun PopupMenu . itemClicks (): Flow < MenuItem > // RadioGroup fun RadioGroup . checkedChanges (): InitialValueFlow < Int > // RatingBar fun RatingBar . ratingChangeEvents (): InitialValueFlow < RatingChangeEvent > fun RatingBar . ratingChanges (): InitialValueFlow < Float > // SearchView fun SearchView . queryTextChanges (): InitialValueFlow < CharSequence > fun SearchView . queryTextEvents (): InitialValueFlow < QueryTextEvent > // SeekBar fun SeekBar . changeEvents (): InitialValueFlow < SeekBarChangeEvent > fun SeekBar . progressChanges (): InitialValueFlow < Int > // TextView fun TextView . afterTextChanges (): InitialValueFlow < AfterTextChangeEvent > fun TextView . beforeTextChanges (): InitialValueFlow < BeforeTextChangeEvent > fun TextView . editorActionEvents ( handled : ( EditorActionEvent ) -> Boolean = { true }): Flow < EditorActionEvent > fun TextView . textChangeEvents (): InitialValueFlow < TextChangeEvent > fun TextView . textChanges (): InitialValueFlow < CharSequence >","title":"Available Bindings"},{"location":"flowbinding-appcompat/","text":"FlowBinding AppCompat \u00b6 This module provides bindings for the AndroidX AppCompat library. Transitive Dependency \u00b6 androidx.appcompat:appcompat Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-appcompat:${flowbinding_version}\" Available Bindings \u00b6 // ActionMenuView fun ActionMenuView . itemClicks (): Flow < MenuItem > // PopupMenu fun PopupMenu . dismisses (): Flow < Unit > fun PopupMenu . itemClicks (): Flow < MenuItem > // SearchView fun SearchView . queryTextChanges (): InitialValueFlow < CharSequence > fun SearchView . queryTextEvents (): InitialValueFlow < QueryTextEvent > // Toolbar fun Toolbar . itemClicks (): Flow < MenuItem > fun Toolbar . navigationClicks (): Flow < Unit >","title":"AndroidX AppCompat Bindings"},{"location":"flowbinding-appcompat/#flowbinding-appcompat","text":"This module provides bindings for the AndroidX AppCompat library.","title":"FlowBinding AppCompat"},{"location":"flowbinding-appcompat/#transitive-dependency","text":"androidx.appcompat:appcompat","title":"Transitive Dependency"},{"location":"flowbinding-appcompat/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-appcompat:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-appcompat/#available-bindings","text":"// ActionMenuView fun ActionMenuView . itemClicks (): Flow < MenuItem > // PopupMenu fun PopupMenu . dismisses (): Flow < Unit > fun PopupMenu . itemClicks (): Flow < MenuItem > // SearchView fun SearchView . queryTextChanges (): InitialValueFlow < CharSequence > fun SearchView . queryTextEvents (): InitialValueFlow < QueryTextEvent > // Toolbar fun Toolbar . itemClicks (): Flow < MenuItem > fun Toolbar . navigationClicks (): Flow < Unit >","title":"Available Bindings"},{"location":"flowbinding-core/","text":"FlowBinding Core \u00b6 This module provides bindings for the AndroidX Core library. Transitive Dependency \u00b6 androidx.core:core Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-core:${flowbinding_version}\" Available Bindings \u00b6 fun NestedScrollView . scrollChangeEvents (): Flow < ScrollChangeEvent >","title":"AndroidX Core Bindings"},{"location":"flowbinding-core/#flowbinding-core","text":"This module provides bindings for the AndroidX Core library.","title":"FlowBinding Core"},{"location":"flowbinding-core/#transitive-dependency","text":"androidx.core:core","title":"Transitive Dependency"},{"location":"flowbinding-core/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-core:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-core/#available-bindings","text":"fun NestedScrollView . scrollChangeEvents (): Flow < ScrollChangeEvent >","title":"Available Bindings"},{"location":"flowbinding-drawerlayout/","text":"FlowBinding DrawerLayout \u00b6 This module provides bindings for the AndroidX DrawerLayout library. Transitive Dependency \u00b6 androidx.drawerlayout:drawerlayout Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-drawerlayout:${flowbinding_version}\" Available Bindings \u00b6 fun DrawerLayout . drawerStateChanges ( gravity : Int ): InitialValueFlow < Boolean >","title":"AndroidX DrawerLayout Bindings"},{"location":"flowbinding-drawerlayout/#flowbinding-drawerlayout","text":"This module provides bindings for the AndroidX DrawerLayout library.","title":"FlowBinding DrawerLayout"},{"location":"flowbinding-drawerlayout/#transitive-dependency","text":"androidx.drawerlayout:drawerlayout","title":"Transitive Dependency"},{"location":"flowbinding-drawerlayout/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-drawerlayout:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-drawerlayout/#available-bindings","text":"fun DrawerLayout . drawerStateChanges ( gravity : Int ): InitialValueFlow < Boolean >","title":"Available Bindings"},{"location":"flowbinding-lifecycle/","text":"FlowBinding Lifecycle \u00b6 This module provides bindings for the AndroidX Lifecycle library. Transitive Dependency \u00b6 androidx.lifecycle:lifecycle-common-java8 Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-lifecycle:${flowbinding_version}\" Available Bindings \u00b6 fun Lifecycle . events (): Flow < Lifecycle . Event >","title":"AndroidX Lifecycle Bindings"},{"location":"flowbinding-lifecycle/#flowbinding-lifecycle","text":"This module provides bindings for the AndroidX Lifecycle library.","title":"FlowBinding Lifecycle"},{"location":"flowbinding-lifecycle/#transitive-dependency","text":"androidx.lifecycle:lifecycle-common-java8","title":"Transitive Dependency"},{"location":"flowbinding-lifecycle/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-lifecycle:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-lifecycle/#available-bindings","text":"fun Lifecycle . events (): Flow < Lifecycle . Event >","title":"Available Bindings"},{"location":"flowbinding-material/","text":"FlowBinding Material Components \u00b6 This module provides bindings for the Material Components library. Transitive Dependency \u00b6 com.google.android.material:material Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-material:${flowbinding_version}\" Available Bindings \u00b6 // AppBarLayout fun AppBarLayout . offsetChanges (): Flow < Int > // BottomNavigationView fun BottomNavigationView . itemReselections (): Flow < MenuItem > fun BottomNavigationView . itemSelections (): InitialValueFlow < MenuItem > // BottomSheetBehavior fun View . bottomSheetSlides (): Flow < Float > fun View . bottomSheetStateChanges (): Flow < Int > // Chip fun Chip . closeIconClicks (): Flow < Unit > // ChipGroup fun ChipGroup . chipCheckedChanges (): InitialValueFlow < Int > // MaterialButton fun MaterialButton . checkedChanges (): Flow < Boolean > // MaterialButtonToggleGroup fun MaterialButtonToggleGroup . buttonCheckedChanges (): Flow < MaterialButtonCheckedChangedEvent > // MaterialCardView fun MaterialCardView . checkedChanges (): InitialValueFlow < Boolean > // MaterialDatePicker fun < S > MaterialDatePicker < S >. cancels (): Flow < Unit > fun < S > MaterialDatePicker < S >. dismisses (): Flow < Unit > fun < S > MaterialDatePicker < S >. negativeButtonClicks (): Flow < Unit > fun < S > MaterialDatePicker < S >. positiveButtonClicks (): Flow < S > // NavigationView fun NavigationView . itemSelections (): InitialValueFlow < MenuItem > // Slider fun Slider . valueChanges (): InitialValueFlow < Float > fun Slider . changeEvents (): InitialValueFlow < SliderChangeEvent > fun Slider . touchEvents (): Flow < SliderTouchEvent > // RangeSlider fun RangeSlider . valuesChanges (): InitialValueFlow < List < Float >> fun RangeSlider . changeEvents (): InitialValueFlow < RangeSliderChangeEvent > fun RangeSlider . touchEvents (): Flow < RangeSliderTouchEvent > // Snackbar fun Snackbar . dismissEvents (): Flow < Int > fun Snackbar . shownEvents (): Flow < Unit > // SwipeDismissBehavior fun View . dismisses (): Flow < View > fun View . swipeDismissDragStateChanges (): Flow < Int > // TabLayout fun TabLayout . tabSelectionEvents (): InitialValueFlow < TabLayoutSelectionEvent > // TextInputLayout fun TextInputLayout . startIconClicks (): Flow < Unit > fun TextInputLayout . endIconClicks (): Flow < Unit > fun TextInputLayout . errorIconClicks (): Flow < Unit > fun TextInputLayout . startIconLongClicks (): Flow < Unit > fun TextInputLayout . endIconLongClicks (): Flow < Unit > fun TextInputLayout . errorIconLongClicks (): Flow < Unit >","title":"Material Components Bindings"},{"location":"flowbinding-material/#flowbinding-material-components","text":"This module provides bindings for the Material Components library.","title":"FlowBinding Material Components"},{"location":"flowbinding-material/#transitive-dependency","text":"com.google.android.material:material","title":"Transitive Dependency"},{"location":"flowbinding-material/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-material:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-material/#available-bindings","text":"// AppBarLayout fun AppBarLayout . offsetChanges (): Flow < Int > // BottomNavigationView fun BottomNavigationView . itemReselections (): Flow < MenuItem > fun BottomNavigationView . itemSelections (): InitialValueFlow < MenuItem > // BottomSheetBehavior fun View . bottomSheetSlides (): Flow < Float > fun View . bottomSheetStateChanges (): Flow < Int > // Chip fun Chip . closeIconClicks (): Flow < Unit > // ChipGroup fun ChipGroup . chipCheckedChanges (): InitialValueFlow < Int > // MaterialButton fun MaterialButton . checkedChanges (): Flow < Boolean > // MaterialButtonToggleGroup fun MaterialButtonToggleGroup . buttonCheckedChanges (): Flow < MaterialButtonCheckedChangedEvent > // MaterialCardView fun MaterialCardView . checkedChanges (): InitialValueFlow < Boolean > // MaterialDatePicker fun < S > MaterialDatePicker < S >. cancels (): Flow < Unit > fun < S > MaterialDatePicker < S >. dismisses (): Flow < Unit > fun < S > MaterialDatePicker < S >. negativeButtonClicks (): Flow < Unit > fun < S > MaterialDatePicker < S >. positiveButtonClicks (): Flow < S > // NavigationView fun NavigationView . itemSelections (): InitialValueFlow < MenuItem > // Slider fun Slider . valueChanges (): InitialValueFlow < Float > fun Slider . changeEvents (): InitialValueFlow < SliderChangeEvent > fun Slider . touchEvents (): Flow < SliderTouchEvent > // RangeSlider fun RangeSlider . valuesChanges (): InitialValueFlow < List < Float >> fun RangeSlider . changeEvents (): InitialValueFlow < RangeSliderChangeEvent > fun RangeSlider . touchEvents (): Flow < RangeSliderTouchEvent > // Snackbar fun Snackbar . dismissEvents (): Flow < Int > fun Snackbar . shownEvents (): Flow < Unit > // SwipeDismissBehavior fun View . dismisses (): Flow < View > fun View . swipeDismissDragStateChanges (): Flow < Int > // TabLayout fun TabLayout . tabSelectionEvents (): InitialValueFlow < TabLayoutSelectionEvent > // TextInputLayout fun TextInputLayout . startIconClicks (): Flow < Unit > fun TextInputLayout . endIconClicks (): Flow < Unit > fun TextInputLayout . errorIconClicks (): Flow < Unit > fun TextInputLayout . startIconLongClicks (): Flow < Unit > fun TextInputLayout . endIconLongClicks (): Flow < Unit > fun TextInputLayout . errorIconLongClicks (): Flow < Unit >","title":"Available Bindings"},{"location":"flowbinding-navigation/","text":"FlowBinding Navigation \u00b6 This module provides bindings for the AndroidX Navigation library. Transitive Dependency \u00b6 androidx.navigation:navigation-runtime Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-navigation:${flowbinding_version}\" Available Bindings \u00b6 fun NavController . destinationChangeEvents (): Flow < DestinationChangeEvent >","title":"AndroidX Navigation Component Bindings"},{"location":"flowbinding-navigation/#flowbinding-navigation","text":"This module provides bindings for the AndroidX Navigation library.","title":"FlowBinding Navigation"},{"location":"flowbinding-navigation/#transitive-dependency","text":"androidx.navigation:navigation-runtime","title":"Transitive Dependency"},{"location":"flowbinding-navigation/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-navigation:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-navigation/#available-bindings","text":"fun NavController . destinationChangeEvents (): Flow < DestinationChangeEvent >","title":"Available Bindings"},{"location":"flowbinding-preference/","text":"FlowBinding Preference \u00b6 This module provides bindings for the AndroidX Preference library. Transitive Dependency \u00b6 androidx.preference:preference Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-preference:${flowbinding_version}\" Available Bindings \u00b6 // Preference fun Preference . preferenceChanges (): Flow < Any > fun Preference . preferenceClicks (): Flow < Unit > // EditTextPreference fun EditTextPreference . editTextBindEvents (): Flow < EditTextBindEvent >","title":"AndroidX Preference Bindings"},{"location":"flowbinding-preference/#flowbinding-preference","text":"This module provides bindings for the AndroidX Preference library.","title":"FlowBinding Preference"},{"location":"flowbinding-preference/#transitive-dependency","text":"androidx.preference:preference","title":"Transitive Dependency"},{"location":"flowbinding-preference/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-preference:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-preference/#available-bindings","text":"// Preference fun Preference . preferenceChanges (): Flow < Any > fun Preference . preferenceClicks (): Flow < Unit > // EditTextPreference fun EditTextPreference . editTextBindEvents (): Flow < EditTextBindEvent >","title":"Available Bindings"},{"location":"flowbinding-recyclerview/","text":"FlowBinding RecyclerView \u00b6 This module provides bindings for the AndroidX RecyclerView library. Transitive Dependency \u00b6 androidx.recyclerview:recyclerview Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-recyclerview:${flowbinding_version}\" Available Bindings \u00b6 fun < T : RecyclerView . Adapter < out RecyclerView . ViewHolder > > T . dataChanges (): InitialValueFlow < T > fun RecyclerView . childAttachStateChangeEvents (): Flow < RecyclerViewChildAttachStateChangeEvent > fun RecyclerView . flingEvents ( handled : ( FlingEvent ) -> Boolean = { true }): Flow < FlingEvent > fun RecyclerView . scrollEvents (): Flow < RecyclerViewScrollEvent > fun RecyclerView . scrollStateChanges (): Flow < Int >","title":"AndroidX RecyclerView Bindings"},{"location":"flowbinding-recyclerview/#flowbinding-recyclerview","text":"This module provides bindings for the AndroidX RecyclerView library.","title":"FlowBinding RecyclerView"},{"location":"flowbinding-recyclerview/#transitive-dependency","text":"androidx.recyclerview:recyclerview","title":"Transitive Dependency"},{"location":"flowbinding-recyclerview/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-recyclerview:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-recyclerview/#available-bindings","text":"fun < T : RecyclerView . Adapter < out RecyclerView . ViewHolder > > T . dataChanges (): InitialValueFlow < T > fun RecyclerView . childAttachStateChangeEvents (): Flow < RecyclerViewChildAttachStateChangeEvent > fun RecyclerView . flingEvents ( handled : ( FlingEvent ) -> Boolean = { true }): Flow < FlingEvent > fun RecyclerView . scrollEvents (): Flow < RecyclerViewScrollEvent > fun RecyclerView . scrollStateChanges (): Flow < Int >","title":"Available Bindings"},{"location":"flowbinding-swiperefreshlayout/","text":"FlowBinding SwipeRefreshLayout \u00b6 This module provides bindings for the AndroidX SwipeRefreshLayout library. Transitive Dependency \u00b6 androidx.swiperefreshlayout:swiperefreshlayout Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-swiperefreshlayout:${flowbinding_version}\" Available Bindings \u00b6 fun SwipeRefreshLayout . refreshes (): Flow < Unit >","title":"AndroidX SwipeRefreshLayout Bindings"},{"location":"flowbinding-swiperefreshlayout/#flowbinding-swiperefreshlayout","text":"This module provides bindings for the AndroidX SwipeRefreshLayout library.","title":"FlowBinding SwipeRefreshLayout"},{"location":"flowbinding-swiperefreshlayout/#transitive-dependency","text":"androidx.swiperefreshlayout:swiperefreshlayout","title":"Transitive Dependency"},{"location":"flowbinding-swiperefreshlayout/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-swiperefreshlayout:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-swiperefreshlayout/#available-bindings","text":"fun SwipeRefreshLayout . refreshes (): Flow < Unit >","title":"Available Bindings"},{"location":"flowbinding-viewpager/","text":"FlowBinding ViewPager \u00b6 This module provides bindings for the AndroidX ViewPager library. Transitive Dependency \u00b6 androidx.viewpager:viewpager Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager:${flowbinding_version}\" Available Bindings \u00b6 fun ViewPager . pageScrollEvents (): Flow < ViewPagerPageScrollEvent > fun ViewPager . pageScrollStateChanges (): Flow < Int > fun ViewPager . pageSelections (): InitialValueFlow < Int >","title":"AndroidX ViewPager Bindings"},{"location":"flowbinding-viewpager/#flowbinding-viewpager","text":"This module provides bindings for the AndroidX ViewPager library.","title":"FlowBinding ViewPager"},{"location":"flowbinding-viewpager/#transitive-dependency","text":"androidx.viewpager:viewpager","title":"Transitive Dependency"},{"location":"flowbinding-viewpager/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-viewpager/#available-bindings","text":"fun ViewPager . pageScrollEvents (): Flow < ViewPagerPageScrollEvent > fun ViewPager . pageScrollStateChanges (): Flow < Int > fun ViewPager . pageSelections (): InitialValueFlow < Int >","title":"Available Bindings"},{"location":"flowbinding-viewpager2/","text":"FlowBinding ViewPager2 \u00b6 This module provides bindings for the AndroidX ViewPager2 library. Transitive Dependency \u00b6 androidx.viewpager2:viewpager2 Download \u00b6 implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager2:${flowbinding_version}\" Available Bindings \u00b6 fun ViewPager2 . pageScrollEvents (): Flow < ViewPager2PageScrollEvent > fun ViewPager2 . pageScrollStateChanges (): Flow < Int > fun ViewPager2 . pageSelections (): InitialValueFlow < Int >","title":"AndroidX ViewPager2 Bindings"},{"location":"flowbinding-viewpager2/#flowbinding-viewpager2","text":"This module provides bindings for the AndroidX ViewPager2 library.","title":"FlowBinding ViewPager2"},{"location":"flowbinding-viewpager2/#transitive-dependency","text":"androidx.viewpager2:viewpager2","title":"Transitive Dependency"},{"location":"flowbinding-viewpager2/#download","text":"implementation \"io.github.reactivecircus.flowbinding:flowbinding-viewpager2:${flowbinding_version}\"","title":"Download"},{"location":"flowbinding-viewpager2/#available-bindings","text":"fun ViewPager2 . pageScrollEvents (): Flow < ViewPager2PageScrollEvent > fun ViewPager2 . pageScrollStateChanges (): Flow < Int > fun ViewPager2 . pageSelections (): InitialValueFlow < Int >","title":"Available Bindings"}]}